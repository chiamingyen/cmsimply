<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<?xml-stylesheet ekr_test ?>
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="cmsxh.20131226100304.5349"><vh>@settings</vh>
<v t="cmsxh.20131226100304.5350"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="cmsxh.20131226100304.5351"><vh>@string initial_split_orientation = horizontal</vh></v>
</v>
<v t="amd.20160627092305.1"><vh>CMSimply4 版本</vh>
<v t="amd.20160627155021.1" a="E"><vh>重要參考資料</vh>
<v t="amd.20160627155713.1"><vh>file_selector 內容</vh></v>
</v>
<v t="amd.20160627150746.1"><vh>參考資料</vh></v>
</v>
<v t="cmsxh.20140108172857.2428"><vh>CMSimply public version</vh></v>
<v t="cmsxh.20131226100304.3770"><vh>CMSimply Project</vh>
<v t="cmsxh.20140101145643.1604"><vh>License</vh></v>
<v t="2014pythonE.20140313091306.1898"><vh>Brython ajax</vh></v>
</v>
<v t="cmsxh.20131226100304.3660" a="E"><vh>@path ./</vh>
<v t="amd.20160623221635.1"><vh>@path local_data</vh></v>
<v t="cmsxh.20131226100304.3661" a="E"><vh>@clean application</vh>
<v t="cmsxh.20131226100304.3662"><vh>&lt;&lt;declarations&gt;&gt; (application)</vh></v>
<v t="cmsxh.20131226100304.3663"><vh>downloadlist_access_list</vh></v>
<v t="2014spring.20140530082747.2194"><vh>imagelist_access_list</vh></v>
<v t="cmsxh.20140108172857.1763"><vh>sizeof_fmt</vh></v>
<v t="cmsxh.20131226100304.3664"><vh>set_admin_css</vh></v>
<v t="cmsxh.20131226100304.3665"><vh>set_footer</vh></v>
<v t="cmsxh.20131226100304.3666"><vh>file_get_contents</vh></v>
<v t="cmsxh.20131226100304.3667"><vh>search_content</vh></v>
<v t="cmsxh.20131226100304.3668"><vh>parse_content</vh></v>
<v t="cmsxh.20131226100304.3669"><vh>render_menu</vh></v>
<v t="cmsxh.20131226100304.3671"><vh>syntaxhighlight</vh></v>
<v t="cmsxh.20131226100304.3672"><vh>editorhead (#4)</vh></v>
<v t="cmsxh.20131226100304.3674"><vh>editorfoot</vh></v>
<v t="cmsxh.20131226100304.3675"><vh>tinymce_editor (#4)</vh></v>
<v t="cmsxh.20131226100304.3676"><vh>parse_config</vh></v>
<v t="cmsxh.20131226100304.3677"><vh>file_selector_script</vh></v>
<v t="cmsxh.20131226100304.3678"><vh>file_lister</vh></v>
<v t="cmsxh.20131226100304.3679"><vh>downloadselect_access_list</vh></v>
<v t="2014pythonE.20140321113009.1825"><vh>loadlist_access_list</vh></v>
<v t="cmsxh.20131226100304.3680"><vh>imageselect_access_list</vh></v>
<v t="cmsxh.20131226100304.3681"><vh>sizeof_fmt</vh></v>
<v t="2014pythonE.20140424170033.3316"><vh>unique</vh></v>
<v t="cmsxh.20131226100304.3682" a="E"><vh>class CMSimply</vh>
<v t="cmsxh.20140211204322.1703"><vh>__init__</vh></v>
<v t="cmsxh.20131226100304.3683"><vh>index</vh></v>
<v t="cmsxh.20131226100304.3684"><vh>default</vh></v>
<v t="cmsxh.20131230000041.1602"><vh>error_log</vh></v>
<v t="cmsxh.20131226100304.3685"><vh>login</vh></v>
<v t="cmsxh.20131226100304.3686"><vh>logout</vh></v>
<v t="cmsxh.20131226100304.3687"><vh>checkLogin</vh></v>
<v t="cmsxh.20131226100304.3688"><vh>get_page</vh></v>
<v t="cmsxh.20131226100304.3689"><vh>isAdmin</vh></v>
<v t="cmsxh.20131226100304.3690"><vh>edit_page</vh></v>
<v t="cmsxh.20131226100304.3691"><vh>savePage</vh></v>
<v t="cmsxh.20131226100304.3692"><vh>ssavePage</vh></v>
<v t="2014pythonE.20140321113009.1826"><vh>save_program</vh></v>
<v t="2014pythonE.20140415145042.1961"><vh>save_calcprogram</vh></v>
<v t="2014pythonE.20140327090839.1738"><vh>delete_program</vh></v>
<v t="2014pythonE.20140416133807.1743"><vh>delete_calcprogram</vh></v>
<v t="cmsxh.20131226100304.3694"><vh>fileuploadform</vh></v>
<v t="cmsxh.20131226100304.3695"><vh>fileaxupload</vh></v>
<v t="cmsxh.20140101145643.3406"><vh>flvplayer</vh></v>
<v t="cmsxh.20131226100304.3696"><vh>imageuploadform</vh></v>
<v t="cmsxh.20131226100304.3697"><vh>imageaxupload</vh></v>
<v t="cmsxh.20131226100304.3698"><vh>file_selector (#4)</vh></v>
<v t="cmsxh.20131226100304.3699"><vh>download_list</vh></v>
<v t="2014spring.20140530082747.2192"><vh>image_list</vh></v>
<v t="2014pythonE.20140321113009.1824"><vh>load_list</vh></v>
<v t="cmsxh.20131226100304.5427"><vh>delete_file</vh></v>
<v t="2014spring.20140530082747.2196"><vh>image_delete_file</vh></v>
<v t="cmsxh.20131226100304.5428"><vh>doDelete</vh></v>
<v t="2014spring.20140530082747.2198"><vh>image_doDelete</vh></v>
<v t="cmsxh.20131226100304.3700"><vh>creo_getvolume</vh></v>
<v t="cmsxh.20131226100304.3701"><vh>anglebracket</vh></v>
<v t="cmsxh.20131226100304.3702"><vh>search_form</vh></v>
<v t="cmsxh.20131226100304.3703"><vh>doSearch</vh></v>
<v t="cmsxh.20131226100304.3704"><vh>set_css</vh></v>
<v t="cmsxh.20131226100304.3705"><vh>edit_config</vh></v>
<v t="cmsxh.20131226100304.3706"><vh>saveConfig</vh></v>
<v t="cmsxh.20131226100304.3707"><vh>listdir</vh></v>
<v t="cmsxh.20131226100304.3708"><vh>sitemap</vh></v>
<v t="2014fall.20141219135032.2098"><vh>brython</vh></v>
<v t="amd.20150710140449.1"><vh>brythonw</vh></v>
<v t="2014pythonE.20140415145042.1959"><vh>calc</vh></v>
<v t="2014pythonE.20140418074836.2073"><vh>openjscad</vh></v>
<v t="2014pythonE.20140329072748.2053"><vh>ucrobot</vh></v>
</v>
<v t="cmsxh.20131226100304.3709" a="E"><vh>class Download</vh>
<v t="cmsxh.20131226100304.3710"><vh>index</vh></v>
</v>
</v>
<v t="cmsxh.20131226100304.3820" a="E"><vh>@path static</vh>
<v t="cmsxh.20131226100304.3821"><vh>@edit cmsimply.css</vh></v>
<v t="cmsxh.20131226100304.3822"><vh>@edit axuploader.js</vh></v>
<v t="2014pythonE.20140312215910.1786"><vh>@edit console.css</vh></v>
<v t="2014pythonE.20140312215910.1787"><vh>@edit brython.css</vh></v>
<v t="2014pythonE.20140312215910.1788"><vh>@edit editor.py</vh></v>
<v t="amd.20160623153816.1" a="E"><vh>@path tinymce4/inits</vh>
<v t="amd.20160623153816.2"><vh>@edit init_narrow.js</vh></v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="2014fall.20141219135032.2098">@cherrypy.expose
def brython(self, item_per_page=5, page=1, keyword=None, filename=None, *args, **kwargs):
    part1 =  '''
&lt;!DOCTYPE html&gt; 
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;link rel="stylesheet" type="text/css" href="/static/console.css"&gt;
&lt;link rel="stylesheet" type="text/css" href="/static/brython.css"&gt;
&lt;script type="text/javascript" src="/static/Brython3.2.0-20150701-214155/brython.js"&gt;&lt;/script&gt;
&lt;script src="https://togetherjs.com/togetherjs-min.js"&gt;&lt;/script&gt;

&lt;script src="/static/ace/ace.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;script src="/static/ace/ext-language_tools.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;script src="/static/ace/mode-python3.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;script src="/static/ace/snippets/python.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="/static/Cango2D.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/yen_fourbar.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/gearUtils-04.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/jsc3d.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/stlviewer.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/threejs/three.min.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/threejs/Coordinates.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/threejs/dat.gui.min.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/threejs/Detector.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/threejs/OrbitAndPanControls.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script type="text/javascript" &gt;
function getradio(tagname){
var radios = document.getElementsByName(tagname);
for (var i = 0, length = radios.length; i &lt; length; i++) {
    if (radios[i].checked) {
        // do whatever you want with the checked radio
        return radios[i].value;
        // only one radio can be logically checked, don't check the rest
        break;
      }
   }
}

function run_js(){
    var cons = document.getElementById("console")
    var jscode = cons.value
    var t0 = (new Date()).getTime()
    eval(jscode)
    var t1 = (new Date()).getTime()
    console.log("Javascript code run in "+(t1-t0)+" ms")
}
&lt;/script&gt;
&lt;script type="text/python3" src="/static/editor.py"&gt;&lt;/script&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
from browser import window
import editor


overwrite = 0
# add delete_program 1/7, seven steps to complete the ajax task, the last step is to add delete_program function on server
# delete1 and delete2 parameters are also added into save_program function.
delete1 = 0
delete2 = 0

def set_debug(ev):
    if ev.target.checked:
        __BRYTHON__.debug = 1
    else:
        __BRYTHON__.debug = 0
        
def set_overwrite(ev):
    global overwrite
    if ev.target.checked:
        overwrite = 1
    else:
        overwrite = 0

# add delete_program 2/7, client side add set_delete1 and set_delete2 functions.
def set_delete1(ev):
    global delete1
    if ev.target.checked:
        delete1 = 1
    else:
        delete1 = 0

def set_delete2(ev):
    global delete2
    if ev.target.checked:
        delete2 = 1
    else:
        delete2 = 0

#### ajax process
from browser import ajax,doc

def on_complete(req):
    print(req.readyState)
    print('status',req.status)
    if req.status==200 or req.status==0:
        # show request text on id=result division
        doc["result"].html = req.text
    else:
        doc["result"].html = "error "+req.text

def err_msg():
    doc["result"].html = "server didn't reply after %s seconds" %timeout

timeout = 4

def go(url):
    req = ajax.ajax()
    req.bind('complete', on_complete)
    req.set_timeout(timeout, err_msg)
    req.open('GET', url, True)
    req.send()

def post(url):
    req = ajax.ajax()
    req.bind('complete', on_complete)
    req.set_timeout(timeout, err_msg)
    req.open('POST', url, True)
    req.set_header('content-type','application/x-www-form-urlencoded')
    # doc["filename"].value is the id=filename input field's value
    # editor.getValue() is the content on editor, need to send dictionary format data
    # while post url, need to save editor content into local_storage to use the previous load javascripts
    storage["py_src"] = editor.getValue()
    # add delete_program 3/7, two parameters added, this will also affect save_program function on server.
    req.send({'filename':doc["filename"].value, 'editor':editor.getValue(), 'overwrite':overwrite, 'delete1':delete1, 'delete2':delete2})
    
# get program from server
def get_prog(ev):
    # ajax can only read data from server
    _name = '/brython_programs/'+doc["filename"].value
    try:
        editor.setValue(open(_name, encoding="utf-8").read())
        doc["result"].html = doc["filename"].value+" loaded!"
    except:
        doc["result"].html = "can not get "+doc["filename"].value+"!"
    editor.scrollToRow(0)
    editor.gotoLine(0)
    reset_theme()
    
def get_radio(ev):
    filename = window.getradio("filename")
    # ajax can only read data from server
    doc["filename"].value = filename
    _name = '/brython_programs/'+filename
    editor.setValue(open(_name, encoding="utf-8").read())
    doc["result"].html = filename+" loaded!"
    editor.scrollToRow(0)
    editor.gotoLine(0)
    reset_theme()
    
# bindings
doc['run_js'].bind('click', window.run_js)
doc['set_debug'].bind('change',set_debug)
'''
    adm1 = '''
doc['set_overwrite'].bind('change',set_overwrite)
# add delete_program 4/7, two associated binds added
doc['set_delete1'].bind('change',set_delete1)
doc['set_delete2'].bind('change',set_delete2)
'''
    part2 = '''
# next functions are defined in editor.py
doc['show_js'].bind('click',editor.show_js)
doc['run'].bind('click',editor.run)
doc['show_console'].bind('click',editor.show_console)
# get_prog and get _radio (working)
doc['get_prog'].bind('click', get_prog)
doc['get_radio'].bind('click', get_radio)
# reset_the_src and clear_console (working)
doc['reset_the_src'].bind('click',editor.reset_the_src)
doc['clear_console'].bind('click',editor.clear_console)
# clear_canvas and clear_src
doc['clear_canvas'].bind('click',editor.clear_canvas)
doc['clear_src'].bind('click',editor.clear_src)
# only admin can save program to server
'''
    adm2 = '''
doc['save_program'].bind('click',lambda ev:post('save_program'))
# add delete_program 5/7, delete_program button bind to execute delete_program on server.
doc['delete_program'].bind('click',lambda ev:post('delete_program'))
'''
    # if load program through url
    if filename != None:
        load_program = '''
_name = '/brython_programs/'''+filename+''''
try:
    editor.setValue(open(_name, encoding="utf-8").read())
    doc["filename"].value = "'''+filename+'''"
    doc["result"].html = "'''+filename+''' loaded!"
except:
    doc["result"].html = "can not get '''+filename+'''!"
editor.scrollToRow(0)
editor.gotoLine(0)
reset_theme()
'''
    else:
        load_program = ""

    part3 = '''
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython({debug:1, cache:'version'})"&gt;
&lt;table id="banner" cellpadding=0 cellspacing=0&gt;
&lt;tr id="banner_row"&gt;
&lt;td style="width:80px"&gt;&lt;/td&gt;
&lt;td class="alnleft"&gt;
'''
    part4 = '''
&lt;/td&gt;
&lt;td class="alnleft"&gt;
            &lt;button id="reset_the_src"&gt;reset the_src&lt;/button&gt;
            &lt;button id="clear_src"&gt;clear src&lt;/button&gt;
            &lt;button id="clear_console"&gt;clear console&lt;/button&gt;
            &lt;button id="clear_canvas"&gt;clear canvas&lt;/button&gt;
            &lt;button onclick="TogetherJS(this); return false;"&gt;Start TogetherJS&lt;/button&gt;
            &lt;br /&gt;filename: &lt;input id="filename"&gt;
'''
    adm3 = '''
            &lt;button id="save_program"&gt;save program&lt;/button&gt;
            overwrite&lt;input type="checkbox" id="set_overwrite"&gt;
            &lt;br /&gt;&lt;!-- add delete_program button and two double checkboxs 6/7 --&gt;
            &lt;button id="delete_program"&gt;delete program&lt;/button&gt;
            sure to delete1&lt;input type="checkbox" id="set_delete1"&gt;
            sure to delete2&lt;input type="checkbox" id="set_delete2"&gt;
'''
    part5 = '''
            &lt;div id="result"&gt;(empty)&lt;/div&gt;
            &lt;button id="get_radio"&gt;load selected program&lt;/button&gt;
            &lt;button onClick="window.location.reload()"&gt;reload page&lt;/button&gt;
            &lt;button id="get_prog"&gt;get prog file&lt;/button&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;!--
&lt;div style="text-align:center"&gt;
&lt;br&gt;Brython version: &lt;span id="version"&gt;&lt;/span&gt;
&lt;/div&gt;
--&gt;
&lt;div id="container"&gt;
    &lt;div id="left-div"&gt;
    &lt;div style="padding: 3px 3px 3px 3px;"&gt;
    
      &lt;div style="float:center"&gt;
        &lt;button id="show_console"&gt;Console&lt;/button&gt;
        &lt;button id="show_js"&gt;Javascript&lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div style="width:100%;height:100%;"&gt;
    &lt;textarea id="console"&gt;&lt;/textarea&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div id="right-div"&gt;
    &lt;div style="padding: 3px 3px 3px 3px;"&gt;
        &lt;div style="float:left"&gt;
        &lt;button id="run"&gt;run&lt;/button&gt;
        &lt;button id="run_js"&gt;run Javascript&lt;/button&gt;
        debug&lt;input type="checkbox" id="set_debug" checked&gt;
        &lt;/div&gt;
    Theme: &lt;select id="ace_theme"&gt;
    &lt;optgroup label="Bright"&gt;
    &lt;option value="ace/theme/chrome"&gt;Chrome&lt;/option&gt;
    &lt;option value="ace/theme/crimson_editor"&gt;Crimson Editor&lt;/option&gt;
    &lt;option value="ace/theme/eclipse"&gt;Eclipse&lt;/option&gt;
    &lt;option value="ace/theme/github"&gt;GitHub&lt;/option&gt;
    &lt;/optgroup&gt;
    &lt;optgroup label="Dark"&gt;
    &lt;option value="ace/theme/cobalt"&gt;Cobalt&lt;/option&gt;
    &lt;option value="ace/theme/idle_fingers"&gt;idleFingers&lt;/option&gt;
    &lt;option value="ace/theme/monokai"&gt;Monokai&lt;/option&gt;
    &lt;option value="ace/theme/pastel_on_dark"&gt;Pastel on dark&lt;/option&gt;
    &lt;option value="ace/theme/vibrant_ink"&gt;Vibrant Ink&lt;/option&gt;
    &lt;/optgroup&gt;
    &lt;/select&gt; 
    &lt;/div&gt;
      &lt;div id="editor"&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div style="float:left;margin-top:50px;"&gt;
&lt;canvas id="plotarea" width="800" height="600"&gt;&lt;/canvas&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
'''
    if not self.isAdmin():
        return part1+part2+load_program+part3+self.load_list(item_per_page, page, "brython", keyword)+part4+part5
    else:
        return part1+adm1+part2+adm2+load_program+part3+self.load_list(item_per_page, page, "brython", keyword)+part4+adm3+part5
</t>
<t tx="2014pythonE.20140313091306.1898">&lt;div id="result"&gt;(empty)&lt;/div&gt;
&lt;button id="get_text"&gt;get text file&lt;/button&gt;
&lt;button id="i_dont_exist"&gt;file not found&lt;/button&gt;
&lt;button id="get_test"&gt;GET request&lt;/button&gt;
&lt;button id="post_test"&gt;POST request&lt;/button&gt;
&lt;button id="timeout"&gt;timeout&lt;/button&gt;

&lt;script id="ascript" type="text/python"&gt;
from browser import ajax,doc

def on_complete(req):
    print(req.readyState)
    print('status',req.status)
    if req.status==200 or req.status==0:
        doc["result"].html = req.text
    else:
        doc["result"].html = "error "+req.text

def err_msg():
    doc["result"].html = "server didn't reply after %s seconds" %timeout

timeout = 4

def go(url):
    req = ajax.ajax()
    req.bind('complete',on_complete)
    req.set_timeout(timeout,err_msg)
    req.open('GET',url,True)
    req.send()

def post(url):
    req = ajax.ajax()
    req.bind('complete',on_complete)
    req.set_timeout(timeout,err_msg)
    req.open('POST',url,True)
    req.set_header('content-type','application/x-www-form-urlencoded')
    req.send({'foo':34})

# bindings
doc['get_text'].bind('click',lambda ev:go('ajax_data.txt'))
doc['i_dont_exist'].bind('click',lambda ev:go('i_dont_exist.txt'))
doc['get_test'].bind('click',lambda ev:go('/cgi-bin/get_test.py'))
doc['post_test'].bind('click',lambda ev:post('/cgi-bin/post_test.py'))
doc['timeout'].bind('click',lambda ev:go('/cgi-bin/timeout.py'))
&lt;/script&gt;</t>
<t tx="2014pythonE.20140321113009.1824">@cherrypy.expose
def load_list(self, item_per_page=5, page=1, filedir=None, keyword=None, *args, **kwargs):
    '''
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    '''
    # cherrypy.session['admin'] = 1
    # cherrypy.session.get('admin')
    files = os.listdir(data_dir+filedir+"_programs/")
    if keyword == None:
        pass
    else:
        cherrypy.session['search_keyword'] = keyword
        files = [s for s in files if keyword in s]
    total_rows = len(files)
    totalpage = math.ceil(total_rows/int(item_per_page))
    starti = int(item_per_page) * (int(page) - 1) + 1
    endi = starti + int(item_per_page) - 1
    outstring = '''&lt;script&gt;
function keywordSearch(){
    var oform = document.forms["searchform"];
    // 取elements集合中 name 屬性為 keyword 的值
    var getKeyword = oform.elements.keyword.value;
    // 改為若表單為空, 則列出全部資料
    //if(getKeyword != ""){
        window.location = "?brython&amp;keyword="+getKeyword;
    //}
}
&lt;/script&gt;
    &lt;form name="searchform"&gt;
    &lt;input type="text" id="keyword" /&gt;
    &lt;input type="button" id="send" value="查詢" onClick="keywordSearch()"/&gt; 
    &lt;/form&gt;
'''
    outstring += "&lt;form name='filelist' method='post' action=''&gt;"
    notlast = False
    if total_rows &gt; 0:
        # turn off the page selector on top
        '''
        outstring += "&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "brython?&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;{{&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "brython?&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
            if index&gt;= 0 and index&lt; totalpage:
                page_now = index + 1 
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "brython?&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "

        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "brython?&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "brython?&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;}}&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        '''
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
            outstring += loadlist_access_list(files, starti, endi, filedir)+"&lt;br /&gt;"
        else:
            outstring += "&lt;br /&gt;&lt;br /&gt;"
            outstring += loadlist_access_list(files, starti, total_rows, filedir)+"&lt;br /&gt;"
        
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "/"+filedir+"?&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;{{&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "/"+filedir+"?&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 5
        for index in range(int(page)-span, int(page)+span):
        #for ($j=$page-$range;$j&lt;$page+$range;$j++)
            if index &gt;=0 and index &lt; totalpage:
                page_now = index + 1
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "/"+filedir+"?&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "
        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "/"+filedir+"?&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "/"+filedir+"?&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;}}&lt;/a&gt;"
    else:
        outstring += "no data!"
    #outstring += "&lt;br /&gt;&lt;br /&gt;&lt;input type='submit' value='load'&gt;&lt;input type='reset' value='reset'&gt;&lt;/form&gt;"
    outstring += "&lt;br /&gt;&lt;br /&gt;&lt;/form&gt;"

    return outstring
</t>
<t tx="2014pythonE.20140321113009.1825">def loadlist_access_list(files, starti, endi, filedir):
    # different extension files, associated links were provided
    # popup window to view images, video or STL files, other files can be downloaded directly
    # files are all the data to list, from starti to endi
    # add file size
    outstring = ""
    for index in range(int(starti)-1, int(endi)):
        fileName, fileExtension = os.path.splitext(files[index])
        fileExtension = fileExtension.lower()
        fileSize = sizeof_fmt(os.path.getsize(data_dir+filedir+"_programs/"+files[index]))
        # images files
        if fileExtension == ".png" or fileExtension == ".jpg" or fileExtension == ".gif":
            outstring += '&lt;input type="checkbox" name="filename" value="'+files[index]+'"&gt;&lt;a href="javascript:;" onClick="window.open(\'/downloads/'+ \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;'+files[index]+'&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'
        # stl files
        elif fileExtension == ".stl":
            outstring += '&lt;input type="checkbox" name="filename" value="'+files[index]+'"&gt;&lt;a href="javascript:;" onClick="window.open(\'/static/viewstl.html?src=/downloads/'+ \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;'+files[index]+'&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'
        # flv files
        elif fileExtension == ".flv":
            outstring += '&lt;input type="checkbox" name="filename" value="'+files[index]+'"&gt;&lt;a href="javascript:;" onClick="window.open(\'/flvplayer?filepath=/downloads/'+ \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;'+files[index]+'&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'
        # py files
        elif fileExtension == ".py":
            outstring += '&lt;input type="radio" name="filename" value="'+files[index]+'"&gt;'+files[index]+' ('+str(fileSize)+')&lt;br /&gt;'
        # direct download files
        else:
            outstring += "&lt;input type='checkbox' name='filename' value='"+files[index]+"'&gt;&lt;a href='/"+filedir+"_programs/"+files[index]+"'&gt;"+files[index]+"&lt;/a&gt; ("+str(fileSize)+")&lt;br /&gt;"
    return outstring
</t>
<t tx="2014pythonE.20140321113009.1826">@cherrypy.expose
def save_program(self, filename=None, editor=None, overwrite=0, delete1=0, delete2=0):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    else:
        if overwrite == "1" or not os.path.isfile(data_dir+"/brython_programs/"+filename):
            # open file in wt will use Windows \r\n for new line
            # use replace method to remove extra lines for Windows environment
            with open(data_dir+"/brython_programs/"+filename, "wt", encoding="utf-8") as out_file:
                data = editor.replace("\r\n", "\n")
                out_file.write(data)
            return str(filename)+" saved!&lt;br /&gt;"
        else:  
            return str(filename)+" exists! editor content not saved yet!&lt;br /&gt;"

</t>
<t tx="2014pythonE.20140327090839.1738">@cherrypy.expose
def delete_program(self, filename=None, editor=None, overwrite=0, delete1=0, delete2=0):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    else:       
        if delete1 == "1" and delete2 == "1" and os.path.isfile(data_dir+"/brython_programs/"+filename):
            os.remove(data_dir+"/brython_programs/"+filename)
            return str(filename)+" deleted!&lt;br /&gt;"
        elif not os.path.isfile(data_dir+"/brython_programs/"+filename):
            return str(filename)+" does not exist!&lt;br /&gt;"
        else:
            return "can not delete "+str(filename)+"!"
            
</t>
<t tx="2014pythonE.20140329072748.2053">@cherrypy.expose
def ucrobot(self):
    return '''
&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
        &lt;/head&gt;
	&lt;body style="overflow:auto; margin:0; padding:0;position:relative"&gt;
		&lt;div id="container" onclick="this.focus();"&gt;&lt;/div&gt;
		&lt;div id="grading"&gt;&lt;/div&gt;
&lt;script type="text/javascript" src="/static/threejs/Detector.js"&gt;&lt;/script&gt;
		&lt;script type="text/javascript"&gt;
		if ( ! Detector.webgl ) { 
				Detector.addGetWebGLMessage();
		}
		&lt;/script&gt;
		&lt;script type="text/javascript" src="/static/threejs/three.min.js"&gt;&lt;/script&gt;
          &lt;script type="text/javascript" src="/static/threejs/Coordinates.js"&gt;&lt;/script&gt;
		&lt;script type="text/javascript" src="/static/threejs/OrbitAndPanControls.js"&gt;&lt;/script&gt;
		&lt;script type="text/javascript" src="/static/threejs/dat.gui.min.js"&gt;&lt;/script&gt;
		&lt;script type="text/javascript" src="/static/threejs/demo.js"&gt;&lt;/script&gt;

&lt;/body&gt;&lt;/html&gt;
'''
</t>
<t tx="2014pythonE.20140415145042.1959">@cherrypy.expose
def calc(self, item_per_page=5, page=1, keyword=None, filename=None, *args, **kwargs):
    part1 = '''
&lt;!DOCTYPE html&gt; 
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;script type="text/javascript" src="/static/Brython3.2.0-20150701-214155/brython.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalcconstants.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalc-3.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalctableeditor.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/formatnumber2.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/formula1.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalcpopup.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalcspreadsheetcontrol.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalcviewer.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
function getradio(tagname){
var radios = document.getElementsByName(tagname);
for (var i = 0, length = radios.length; i &lt; length; i++) {
    if (radios[i].checked) {
        // do whatever you want with the checked radio
        return radios[i].value;
        // only one radio can be logically checked, don't check the rest
        break;
      }
   }
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython({debug:1, cache:'version'})"&gt;
&lt;div id="tableeditor" style="margin:8px 0px 10px 0px;"&gt;editor goes here&lt;/div&gt;
&lt;div id="msg" onclick="this.innerHTML='&amp;nbsp;';"&gt;&lt;/div&gt;

&lt;script id="ascript" type="text/python"&gt;
from browser import ajax, document as doc, alert, websocket
from javascript import JSConstructor
from browser import window

spreadsheet =  JSConstructor(window.SocialCalc.SpreadsheetControl)()
savestr = ""
spreadsheet.InitializeSpreadsheetControl("tableeditor")
spreadsheet.ExecuteCommand('redisplay', '')

overwrite = 0
# add delete_program 1/7, seven steps to complete the ajax task, the last step is to add delete_program function on server
# delete1 and delete2 parameters are also added into save_program function.
delete1 = 0
delete2 = 0

def set_overwrite(ev):
    global overwrite
    if ev.target.checked:
        overwrite = 1
    else:
        overwrite = 0

# add delete_program 2/7, client side add set_delete1 and set_delete2 functions.
def set_delete1(ev):
    global delete1
    if ev.target.checked:
        delete1 = 1
    else:
        delete1 = 0

def set_delete2(ev):
    global delete2
    if ev.target.checked:
        delete2 = 1
    else:
        delete2 = 0

def on_complete(req):
    print(req.readyState)
    print('status',req.status)
    if req.status==200 or req.status==0:
        doc["result"].html = req.text
    else:
        doc["result"].html = "error "+req.text

def err_msg():
    doc["result"].html = "server didn't reply after %s seconds" %timeout

timeout = 4

def go(url):
    req = ajax.ajax()
    req.bind('complete',on_complete)
    req.set_timeout(timeout,err_msg)
    req.open('GET',url,True)
    req.send()

def post(url):
    global spreadsheet
    sheet_content = spreadsheet.CreateSpreadsheetSave()
    req = ajax.ajax()
    req.bind('complete',on_complete)
    req.set_timeout(timeout,err_msg)
    req.open('POST',url,True)
    req.set_header('content-type','application/x-www-form-urlencoded')
    # add delete_program 3/7, two parameters added, this will also affect save_program function on server.
    req.send({'filename':doc["filename"].value, 'sheet_content':sheet_content, 'overwrite':overwrite, 'delete1':delete1, 'delete2':delete2})

def show_save(ev):
    global spreadsheet
    sheet_content = spreadsheet.CreateSpreadsheetSave()
    print(sheet_content)
    
def doreload(ev):
    global spreadsheet
    sheet_content = spreadsheet.CreateSpreadsheetSave()
    parts = spreadsheet.DecodeSpreadsheetSave(sheet_content)
    if (parts):
        if (parts.sheet):
            spreadsheet.sheet.ResetSheet()
            spreadsheet.ParseSheetSave(sheet_content[parts.sheet.start:parts.sheet.end])
        if (parts.edit):
            spreadsheet.editor.LoadEditorSettings(sheet_content[parts.edit.start:parts.edit.end])

    #if (spreadsheet.editor.context.sheetobj.attribs.recalc=="off"):
        #spreadsheet.ExecuteCommand('redisplay', '')
    #else:
    spreadsheet.ExecuteCommand('recalc', '')
    alert("reload done")

# get program from server
def get_prog(ev):
    # ajax can only read data from server
    _name = '/calc_programs/'+doc["filename"].value
    try:
        sheet_content = open(_name, encoding="utf-8").read()
        parts = spreadsheet.DecodeSpreadsheetSave(sheet_content)
        if (parts):
            if (parts.sheet):
                spreadsheet.sheet.ResetSheet()
                spreadsheet.ParseSheetSave(sheet_content[parts.sheet.start:parts.sheet.end])
            if (parts.edit):
                spreadsheet.editor.LoadEditorSettings(sheet_content[parts.edit.start:parts.edit.end])
        spreadsheet.ExecuteCommand('recalc', '')
        doc["result"].html = doc["filename"].value+" loaded!"
    except:
        doc["result"].html = "can not get "+doc["filename"].value+"!"

def get_radio(ev):
    filename = window.getradio("filename")
    # ajax can only read data from server
    doc["filename"].value = filename
    _name = '/calc_programs/'+filename
    try:
        sheet_content = open(_name, encoding="utf-8").read()
        parts = spreadsheet.DecodeSpreadsheetSave(sheet_content)
        if (parts):
            if (parts.sheet):
                spreadsheet.sheet.ResetSheet()
                spreadsheet.ParseSheetSave(sheet_content[parts.sheet.start:parts.sheet.end])
            if (parts.edit):
                spreadsheet.editor.LoadEditorSettings(sheet_content[parts.edit.start:parts.edit.end])
        spreadsheet.ExecuteCommand('recalc', '')
        doc["result"].html = doc["filename"].value+" loaded!"
    except:
        doc["result"].html = "can not get "+doc["filename"].value+"!"

# bindings
doc['get_prog'].bind('click', get_prog)
doc['get_radio'].bind('click', get_radio)
doc['doreload'].bind('click', doreload)
'''
    adm1 = '''
doc['save_program'].bind('click',lambda ev:post('save_calcprogram'))
# add delete_program 5/7, delete_program button bind to execute delete_program on server.
doc['delete_program'].bind('click',lambda ev:post('delete_calcprogram'))
doc['show_save'].bind('click', show_save)
doc['set_overwrite'].bind('change',set_overwrite)
# add delete_program 4/7, two associated binds added
doc['set_delete1'].bind('change',set_delete1)
doc['set_delete2'].bind('change',set_delete2)
'''
    # if load program through url
    if filename != None:
        load_program = '''
# ajax can only read data from server
_name = '/calc_programs/'''+filename+''''
try:
    sheet_content = open(_name, encoding="utf-8").read()
    parts = spreadsheet.DecodeSpreadsheetSave(sheet_content)
    if (parts):
        if (parts.sheet):
            spreadsheet.sheet.ResetSheet()
            spreadsheet.ParseSheetSave(sheet_content[parts.sheet.start:parts.sheet.end])
        if (parts.edit):
            spreadsheet.editor.LoadEditorSettings(sheet_content[parts.edit.start:parts.edit.end])
    spreadsheet.ExecuteCommand('recalc', '')
    doc["filename"].value = "'''+filename+'''"
    doc["result"].html = "'''+filename+''' loaded!"
except:
    doc["result"].html = "can not get '''+filename+'''!"
'''
    else:
        load_program = ""

    part2 = '''
&lt;/script&gt;
filename: &lt;input id="filename"&gt;
&lt;button id="get_prog"&gt;get prog file&lt;/button&gt;&lt;br /&gt;
&lt;div id="result"&gt;(empty)&lt;/div&gt;&lt;br /&gt;
&lt;button id="doreload"&gt;do reload&lt;/button&gt;
&lt;button id="get_radio"&gt;load selected program&lt;/button&gt;&lt;br /&gt;
'''
    adm2 = '''
&lt;button id="show_save"&gt;顯示內容&lt;/button&gt;
&lt;button id="save_program";&gt;save program&lt;/button&gt;
overwrite&lt;input type="checkbox" id="set_overwrite"&gt;
&lt;br /&gt;&lt;!-- add delete_program button and two double checkboxs 6/7 --&gt;
&lt;button id="delete_program"&gt;delete program&lt;/button&gt;
sure to delete1&lt;input type="checkbox" id="set_delete1"&gt;
sure to delete2&lt;input type="checkbox" id="set_delete2"&gt;&lt;br /&gt;
'''
    part3 = '''
&lt;/body&gt;
&lt;/html&gt;
'''
    # only admin can view and edit calc, we still need to find a way to protect programs on calc_programs
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
        # for not admin
        #return part1+load_program+part2+self.load_list(item_per_page, page, "calc")+part3
    else:
        # for admin
        return part1+adm1+load_program+part2+adm2+self.load_list(item_per_page, page, "calc")+part3

</t>
<t tx="2014pythonE.20140415145042.1961">@cherrypy.expose
def save_calcprogram(self, filename=None, sheet_content=None, overwrite=0, delete1=0, delete2=0):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    else:
        if overwrite == "1" or not os.path.isfile(data_dir+"/calc_programs/"+filename):
            # open file in wt will use Windows \r\n for new line
            # use replace method to remove extra lines for Windows environment
            with open(data_dir+"/calc_programs/"+filename, "wt", encoding="utf-8") as out_file:
                data = sheet_content.replace("\r\n", "\n")
                out_file.write(data)
            return str(filename)+" saved!&lt;br /&gt;"
        else:  
            return str(filename)+" exists! editor content not saved yet!&lt;br /&gt;"

 





</t>
<t tx="2014pythonE.20140416133807.1743">@cherrypy.expose
def delete_calcprogram(self, filename=None, sheet_content=None, overwrite=0, delete1=0, delete2=0):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    else:       
        if delete1 == "1" and delete2 == "1" and os.path.isfile(data_dir+"/calc_programs/"+filename):
            os.remove(data_dir+"/calc_programs/"+filename)
            return str(filename)+" deleted!&lt;br /&gt;"
        elif not os.path.isfile(data_dir+"/calc_programs/"+filename):
            return str(filename)+" does not exist!&lt;br /&gt;"
        else:
            return "can not delete "+str(filename)+"!"
            
</t>
<t tx="2014pythonE.20140418074836.2073">@cherrypy.expose
def openjscad(self, *args, **kwargs):
    return '''
&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"/&gt;
&lt;title&gt;OpenJSCAD.org&lt;/title&gt;
&lt;link rel="stylesheet" href="/jquery/themes/base/jquery-ui.css" /&gt;
&lt;script src="/jquery/jquery-1.9.1.js"&gt;&lt;/script&gt;
&lt;script src="/jquery/jquery-ui.js"&gt;&lt;/script&gt;
&lt;script src="/jquery/jquery.hammer.js"&gt;&lt;/script&gt;
&lt;link rel="stylesheet" href="/style.css" type="text/css"&gt;
&lt;link rel="stylesheet" href="/openjscad.css" type="text/css"&gt;
&lt;/head&gt;
&lt;body onload="onload()"&gt;
&lt;style&gt;
/* we choose chrome theme for ace, and make sure line number is transparent too */
/* this has to stay in the body (not head) otherwise does not take effect */
.ace-chrome .ace_gutter { 
   border-left: 2px dashed rgba(200,200,200,0.2);
   background: none;
}
.ace-chrome {
   font-size: 10pt;     // -- not 'px', but 'pt' for high dpi screens
}
&lt;/style&gt;
&lt;script src="/lightgl.js"&gt;&lt;/script&gt;
&lt;script src="/csg.js"&gt;&lt;/script&gt;
&lt;script src="/openjscad.js"&gt;&lt;/script&gt;
&lt;script src="/openscad.js"&gt;&lt;/script&gt;
&lt;script src="/underscore.js"&gt;&lt;/script&gt;
&lt;script src="/openscad-openjscad-translator.js"&gt;&lt;/script&gt;
&lt;script lang=JavaScript&gt;
var version = '0.017 (2014/02/14)';
var me = document.location.toString().match(/^file:/)?'web-offline':'web-online'; // me: {cli, web-offline, web-online}
var browser = 'unknown';
if(navigator.userAgent.match(/(opera|chrome|safari|firefox|msie)/i))
   browser = RegExp.$1.toLowerCase();

$(document).ready(function() {
   $("#viewer").height($(window).height());

   $(window).resize(function() {                // adjust the relevant divs
      $("#viewer").width($(window).width());
      $("#viewer").height($(window).height());
   });


});   
&lt;/script&gt;
&lt;div id="editor"&gt;// -- OpenJSCAD.org logo
function main(params)
{
  // Main entry point; here we construct our solid: 
  var gear = involuteGear(
    params.numTeeth,
    params.circularPitch,
    params.pressureAngle,
    params.clearance,
    params.thickness
  );
  if(params.centerholeradius &gt; 0)
  {
    var centerhole = CSG.cylinder({start: [0,0,-params.thickness], end: [0,0,params.thickness], radius: params.centerholeradius, resolution: 16});
    gear = gear.subtract(centerhole);
  }
  return gear;
}

// Here we define the user editable parameters: 
function getParameterDefinitions() {
  return [
    { name: 'numTeeth', caption: 'Number of teeth:', type: 'int', default: 15 },
    { name: 'circularPitch', caption: 'Circular pitch:', type: 'float', default: 10 },
    { name: 'pressureAngle', caption: 'Pressure angle:', type: 'float', default: 20 },
    { name: 'clearance', caption: 'Clearance:', type: 'float', default: 0 },
    { name: 'thickness', caption: 'Thickness:', type: 'float', default: 5 },
    { name: 'centerholeradius', caption: 'Radius of center hole (0 for no hole):', type: 'float', default: 2 },
  ];
}

/*
  For gear terminology see: 
    http://www.astronomiainumbria.org/advanced_internet_files/meccanica/easyweb.easynet.co.uk/_chrish/geardata.htm
  Algorithm based on:
    http://www.cartertools.com/involute.html

  circularPitch: The distance between adjacent teeth measured at the pitch circle
*/ 
function involuteGear(numTeeth, circularPitch, pressureAngle, clearance, thickness)
{
  // default values:
  if(arguments.length &lt; 3) pressureAngle = 20;
  if(arguments.length &lt; 4) clearance = 0;
  if(arguments.length &lt; 4) thickness = 1;
  
  var addendum = circularPitch / Math.PI;
  var dedendum = addendum + clearance;
  
  // radiuses of the 4 circles:
  var pitchRadius = numTeeth * circularPitch / (2 * Math.PI);
  var baseRadius = pitchRadius * Math.cos(Math.PI * pressureAngle / 180);
  var outerRadius = pitchRadius + addendum;
  var rootRadius = pitchRadius - dedendum;

  var maxtanlength = Math.sqrt(outerRadius*outerRadius - baseRadius*baseRadius);
  var maxangle = maxtanlength / baseRadius;

  var tl_at_pitchcircle = Math.sqrt(pitchRadius*pitchRadius - baseRadius*baseRadius);
  var angle_at_pitchcircle = tl_at_pitchcircle / baseRadius;
  var diffangle = angle_at_pitchcircle - Math.atan(angle_at_pitchcircle);
  var angularToothWidthAtBase = Math.PI / numTeeth + 2*diffangle;

  // build a single 2d tooth in the 'points' array:
  var resolution = 5;
  var points = [new CSG.Vector2D(0,0)];
  for(var i = 0; i &lt;= resolution; i++)
  {
    // first side of the tooth:
    var angle = maxangle * i / resolution;
    var tanlength = angle * baseRadius;
    var radvector = CSG.Vector2D.fromAngle(angle);    
    var tanvector = radvector.normal();
    var p = radvector.times(baseRadius).plus(tanvector.times(tanlength));
    points[i+1] = p;
    
    // opposite side of the tooth:
    radvector = CSG.Vector2D.fromAngle(angularToothWidthAtBase - angle);    
    tanvector = radvector.normal().negated();
    p = radvector.times(baseRadius).plus(tanvector.times(tanlength));
    points[2 * resolution + 2 - i] = p;
  }

  // create the polygon and extrude into 3D:
  var tooth3d = new CSG.Polygon2D(points).extrude({offset: [0, 0, thickness]});

  var allteeth = new CSG();
  for(var i = 0; i &lt; numTeeth; i++)
  {
    var angle = i*360/numTeeth;
    var rotatedtooth = tooth3d.rotateZ(angle);
    allteeth = allteeth.unionForNonIntersecting(rotatedtooth);
  }

  // build the root circle:  
  points = [];
  var toothAngle = 2 * Math.PI / numTeeth;
  var toothCenterAngle = 0.5 * angularToothWidthAtBase; 
  for(var i = 0; i &lt; numTeeth; i++)
  {
    var angle = toothCenterAngle + i * toothAngle;
    var p = CSG.Vector2D.fromAngle(angle).times(rootRadius);
    points.push(p);
  }

  // create the polygon and extrude into 3D:
  var rootcircle = new CSG.Polygon2D(points).extrude({offset: [0, 0, thickness]});

  var result = rootcircle.union(allteeth);

  // center at origin:
  result = result.translate([0, 0, -thickness/2]);

  return result;
}
&lt;/div&gt;

&lt;div oncontextmenu="return false;" id="viewer"&gt;&lt;/div&gt; &lt;!-- avoiding popup when right mouse is clicked --&gt;

&lt;div id="parametersdiv"&gt;&lt;/div&gt;
&lt;div id="tail"&gt;
&lt;div id="statusdiv"&gt;&lt;/div&gt;
&lt;div id="errordiv"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;!--&lt;script src="https://d1n0x3qji82z53.cloudfront.net/src-min-noconflict/ace.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;--&gt;
&lt;script src="https://d1n0x3qji82z53.cloudfront.net/src-min-noconflict/ace.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;script&gt;
var gProcessor = null;
var editor = null;
var _includePath = "/";

function onload() {
   // -- http://ace.ajax.org/#nav=howto
   editor = ace.edit("editor");
   editor.setTheme("ace/theme/chrome");
   //document.getElementById('ace_gutter').style.background = 'none';
   editor.getSession().setMode("ace/mode/javascript");
   editor.getSession().on('change', function(e) {});               
   ['Shift-Return'].forEach(function(key) {
      editor.commands.addCommand({
         name: 'myCommand',
         bindKey: { win: key, mac: key },
         exec: function(editor) {
            var src = editor.getValue();
            if(src.match(/^\/\/\!OpenSCAD/i)) {
               editor.getSession().setMode("ace/mode/scad");
               src = openscadOpenJscadParser.parse(src);
            } else {
               editor.getSession().setMode("ace/mode/javascript");
            }
            gMemFs = [];
            gProcessor.setJsCad(src);
         },
      });
   });
   
   gProcessor = new OpenJsCad.Processor(document.getElementById("viewer"));

   //gProcessor.setDebugging(debugging); 
   if(me=='web-online') {    // we are online, fetch first example
      gProcessor.setJsCad(editor.getValue());
   }
}

// Show all exceptions to the user:
OpenJsCad.AlertUserOfUncaughtExceptions();
&lt;/script&gt;
&lt;/body&gt;&lt;/html&gt; 
'''
</t>
<t tx="2014pythonE.20140424170033.3316">def unique(items):
    found = set([])
    keep = []
    count = {}
    for item in items:
        if item not in found:
            count[item] = 0
            found.add(item)
            keep.append(item)
        else:
            count[item] += 1
            keep.append(str(item)+"_"+str(count[item]))
    return keep
</t>
<t tx="2014spring.20140530082747.2192">@cherrypy.expose
def image_list(self, item_per_page=5, page=1, keyword=None, *args, **kwargs):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    # cherrypy.session['admin'] = 1
    # cherrypy.session.get('admin')
    files = os.listdir(download_root_dir+"images/")
    total_rows = len(files)
    totalpage = math.ceil(total_rows/int(item_per_page))
    starti = int(item_per_page) * (int(page) - 1) + 1
    endi = starti + int(item_per_page) - 1
    outstring = "&lt;form method='post' action='image_delete_file'&gt;"
    notlast = False
    if total_rows &gt; 0:
        outstring += "&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "image_list?&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "image_list?&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
            if index&gt;= 0 and index&lt; totalpage:
                page_now = index + 1 
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "image_list?&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "

        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "image_list?&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "image_list?&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
            outstring += imagelist_access_list(files, starti, endi)+"&lt;br /&gt;"
        else:
            outstring += "&lt;br /&gt;&lt;br /&gt;"
            outstring += imagelist_access_list(files, starti, total_rows)+"&lt;br /&gt;"
        
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "image_list?&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "image_list?&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
        #for ($j=$page-$range;$j&lt;$page+$range;$j++)
            if index &gt;=0 and index &lt; totalpage:
                page_now = index + 1
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "image_list?&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "
        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "image_list?&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "image_list?&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;"
    else:
        outstring += "no data!"
    outstring += "&lt;br /&gt;&lt;br /&gt;&lt;input type='submit' value='delete'&gt;&lt;input type='reset' value='reset'&gt;&lt;/form&gt;"

    head, level, page = parse_content()
    directory = render_menu(head, level, page)

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Image List&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="2014spring.20140530082747.2194">def imagelist_access_list(files, starti, endi):
    # different extension files, associated links were provided
    # popup window to view images, video or STL files, other files can be downloaded directly
    # files are all the data to list, from starti to endi
    # add file size
    outstring = ""
    for index in range(int(starti)-1, int(endi)):
        fileName, fileExtension = os.path.splitext(files[index])
        fileExtension = fileExtension.lower()
        fileSize = sizeof_fmt(os.path.getsize(download_root_dir+"images/"+files[index]))
        # images files
        if fileExtension == ".png" or fileExtension == ".jpg" or fileExtension == ".gif":
            outstring += '&lt;input type="checkbox" name="filename" value="'+files[index]+'"&gt;&lt;a href="javascript:;" onClick="window.open(\'/images/'+ \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;'+files[index]+'&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'

    return outstring
</t>
<t tx="2014spring.20140530082747.2196">@cherrypy.expose
def image_delete_file(self, filename=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    if filename == None:
        outstring = "no file selected!"
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Delete Error&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
    outstring = "delete all these files?&lt;br /&gt;&lt;br /&gt;"
    outstring += "&lt;form method='post' action='image_doDelete'&gt;"
    # only one file is selected
    if isinstance(filename, str):
        outstring += filename+"&lt;input type='hidden' name='filename' value='"+filename+"'&gt;&lt;br /&gt;"
    else:
        # multiple files selected
        for index in range(len(filename)):
            outstring += filename[index]+"&lt;input type='hidden' name='filename' value='"+filename[index]+"'&gt;&lt;br /&gt;"
    outstring += "&lt;br /&gt;&lt;input type='submit' value='delete'&gt;&lt;/form&gt;"

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Download List&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="2014spring.20140530082747.2198">@cherrypy.expose
def image_doDelete(self, filename=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    # delete files
    outstring = "all these files will be deleted:&lt;br /&gt;&lt;br /&gt;"
    # only select one file
    if isinstance(filename, str):
        try:
            os.remove(download_root_dir+"images/"+filename)
            outstring += filename+" deleted!"
        except:
            outstring += filename+"Error, can not delete files!&lt;br /&gt;"
    else:
        # multiple files selected
        for index in range(len(filename)):
            try:
                os.remove(download_root_dir+"images/"+filename[index])
                outstring += filename[index]+" deleted!&lt;br /&gt;"
            except:
                outstring += filename[index]+"Error, can not delete files!&lt;br /&gt;"

    head, level, page = parse_content()
    directory = render_menu(head, level, page)

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Image List&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="amd.20150710140449.1">@cherrypy.expose
# 採用 codemirror.js 當作 editor
def brythonw(self, item_per_page=5, page=1, keyword=None, filename=None, *args, **kwargs):
    part1 =  '''
&lt;!DOCTYPE html&gt; 
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;link rel="stylesheet" type="text/css" href="/static/console.css"&gt;
&lt;link rel="stylesheet" type="text/css" href="/static/brython.css"&gt;
&lt;link rel="stylesheet" type="text/css" href="/static/codemirror/codemirror.css"&gt;
&lt;script type="text/javascript" src="/static/Brython3.2.0-20150701-214155/brython.js"&gt;&lt;/script&gt;
&lt;script src="https://togetherjs.com/togetherjs-min.js"&gt;&lt;/script&gt;

&lt;script src="/static/codemirror/codemirror.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="/static/Cango2D.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/yen_fourbar.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/gearUtils-04.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/jsc3d.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/stlviewer.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/threejs/three.min.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/threejs/Coordinates.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/threejs/dat.gui.min.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/threejs/Detector.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/threejs/OrbitAndPanControls.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script type="text/javascript" &gt;
function getradio(tagname){
var radios = document.getElementsByName(tagname);
for (var i = 0, length = radios.length; i &lt; length; i++) {
    if (radios[i].checked) {
        // do whatever you want with the checked radio
        return radios[i].value;
        // only one radio can be logically checked, don't check the rest
        break;
      }
   }
}

function run_js(){
    var cons = document.getElementById("console")
    var jscode = cons.value
    var t0 = (new Date()).getTime()
    eval(jscode)
    var t1 = (new Date()).getTime()
    console.log("Javascript code run in "+(t1-t0)+" ms")
}
&lt;/script&gt;
&lt;script type="text/python3" src="/static/editor.py"&gt;&lt;/script&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
from browser import window
import editor


overwrite = 0
# add delete_program 1/7, seven steps to complete the ajax task, the last step is to add delete_program function on server
# delete1 and delete2 parameters are also added into save_program function.
delete1 = 0
delete2 = 0

def set_debug(ev):
    if ev.target.checked:
        __BRYTHON__.debug = 1
    else:
        __BRYTHON__.debug = 0
        
def set_overwrite(ev):
    global overwrite
    if ev.target.checked:
        overwrite = 1
    else:
        overwrite = 0

# add delete_program 2/7, client side add set_delete1 and set_delete2 functions.
def set_delete1(ev):
    global delete1
    if ev.target.checked:
        delete1 = 1
    else:
        delete1 = 0

def set_delete2(ev):
    global delete2
    if ev.target.checked:
        delete2 = 1
    else:
        delete2 = 0

#### ajax process
from browser import ajax,doc

def on_complete(req):
    print(req.readyState)
    print('status',req.status)
    if req.status==200 or req.status==0:
        # show request text on id=result division
        doc["result"].html = req.text
    else:
        doc["result"].html = "error "+req.text

def err_msg():
    doc["result"].html = "server didn't reply after %s seconds" %timeout

timeout = 4

def go(url):
    req = ajax.ajax()
    req.bind('complete', on_complete)
    req.set_timeout(timeout, err_msg)
    req.open('GET', url, True)
    req.send()

def post(url):
    req = ajax.ajax()
    req.bind('complete', on_complete)
    req.set_timeout(timeout, err_msg)
    req.open('POST', url, True)
    req.set_header('content-type','application/x-www-form-urlencoded')
    # doc["filename"].value is the id=filename input field's value
    # editor.getValue() is the content on editor, need to send dictionary format data
    # while post url, need to save editor content into local_storage to use the previous load javascripts
    storage["py_src"] = editor.getValue()
    # add delete_program 3/7, two parameters added, this will also affect save_program function on server.
    req.send({'filename':doc["filename"].value, 'editor':editor.getValue(), 'overwrite':overwrite, 'delete1':delete1, 'delete2':delete2})
    
# get program from server
def get_prog(ev):
    # ajax can only read data from server
    _name = '/brython_programs/'+doc["filename"].value
    try:
        editor.setValue(open(_name, encoding="utf-8").read())
        doc["result"].html = doc["filename"].value+" loaded!"
    except:
        doc["result"].html = "can not get "+doc["filename"].value+"!"
    editor.scrollToRow(0)
    editor.gotoLine(0)
    reset_theme()
    
def get_radio(ev):
    filename = window.getradio("filename")
    # ajax can only read data from server
    doc["filename"].value = filename
    _name = '/brython_programs/'+filename
    editor.setValue(open(_name, encoding="utf-8").read())
    doc["result"].html = filename+" loaded!"
    editor.scrollToRow(0)
    editor.gotoLine(0)
    reset_theme()
    
# bindings
doc['run_js'].bind('click', window.run_js)
doc['set_debug'].bind('change',set_debug)
'''
    adm1 = '''
doc['set_overwrite'].bind('change',set_overwrite)
# add delete_program 4/7, two associated binds added
doc['set_delete1'].bind('change',set_delete1)
doc['set_delete2'].bind('change',set_delete2)
'''
    part2 = '''
# next functions are defined in editor.py
doc['show_js'].bind('click',editor.show_js)
doc['run'].bind('click',editor.run)
doc['show_console'].bind('click',editor.show_console)
# get_prog and get _radio (working)
doc['get_prog'].bind('click', get_prog)
doc['get_radio'].bind('click', get_radio)
# reset_the_src and clear_console (working)
doc['reset_the_src'].bind('click',editor.reset_the_src)
doc['clear_console'].bind('click',editor.clear_console)
# clear_canvas and clear_src
doc['clear_canvas'].bind('click',editor.clear_canvas)
doc['clear_src'].bind('click',editor.clear_src)
# only admin can save program to server
'''
    adm2 = '''
doc['save_program'].bind('click',lambda ev:post('save_program'))
# add delete_program 5/7, delete_program button bind to execute delete_program on server.
doc['delete_program'].bind('click',lambda ev:post('delete_program'))
'''
    # if load program through url
    if filename != None:
        load_program = '''
_name = '/brython_programs/'''+filename+''''
try:
    editor.setValue(open(_name, encoding="utf-8").read())
    doc["filename"].value = "'''+filename+'''"
    doc["result"].html = "'''+filename+''' loaded!"
except:
    doc["result"].html = "can not get '''+filename+'''!"
editor.scrollToRow(0)
editor.gotoLine(0)
reset_theme()
'''
    else:
        load_program = ""

    part3 = '''
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython({debug:1, cache:'version'})"&gt;
&lt;table id="banner" cellpadding=0 cellspacing=0&gt;
&lt;tr id="banner_row"&gt;
&lt;td style="width:80px"&gt;&lt;/td&gt;
&lt;td class="alnleft"&gt;
'''
    part4 = '''
&lt;/td&gt;
&lt;td class="alnleft"&gt;
            &lt;button id="reset_the_src"&gt;reset the_src&lt;/button&gt;
            &lt;button id="clear_src"&gt;clear src&lt;/button&gt;
            &lt;button id="clear_console"&gt;clear console&lt;/button&gt;
            &lt;button id="clear_canvas"&gt;clear canvas&lt;/button&gt;
            &lt;button onclick="TogetherJS(this); return false;"&gt;Start TogetherJS&lt;/button&gt;
            &lt;br /&gt;filename: &lt;input id="filename"&gt;
'''
    adm3 = '''
            &lt;button id="save_program"&gt;save program&lt;/button&gt;
            overwrite&lt;input type="checkbox" id="set_overwrite"&gt;
            &lt;br /&gt;&lt;!-- add delete_program button and two double checkboxs 6/7 --&gt;
            &lt;button id="delete_program"&gt;delete program&lt;/button&gt;
            sure to delete1&lt;input type="checkbox" id="set_delete1"&gt;
            sure to delete2&lt;input type="checkbox" id="set_delete2"&gt;
'''
    part5 = '''
            &lt;div id="result"&gt;(empty)&lt;/div&gt;
            &lt;button id="get_radio"&gt;load selected program&lt;/button&gt;
            &lt;button onClick="window.location.reload()"&gt;reload page&lt;/button&gt;
            &lt;button id="get_prog"&gt;get prog file&lt;/button&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;!--
&lt;div style="text-align:center"&gt;
&lt;br&gt;Brython version: &lt;span id="version"&gt;&lt;/span&gt;
&lt;/div&gt;
--&gt;
&lt;div id="container"&gt;
    &lt;div id="left-div"&gt;
    &lt;div style="padding: 3px 3px 3px 3px;"&gt;
    
      &lt;div style="float:center"&gt;
        &lt;button id="show_console"&gt;Console&lt;/button&gt;
        &lt;button id="show_js"&gt;Javascript&lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div style="width:100%;height:100%;"&gt;
    &lt;textarea id="console"&gt;&lt;/textarea&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div id="right-div"&gt;
    &lt;div style="padding: 3px 3px 3px 3px;"&gt;
        &lt;div style="float:left"&gt;
        &lt;button id="run"&gt;run&lt;/button&gt;
        &lt;button id="run_js"&gt;run Javascript&lt;/button&gt;
        debug&lt;input type="checkbox" id="set_debug" checked&gt;
        &lt;/div&gt;
    Theme: &lt;select id="ace_theme"&gt;
    &lt;optgroup label="Bright"&gt;
    &lt;option value="ace/theme/chrome"&gt;Chrome&lt;/option&gt;
    &lt;option value="ace/theme/crimson_editor"&gt;Crimson Editor&lt;/option&gt;
    &lt;option value="ace/theme/eclipse"&gt;Eclipse&lt;/option&gt;
    &lt;option value="ace/theme/github"&gt;GitHub&lt;/option&gt;
    &lt;/optgroup&gt;
    &lt;optgroup label="Dark"&gt;
    &lt;option value="ace/theme/cobalt"&gt;Cobalt&lt;/option&gt;
    &lt;option value="ace/theme/idle_fingers"&gt;idleFingers&lt;/option&gt;
    &lt;option value="ace/theme/monokai"&gt;Monokai&lt;/option&gt;
    &lt;option value="ace/theme/pastel_on_dark"&gt;Pastel on dark&lt;/option&gt;
    &lt;option value="ace/theme/vibrant_ink"&gt;Vibrant Ink&lt;/option&gt;
    &lt;/optgroup&gt;
    &lt;/select&gt; 
    &lt;/div&gt;
      &lt;div id="editor"&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div style="float:left;margin-top:50px;"&gt;
&lt;canvas id="plotarea" width="800" height="600"&gt;&lt;/canvas&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
'''
    if not self.isAdmin():
        return part1+part2+load_program+part3+self.load_list(item_per_page, page, "brython", keyword)+part4+part5
    else:
        return part1+adm1+part2+adm2+load_program+part3+self.load_list(item_per_page, page, "brython", keyword)+part4+adm3+part5
</t>
<t tx="amd.20160623153816.1"></t>
<t tx="amd.20160623221635.1"></t>
<t tx="amd.20160627092305.1">使用 tinymce4 的 CMSimply4 版本</t>
<t tx="amd.20160627150746.1">https://pixabay.com/en/blog/posts/direct-image-uploads-in-tinymce-4-42/

官方 file_browser_callback

https://www.tinymce.com/docs/configure/file-image-upload/#file_browser_callback</t>
<t tx="amd.20160627155021.1">http://stackoverflow.com/questions/24900018/tinymce4-file-picker-callback-return-additional-params

I was having the same problem, and came up with the following solution:

Update your myImagePicker function to be (note the new objVals parameter to the oninsert function):
function myImagePicker(callback, value, meta) {
    tinymce.activeEditor.windowManager.open({
        title: 'Image Browser',
        url: '/media/browser/1?type=' + meta.filetype,
        width: 800,
        height: 550,
    }, {
        oninsert: function (url, objVals) {
            callback(url, objVals);
        }
    });
};

Update your mySubmit function to be (note the objVals parameter that is passed to oninsert):
function mySubmit (url, objVals) {
    top.tinymce.activeEditor.windowManager.getParams().oninsert(url, objVals);
    top.tinymce.activeEditor.windowManager.close();
    return false;
}

Update the places that you call mySubmit to fill-in the objVals object.

For example:

mySubmit("https://google.com", { text: "Go To Google", target: '_blank' });

The properties to fill-in for objVals change based on the type of calling dialog, and are (partially) documented here.

For the link dialog:

mySubmit("https://google.com", { text: "Go To Google", target: '_blank' });

For the image dialog:

mySubmit("image.jpg", { alt: "My image" });

For the mediadialog:

mySubmit("movie.mp4", {source2: 'movie-alt.ogg', poster: 'movie-image.jpg'});</t>
<t tx="amd.20160627155713.1">tinymce3 版本的 file_selector 內容:

&lt;script type="text/javascript" src="/static/tinymce3/tiny_mce/tiny_mce_popup.js"&gt;&lt;/script&gt;
&lt;script language="javascript" type="text/javascript"&gt;

var FileBrowserDialogue = {
    
    init : function () {
        // Nothing to do
    },

   
    submit : function (url) {
        var URL = url;
        var win = tinyMCEPopup.getWindowArg("window");
        var input = win.document.getElementById(tinyMCEPopup.getWindowArg("input"));
        win.document.getElementById(tinyMCEPopup.getWindowArg("input")).value = URL;

        input.value = URL;
        if (input.onchange) input.onchange();

        tinyMCEPopup.close();
    }
}

tinyMCEPopup.onInit.add(FileBrowserDialogue.init, FileBrowserDialogue);

function setLink(link){

    FileBrowserDialogue.submit(link);
    return true;
}
&lt;/script&gt;
&lt;br /&gt;&lt;font size='+1' color='red'&gt;1 &lt;/font&gt;&lt;br /&gt;&lt;br /&gt;&lt;head&gt;
&lt;style&gt;
a.xhfbfile {padding: 0 2px 0 0; line-height: 1em;}
a.xhfbfile img{border: none; margin: 6px;}
a.xhfbfile span{display: none;}
a.xhfbfile:hover span{
    display: block;
    position: relative;
    left: 150px;
    border: #aaa 1px solid;
    padding: 2px;
    background-color: #ddd;
}
a.xhfbfile:hover{
    background-color: #ccc;
    opacity: .9;
    cursor:pointer;
}
&lt;/style&gt;
&lt;/head&gt;
&lt;a class="xhfbfile" href="#" onclick='window.setLink("/download/?filepath=y:/tmp/cmsimply/wsgi//local_data//images/20183734-Bike-chain-star-Stock-Vector-bicycle.jpg",0); return false;'&gt;20183734-Bike-chain-star-Stock-Vector-bicycle.jpg&lt;span style="position: absolute; z-index: 4;"&gt;&lt;br /&gt;
        &lt;img src="/download/?filepath=y:/tmp/cmsimply/wsgi//local_data//images/20183734-Bike-chain-star-Stock-Vector-bicycle.jpg" width="150px"/&gt;&lt;/span&gt;&lt;/a&gt; (79.6 kb)&lt;br /&gt;&lt;br /&gt;&lt;font size='+1' color='red'&gt;1 &lt;/font&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href='imageuploadform'&gt;image upload&lt;/a&gt;</t>
<t tx="cmsxh.20131226100304.3660"></t>
<t tx="cmsxh.20131226100304.3661">#
# -*- coding: utf-8 -*-
'''
Copyright © 2014 Chiaming Yen

CMSimply is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

CMSimply is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with CMSimply. If not, see &lt;http://www.gnu.org/licenses/&gt;.

***********************************************************************
'''

@language python
@tabwidth -4

&lt;&lt;declarations&gt;&gt;
@others
root = CMSimply()
root.download = Download()

# setup static, images and downloads directories
application_conf = {
        '/static':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': _curdir+"/static"},
        '/images':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/images"},
        '/downloads':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/downloads"},
        '/brython_programs':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/brython_programs"},
        '/calc_programs':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/calc_programs"},
        '/':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': _curdir+"/static/openjscad"}
    }

# if inOpenshift ('OPENSHIFT_REPO_DIR' exists in environment variables) or not inOpenshift
# it looks like on OpenShift, main application can not use the following line.
#if __name__ == '__main__':
if inOpenshift:
    # operate in OpenShift
    application = cherrypy.Application(root, config = application_conf)
else:
    # operate in localhost
    #cherrypy.server.socket_port = 8080
    #cherrypy.server.socket_host = '2001:288:6004:17::6666'
    cherrypy.quickstart(root, config = application_conf)
</t>
<t tx="cmsxh.20131226100304.3662">import cherrypy
import re
import os
import math
import hashlib
from cherrypy.lib.static import serve_file
# use quote_plus() to generate URL
import urllib.parse
# use cgi.escape() to resemble php htmlspecialchars()
# use cgi.escape() or html.escape to generate data for textarea tag, otherwise Editor can not deal with some Javascript code.
import cgi

# get the current directory of the file
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
import sys
sys.path.append(_curdir)

if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    inOpenshift = True
else:
    inOpenshift = False

if inOpenshift:
    # while program is executed in OpenShift
    download_root_dir = os.environ['OPENSHIFT_DATA_DIR']
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
else:
    # while program is executed in localhost
    download_root_dir = _curdir + "/local_data/"
    data_dir = _curdir + "/local_data/"


</t>
<t tx="cmsxh.20131226100304.3663">def downloadlist_access_list(files, starti, endi):
    # different extension files, associated links were provided
    # popup window to view images, video or STL files, other files can be downloaded directly
    # files are all the data to list, from starti to endi
    # add file size
    outstring = ""
    for index in range(int(starti)-1, int(endi)):
        fileName, fileExtension = os.path.splitext(files[index])
        fileExtension = fileExtension.lower()
        fileSize = sizeof_fmt(os.path.getsize(download_root_dir+"downloads/"+files[index]))
        # images files
        if fileExtension == ".png" or fileExtension == ".jpg" or fileExtension == ".gif":
            outstring += '&lt;input type="checkbox" name="filename" value="'+files[index]+'"&gt;&lt;a href="javascript:;" onClick="window.open(\'/downloads/'+ \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;'+files[index]+'&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'
        # stl files
        elif fileExtension == ".stl":
            outstring += '&lt;input type="checkbox" name="filename" value="'+files[index]+'"&gt;&lt;a href="javascript:;" onClick="window.open(\'/static/viewstl.html?src=/downloads/'+ \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;'+files[index]+'&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'
        # flv files
        elif fileExtension == ".flv":
            outstring += '&lt;input type="checkbox" name="filename" value="'+files[index]+'"&gt;&lt;a href="javascript:;" onClick="window.open(\'/flvplayer?filepath=/downloads/'+ \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;'+files[index]+'&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'
        # direct download files
        else:
            outstring += "&lt;input type='checkbox' name='filename' value='"+files[index]+"'&gt;&lt;a href='/download/?filepath="+download_root_dir.replace('\\', '/')+ \
            "downloads/"+files[index]+"'&gt;"+files[index]+"&lt;/a&gt; ("+str(fileSize)+")&lt;br /&gt;"
    return outstring
</t>
<t tx="cmsxh.20131226100304.3664"># set_admin_css for administrator
def set_admin_css():
    outstring = '''&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;title&gt;CMSimply - Simple Cloud CMS in Python 3&lt;/title&gt; \
&lt;link rel="stylesheet" type="text/css" href="/static/cmsimply.css"&gt;
'''+syntaxhighlight()

    outstring += '''
&lt;script src="/static/jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
$(function(){
    $("ul.topmenu&gt; li:has(ul) &gt; a").append('&lt;div class="arrow-right"&gt;&lt;/div&gt;');
    $("ul.topmenu &gt; li ul li:has(ul) &gt; a").append('&lt;div class="arrow-right"&gt;&lt;/div&gt;');
});
&lt;/script&gt;
'''
    # SSL for OpenShift operation
    if inOpenshift:
        outstring += '''
&lt;script type="text/javascript"&gt;
if ((location.href.search(/http:/) != -1) &amp;&amp; (location.href.search(/login/) != -1)) \
window.location= 'https://' + location.host + location.pathname + location.search;
&lt;/script&gt;
'''
    site_title, password = parse_config()
    outstring += '''
&lt;/head&gt;&lt;header&gt;&lt;h1&gt;'''+site_title+'''&lt;/h1&gt; \
&lt;confmenu&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="sitemap"&gt;SiteMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="edit_page"&gt;Edit All&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="'''+cherrypy.url(qs=cherrypy.request.query_string)+'''&amp;edit=1"&gt;Edit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="edit_config"&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="search_form"&gt;Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="imageuploadform"&gt;Image Upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="fileuploadform"&gt;File Upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="download_list"&gt;File List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="logout"&gt;Logout&lt;/a&gt;&lt;/li&gt;
'''
    outstring += '''
&lt;/ul&gt;
&lt;/confmenu&gt;&lt;/header&gt;
'''
    return outstring
</t>
<t tx="cmsxh.20131226100304.3665">def set_footer():
    # Extra consideration for cherrypy.url(qs=cherrypy.request.query_string) return no data
    return "&lt;footer&gt; \
        &lt;a href='edit_page'&gt;Edit All&lt;/a&gt;| \
        &lt;a href='"+cherrypy.url(qs=cherrypy.request.query_string)+"&amp;edit=1'&gt;Edit&lt;/a&gt;| \
        &lt;a href='edit_config'&gt;Config&lt;/a&gt; \
        &lt;a href='login'&gt;login&lt;/a&gt;| \
        &lt;a href='logout'&gt;logout&lt;/a&gt; \
        &lt;br /&gt;Powered by &lt;a href='http://cmsimple.cycu.org'&gt;CMSimply&lt;/a&gt; \
        &lt;/footer&gt; \
        &lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="cmsxh.20131226100304.3666">def file_get_contents(filename):
    # open file in utf-8 and return file content
    with open(filename, encoding="utf-8") as file:
        return file.read()
</t>
<t tx="cmsxh.20131226100304.3667"># use head title to search page content
'''
# search_content(head, page, search)
# 從 head 與 page 數列中, 以 search 關鍵字進行查詢
# 原先傳回與 search 關鍵字頁面對應的頁面內容
# 現在則傳回多重的頁面次序與頁面內容數列
find = lambda searchList, elem: [[i for i, x in enumerate(searchList) if x == e] for e in elem]
head = ["標題一","標題二","標題三","標題一","標題四","標題五"]
search_result = find(head,["標題一"])[0]
page_order = []
page_content = []
for i in range(len(search_result)):
    # 印出次序
    page_order.append(search_result[i])
    # 標題為 head[search_result[i]]
    #  頁面內容則為 page[search_result[i]]
    page_content.append(page[search_result[i]])
    # 從 page[次序] 印出頁面內容
# 準備傳回 page_order 與 page_content 等兩個數列
'''
def search_content(head, page, search):
    ''' 舊內容
    return page[head.index(search)]
    '''
    find = lambda searchList, elem: [[i for i, x in enumerate(searchList) if x == e] for e in elem]
    search_result = find(head,[search])[0]
    page_order = []
    page_content = []
    for i in range(len(search_result)):
        # 印出次序
        page_order.append(search_result[i])
        # 標題為 head[search_result[i]]
        #  頁面內容則為 page[search_result[i]]
        page_content.append(page[search_result[i]])
        # 從 page[次序] 印出頁面內容
    # 準備傳回 page_order 與 page_content 等兩個數列
    return page_order, page_content
</t>
<t tx="cmsxh.20131226100304.3668">def parse_content():
    # if no content.htm, generate a head 1 and content 1 file
    if not os.path.isfile(data_dir+"content.htm"):
        # create content.htm if there is no content.htm
        File = open(data_dir+"content.htm", "w", encoding="utf-8")
        File.write("&lt;h1&gt;head 1&lt;/h1&gt;content 1")
        File.close()
    subject = file_get_contents(data_dir+"content.htm")
    # deal with content without content
    if subject == "":
        # create content.htm if there is no content.htm
        File = open(data_dir+"content.htm", "w", encoding="utf-8")
        File.write("&lt;h1&gt;head 1&lt;/h1&gt;content 1")
        File.close()
    # deal with content has content but no heading
    # replace subject content with special seperate string to avoid error 
    subject = re.sub('#@CMSIMPLY_SPLIT@#', '井@CMSIMPLY_SPLIT@井', subject)
    content_sep = '#@CMSIMPLY_SPLIT@#'
    head_level = 3
    # remove all attribute inside h1, h2 and h3 tags
    subject = re.sub('&lt;(h1|h2|h3)[^&gt;]*&gt;', r'&lt;\1&gt;', subject, flags=re.I)
    content = re.split('&lt;/body&gt;', subject)
    result = re.sub('&lt;h[1-'+str(head_level)+']&gt;', content_sep, content[0])
    # remove the first element contains html and body tags
    data = result.split(content_sep)[1:]
    head_list = []
    level_list = []
    page_list = []
    order = 1
    for index in range(len(data)):
        #page_data = re.sub('&lt;/h[1-'+str(head_level)+']&gt;', content_sep, data[index])
        page_data = re.sub('&lt;/h', content_sep, data[index])
        head = page_data.split(content_sep)[0]
        order += 1
        head_list.append(head)
        # put level data into level variable
        level = page_data.split(content_sep)[1][0]
        level_list.append(level)
        # remove  1&gt;,  2&gt; or 3&gt;
        page = page_data.split(content_sep)[1][2:]
        page_list.append(page)
    # send head to unique function to avoid duplicate heading
    #head_list = unique(head_list)
    return head_list, level_list, page_list
</t>
<t tx="cmsxh.20131226100304.3669">def render_menu(head, level, page, sitemap=0):
    directory = ""
    current_level = level[0]
    if sitemap:
        directory += "&lt;ul&gt;"
    else:
        directory += "&lt;ul id='css3menu1' class='topmenu'&gt;"
    for index in range(len(head)):
        if level[index] &gt; current_level:
            directory += "&lt;ul&gt;"
            directory += "&lt;li&gt;&lt;a href='get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
        elif level[index] == current_level:
            if level[index] == 1:
                if sitemap:
                    directory += "&lt;li&gt;&lt;a href='get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
                else:
                    directory += "&lt;li class='topmenu'&gt;&lt;a href='get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
            else:
                directory += "&lt;li&gt;&lt;a href='get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
        else:
            directory += "&lt;/li&gt;"*(int(current_level) - int(level[index]))
            directory += "&lt;/ul&gt;"*(int(current_level) - int(level[index]))
            if level[index] == 1:
                if sitemap:
                    directory += "&lt;li&gt;&lt;a href='get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
                else:
                    directory += "&lt;li class='topmenu'&gt;&lt;a href='/get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
            else:
                directory += "&lt;li&gt;&lt;a href='get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
        current_level = level[index]
    directory += "&lt;/li&gt;&lt;/ul&gt;"
    return directory
</t>
<t tx="cmsxh.20131226100304.3671">def syntaxhighlight():
    return '''
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shCore.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushJScript.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushJava.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushPython.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushSql.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushXml.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushPhp.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushCpp.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushCss.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushCSharp.js"&gt;&lt;/script&gt;
&lt;link type="text/css" rel="stylesheet" href="/static/syntaxhighlighter/css/shCoreDefault.css"/&gt;
&lt;script type="text/javascript"&gt;SyntaxHighlighter.all();&lt;/script&gt;
'''
</t>
<t tx="cmsxh.20131226100304.3672">def editorhead():
    return '''
&lt;br /&gt;
&lt;script src="/static/tinymce4/tinymce/tinymce.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
tinymce.init({
    selector: "textarea",
    height: "500",
    element_format : "xhtml",
    language : "en",
    plugins: [
    "advlist autolink autosave save link image lists charmap print preview hr anchor pagebreak spellchecker",
    "searchreplace wordcount visualblocks visualchars code fullscreen insertdatetime media nonbreaking",
    "table contextmenu directionality emoticons template textcolor paste textcolor colorpicker textpattern sh4tinymce"
  ],

  toolbar1: "save,|,fullscreen,code,formatselect,fontselect,fontsizeselect,styleselect,sh4tinymce",
  toolbar2: "bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,cut,copy,paste,pastetext,pasteword,|,bullist,numlist,outdent,indent,blockquote",
  toolbar3: "undo,redo,|,link,unlink,anchor,image,media,cleanup,|,hr,removeformat,|,forecolor,backcolor,|,search,replace,|,charmap",
  toolbar4: "emoticons,subscript,superscript,|,table,insertdatetime,help",

  menubar: false,
  toolbar_items_size: 'small',
  file_picker_callback: function(callback, value, meta) {
        cmsFilePicker(callback, value, meta);
    },

  style_formats: [{
    title: 'Bold text',
    inline: 'b'
  }, {
    title: 'Red text',
    inline: 'span',
    styles: {
      color: '#ff0000'
    }
  }, {
    title: 'Red header',
    block: 'h1',
    styles: {
      color: '#ff0000'
    }
  }, {
    title: 'Example 1',
    inline: 'span',
    classes: 'example1'
  }, {
    title: 'Example 2',
    inline: 'span',
    classes: 'example2'
  }, {
    title: 'Table styles'
  }, {
    title: 'Table row 1',
    selector: 'tr',
    classes: 'tablerow1'
  }],

  templates: [{
    title: 'Test template 1',
    content: 'Test 1'
  }, {
    title: 'Test template 2',
    content: 'Test 2'
  }]
});

function cmsFilePicker(callback, value, meta) {
    tinymce.activeEditor.windowManager.open({
        title: 'Uploaded File Browser',
        url: '/file_selector?type=' + meta.filetype,
        width: 800,
        height: 550,
    }, {
        oninsert: function (url, objVals) {
            callback(url, objVals);
        }
    });
};

$(function(){
    $('.img').on('click', function(event){
        mySubmit('/upload/' + $(this).data('filename'));
    });
});

function mySubmit (url, objVals) {
    top.tinymce.activeEditor.windowManager.getParams().oninsert(url, objVals);
    top.tinymce.activeEditor.windowManager.close();
    return false;
}

&lt;/script&gt;
'''
</t>
<t tx="cmsxh.20131226100304.3674">def editorfoot():
    return '''&lt;body&gt;'''
</t>
<t tx="cmsxh.20131226100304.3675">def tinymce_editor(menu_input=None, editor_content=None, page_order=None):
    sitecontent =file_get_contents(data_dir+"content.htm")
    editor = set_admin_css()+editorhead()+'''&lt;/head&gt;'''+editorfoot()
    # edit all pages
    if page_order == None:
        outstring = editor + "&lt;div class='container'&gt;&lt;nav&gt;"+ \
            menu_input+"&lt;/nav&gt;&lt;section&gt;&lt;form method='post' action='savePage'&gt; \
     &lt;textarea class='simply-editor' name='page_content' cols='50' rows='15'&gt;"+editor_content+"&lt;/textarea&gt; \
     &lt;input type='submit' value='save'&gt;&lt;/form&gt;&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;"
    else:
        # add viewpage button wilie single page editing
        head, level, page = parse_content()
        outstring = editor + "&lt;div class='container'&gt;&lt;nav&gt;"+ \
            menu_input+"&lt;/nav&gt;&lt;section&gt;&lt;form method='post' action='ssavePage'&gt; \
     &lt;textarea class='simply-editor' name='page_content' cols='50' rows='15'&gt;"+editor_content+"&lt;/textarea&gt; \
&lt;input type='hidden' name='page_order' value='"+str(page_order)+"'&gt; \
     &lt;input type='submit' value='save'&gt;"
        outstring += '''&lt;input type=button onClick="location.href='get_page?heading='''+head[page_order]+ \
            ''''" value='viewpage'&gt;&lt;/form&gt;&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;'''
    return outstring
</t>
<t tx="cmsxh.20131226100304.3676">def parse_config():
    if not os.path.isfile(data_dir+"config"):
        # create config file if there is no config file
        file = open(data_dir+"config", "w", encoding="utf-8")
        # default password is admin
        password="admin"
        hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
        file.write("siteTitle:CMSimply - Simple Cloud CMS in Python 3\npassword:"+hashed_password)
        file.close()
    config = file_get_contents(data_dir+"config")
    config_data = config.split("\n")
    site_title = config_data[0].split(":")[1]
    password = config_data[1].split(":")[1]
    return site_title, password
</t>
<t tx="cmsxh.20131226100304.3677">def file_selector_script():
    return '''
&lt;script language="javascript" type="text/javascript"&gt;
$(function(){
    $('.a').on('click', function(event){
        //setLink('/upload/' + $(this).data('filename'));
        setLink();
    });
});

function setLink (url, objVals) {
    top.tinymce.activeEditor.windowManager.getParams().oninsert(url, objVals);
    top.tinymce.activeEditor.windowManager.close();
    return false;
}
&lt;/script&gt;
'''
</t>
<t tx="cmsxh.20131226100304.3678">def file_lister(directory, type=None, page=1, item_per_page=10):
    files = os.listdir(download_root_dir+directory)
    total_rows = len(files)
    totalpage = math.ceil(total_rows/int(item_per_page))
    starti = int(item_per_page) * (int(page) - 1) + 1
    endi = starti + int(item_per_page) - 1
    outstring = file_selector_script()
    notlast = False
    if total_rows &gt; 0:
        outstring += "&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
        #for ($j=$page-$range;$j&lt;$page+$range;$j++)
            if index&gt;= 0 and index&lt; totalpage:
                page_now = index + 1 
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "file_selector?type="+type+"&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "

        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
            if type == "downloads":
                outstring += downloadselect_access_list(files, starti, endi)+"&lt;br /&gt;"
            else:
                outstring += imageselect_access_list(files, starti, endi)+"&lt;br /&gt;"
        else:
            outstring += "&lt;br /&gt;&lt;br /&gt;"
            if type == "downloads":
                outstring += downloadselect_access_list(files, starti, total_rows)+"&lt;br /&gt;"
            else:
                outstring += imageselect_access_list(files, starti, total_rows)+"&lt;br /&gt;"
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
        #for ($j=$page-$range;$j&lt;$page+$range;$j++)
            if index &gt;=0 and index &lt; totalpage:
                page_now = index + 1
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "file_selector?type="+type+"&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "
        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;"
    else:
        outstring += "no data!"

    if type == "downloads":
        return outstring+"&lt;br /&gt;&lt;br /&gt;&lt;a href='fileuploadform'&gt;file upload&lt;/a&gt;"
    else:
        return outstring+"&lt;br /&gt;&lt;br /&gt;&lt;a href='imageuploadform'&gt;image upload&lt;/a&gt;"
</t>
<t tx="cmsxh.20131226100304.3679">def downloadselect_access_list(files, starti, endi):
    outstring = ""
    for index in range(int(starti)-1, int(endi)):
        fileName, fileExtension = os.path.splitext(files[index])
        fileSize = os.path.getsize(download_root_dir+"/downloads/"+files[index])
        outstring += '''&lt;input type="checkbox" name="filename" value="'''+files[index]+'''"&gt;&lt;a href="#" onclick='window.setLink("/download/?filepath='''+ \
        download_root_dir.replace('\\', '/')+'''/downloads/'''+files[index]+'''",0); return false;'&gt;'''+ \
        files[index]+'''&lt;/a&gt; ('''+str(sizeof_fmt(fileSize))+''')&lt;br /&gt;'''
    return outstring
</t>
<t tx="cmsxh.20131226100304.3680">def imageselect_access_list(files, starti, endi):
    outstring = '''&lt;head&gt;
&lt;style&gt;
a.xhfbfile {padding: 0 2px 0 0; line-height: 1em;}
a.xhfbfile img{border: none; margin: 6px;}
a.xhfbfile span{display: none;}
a.xhfbfile:hover span{
    display: block;
    position: relative;
    left: 150px;
    border: #aaa 1px solid;
    padding: 2px;
    background-color: #ddd;
}
a.xhfbfile:hover{
    background-color: #ccc;
    opacity: .9;
    cursor:pointer;
}
&lt;/style&gt;
&lt;/head&gt;
'''
    for index in range(int(starti)-1, int(endi)):
        fileName, fileExtension = os.path.splitext(files[index])
        fileSize = os.path.getsize(download_root_dir+"/images/"+files[index])
        outstring += '''&lt;a class="xhfbfile" href="#" onclick='window.setLink("/download/?filepath='''+ \
        download_root_dir.replace('\\', '/')+'''/images/'''+files[index]+'''",0); return false;'&gt;'''+ \
        files[index]+'''&lt;span style="position: absolute; z-index: 4;"&gt;&lt;br /&gt;
        &lt;img src="/download/?filepath='''+ \
        download_root_dir.replace('\\', '/')+'''/images/'''+files[index]+'''" width="150px"/&gt;&lt;/span&gt;&lt;/a&gt; ('''+str(sizeof_fmt(fileSize))+''')&lt;br /&gt;'''
    return outstring
</t>
<t tx="cmsxh.20131226100304.3681">def sizeof_fmt(num):
    for x in ['bytes','kb','mb','gb']:
        if num &lt; 1024.0:
            return "%3.1f %s" % (num, x)
        num /= 1024.0
    return "%3.1f %s" % (num, 'tb')
</t>
<t tx="cmsxh.20131226100304.3682">class CMSimply(object):
    _cp_config = {
    # if there is no utf-8 encoding, no Chinese input available
    'tools.encode.encoding': 'utf-8',
    'tools.sessions.on' : True,
    'tools.sessions.storage_type' : 'file',
    #'tools.sessions.locking' : 'explicit',
    'tools.sessions.storage_path' : data_dir+'/tmp',
    # session timeout is 60 minutes
    'tools.sessions.timeout' : 60,
    # poll rate for expired session cleanup in minutes
    'tools.sessions.clean_freq': 30
    }
    
    @others
</t>
<t tx="cmsxh.20131226100304.3683">@cherrypy.expose
def index(self, heading=None, *args, **kwargs):
    head, level, page = parse_content()
    # fix first Chinese heading error
    raise cherrypy.HTTPRedirect("get_page?heading="+urllib.parse.quote_plus(head[0]))
    # the following will never execute
    directory = render_menu(head, level, page)
    if heading == None:
        heading = head[0]
    # 因為同一 heading 可能有多頁, 因此不可使用 head.index(heading) 搜尋 page_order
    page_order_list, page_content_list = search_content(head, page, heading)
    return_content = ""
    for i in range(len(page_order_list)):
        #page_order = head.index(heading)
        page_order = page_order_list[page_order_list[i]]
        if page_order == 0:
            last_page = ""
        else:
            last_page = head[page_order-1]+" &lt;&lt; &lt;a href='get_page?heading="+head[page_order-1]+"'&gt;Previous&lt;/a&gt;"
        if page_order == len(head) - 1:
            # no next page
            next_page = ""
        else:
            next_page = "&lt;a href='get_page?heading="+head[page_order+1]+"'&gt;Next&lt;/a&gt; &gt;&gt; "+ head[page_order+1]
        return_content += last_page+" "+next_page+"&lt;br /&gt;&lt;h1&gt;"+heading+"&lt;/h1&gt;"+page_content_list[page_order_list[i]]+"&lt;br /&gt;"+last_page+" "+next_page

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;"+return_content+"&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"


</t>
<t tx="cmsxh.20131226100304.3684"># default method, if there is no corresponding method, cherrypy will redirect to default method
# need *args and **kwargs as input variables for all possible URL links
@cherrypy.expose
def default(self, attr='default', *args, **kwargs):
    raise cherrypy.HTTPRedirect("/")
</t>
<t tx="cmsxh.20131226100304.3685">@cherrypy.expose
def login(self):
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    if not self.isAdmin():
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
    directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Login&lt;/h1&gt;&lt;form method='post' action='checkLogin'&gt; \
    Password:&lt;input type='password' name='password'&gt; \
    &lt;input type='submit' value='login'&gt;&lt;/form&gt; \
    &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
    else:
        raise cherrypy.HTTPRedirect("edit_page")
</t>
<t tx="cmsxh.20131226100304.3686">@cherrypy.expose
def logout(self):
    cherrypy.session.delete()
    raise cherrypy.HTTPRedirect("/")
</t>
<t tx="cmsxh.20131226100304.3687">@cherrypy.expose
def checkLogin(self, password=None):
    site_title, saved_password = parse_config()
    hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
    if hashed_password == saved_password:
        cherrypy.session['admin'] = 1
        raise cherrypy.HTTPRedirect("edit_page")
    raise cherrypy.HTTPRedirect("/")
</t>
<t tx="cmsxh.20131226100304.3688"># seperate page need heading and edit variables, if edit=1, system will enter edit mode
# single page edit will use ssavePage to save content, it means seperate save page
@cherrypy.expose
def get_page(self, heading=None, edit=0, *args, **kwargs):
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    '''
    try:
        pagecontent = search_content(head, page, heading)
        page_order = head.index(heading)
    except:
        heading = head[0]
        pagecontent = page[0]
        page_order = 0
    if page_order == 0:
        # no last page
        last_page = ""
    else:
        last_page = head[page_order-1] + " &lt;&lt; &lt;a href='get_page?heading="+head[page_order-1]+"'&gt;Previous&lt;/a&gt;"
    if page_order == len(head) - 1:
        # no next page
        next_page = ""
    else:
        next_page = "&lt;a href='get_page?heading="+head[page_order+1]+"'&gt;Next&lt;/a&gt; &gt;&gt; "+ head[page_order+1]
    '''
    if heading == None:
        heading = head[0]
    # 因為同一 heading 可能有多頁, 因此不可使用 head.index(heading) 搜尋 page_order
    page_order_list, page_content_list = search_content(head, page, heading)
    return_content = ""
    pagedata = ""
    outstring = ""
    outstring_duplicate = ""
    pagedata_duplicate = ""
    outstring_list = []
    for i in range(len(page_order_list)):
        #page_order = head.index(heading)
        page_order = page_order_list[i]
        if page_order == 0:
            last_page = ""
        else:
            last_page = head[page_order-1]+" &lt;&lt; &lt;a href='get_page?heading="+head[page_order-1]+"'&gt;Previous&lt;/a&gt;"
        if page_order == len(head) - 1:
            # no next page
            next_page = ""
        else:
            next_page = "&lt;a href='get_page?heading="+head[page_order+1]+"'&gt;Next&lt;/a&gt; &gt;&gt; "+ head[page_order+1]
        if len(page_order_list) &gt; 1:
            return_content += last_page+" "+next_page+"&lt;br /&gt;&lt;h1&gt;"+heading+"&lt;/h1&gt;"+page_content_list[i]+"&lt;br /&gt;"+last_page+" "+next_page+"&lt;br /&gt;&lt;hr&gt;"
            pagedata_duplicate = "&lt;h"+level[page_order]+"&gt;"+heading+"&lt;/h"+level[page_order]+"&gt;"+page_content_list[i]
            outstring_list.append(last_page+" "+next_page+"&lt;br /&gt;"+ tinymce_editor(directory, cgi.escape(pagedata_duplicate), page_order))
        else:
            return_content += last_page+" "+next_page+"&lt;br /&gt;&lt;h1&gt;"+heading+"&lt;/h1&gt;"+page_content_list[i]+"&lt;br /&gt;"+last_page+" "+next_page
            
        pagedata += "&lt;h"+level[page_order]+"&gt;"+heading+"&lt;/h"+level[page_order]+"&gt;"+page_content_list[i]
        outstring += last_page+" "+next_page+"&lt;br /&gt;"+ tinymce_editor(directory, cgi.escape(pagedata), page_order)
    
    # edit=0 for viewpage
    if edit == 0:
        '''
        if heading == None:
            return page[0]
        else:
            return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
            directory+"&lt;/nav&gt;&lt;section&gt;"+last_page+" "+next_page+"&lt;br /&gt;&lt;h1&gt;"+heading+"&lt;/h1&gt;"+pagecontent+"&lt;br /&gt;"+last_page+" "+next_page+"&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
        '''
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;"+return_content+"&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
    # enter edit mode
    else:
        # check if administrator
        if not self.isAdmin():
            raise cherrypy.HTTPRedirect("login")
        else:
            if len(page_order_list) &gt; 1:
                # 若碰到重複頁面頁印, 且要求編即, 則導向 edit_page
                #raise cherrypy.HTTPRedirect("edit_page")
                for i in range(len(page_order_list)):
                    outstring_duplicate += outstring_list[i]+"&lt;br /&gt;&lt;hr&gt;"
                return outstring_duplicate
            else:
            #pagedata = "&lt;h"+level[page_order]+"&gt;"+heading+"&lt;/h"+level[page_order]+"&gt;"+search_content(head, page, heading)
            #outstring = last_page+" "+next_page+"&lt;br /&gt;"+ tinymce_editor(directory, cgi.escape(pagedata), page_order)
                return outstring
</t>
<t tx="cmsxh.20131226100304.3689">def isAdmin(self):
    if cherrypy.session.get('admin') == 1:
            return True
    else:
        return False
</t>
<t tx="cmsxh.20131226100304.3690"># edit all page content
@cherrypy.expose
def edit_page(self):
    # check if administrator
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    else:
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        pagedata =file_get_contents(data_dir+"content.htm")
        outstring = tinymce_editor(directory, cgi.escape(pagedata))
        return outstring
</t>
<t tx="cmsxh.20131226100304.3691">@cherrypy.expose
def savePage(self, page_content=None):
    # check if administrator
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    if page_content == None:
        return self.error_log("no content to save!")
    # we need to check if page heading is duplicated
    file = open(data_dir+"content.htm", "w", encoding="utf-8")
    # in Windows client operator, to avoid textarea add extra \n
    page_content = page_content.replace("\n","")
    file.write(page_content)
    file.close()
    '''
    # need to parse_content() to eliminate duplicate heading
    head, level, page = parse_content()
    file = open(data_dir+"content.htm", "w", encoding="utf-8")
    for index in range(len(head)):
        file.write("&lt;h"+str(level[index])+"&gt;"+str(head[index])+"&lt;/h"+str(level[index])+"&gt;"+str(page[index]))
    file.close()
    '''
    raise cherrypy.HTTPRedirect("edit_page")
</t>
<t tx="cmsxh.20131226100304.3692"># seperate save page
@cherrypy.expose
def ssavePage(self, page_content=None, page_order=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    if page_content == None:
        return self.error_log("no content to save!")
    # 請注意, 若啟用 fullpage plugin 這裡的 page_content tinymce4 會自動加上 html 頭尾標註
    page_content = page_content.replace("\n","")
    head, level, page = parse_content()
    original_head_title = head[int(page_order)]
    file = open(data_dir+"content.htm", "w", encoding="utf-8")
    for index in range(len(head)):
        if index == int(page_order):
            file.write(page_content)
        else:
            file.write("&lt;h"+str(level[index])+"&gt;"+str(head[index])+"&lt;/h"+str(level[index])+"&gt;"+str(page[index]))
    file.close()

    # if head[int(page_order)] still existed and equal original_head_title, go back to origin edit status, otherwise go to "/"
    # here the content is modified, we need to parse the new page_content again
    head, level, page = parse_content()
    # for debug
    # print(original_head_title, head[int(page_order)])
    if original_head_title == head[int(page_order)]:
        #edit_url = "get_page?heading="+urllib.parse.quote_plus(head[int(page_order)])+"&amp;edit=1"
        edit_url = "get_page?heading="+urllib.parse.quote_plus(original_head_title)+"&amp;edit=1"
        raise cherrypy.HTTPRedirect(edit_url)
    else:
        raise cherrypy.HTTPRedirect("/")
</t>
<t tx="cmsxh.20131226100304.3694">@cherrypy.expose
def fileuploadform(self):
    if self.isAdmin():
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;file upload&lt;/h1&gt;"+'''
\\-4.&lt;script src="/static/jquery.js" type="text/javascript"&gt;&lt;/script&gt;
\\-4.&lt;script src="/static/axuploader.js" type="text/javascript"&gt;&lt;/script&gt;
\\-4.&lt;script&gt;
\\-4.$(document).ready(function(){
\\-4.$('.prova').axuploader({url:'fileaxupload', allowExt:['jpg','png','gif','7z','pdf','zip','flv','stl','swf'],
\\-4.finish:function(x,files)
    {
        alert('All files have been uploaded: '+files);
    },
\\-4.enable:true,
\\-4.remotePath:function(){
\\-2.return 'downloads/';
\\-4.}
\\-4.});
\\-4.});
\\-4.&lt;/script&gt;
\\-4.&lt;div class="prova"&gt;&lt;/div&gt;
\\-4.&lt;input type="button" onclick="$('.prova').axuploader('disable')" value="asd" /&gt;
\\-4.&lt;input type="button" onclick="$('.prova').axuploader('enable')" value="ok" /&gt;
\\-4.&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;
\\-4.'''
    else:
        raise cherrypy.HTTPRedirect("login")
</t>
<t tx="cmsxh.20131226100304.3695">@cherrypy.expose
def fileaxupload(self, *args, **kwargs):
    # need to consider if the uploaded filename already existed.
    # right now all existed files will be replaced with the new files
    if self.isAdmin():
        filename = kwargs["ax-file-name"]
        flag = kwargs["start"]
        if flag == "0":
            file = open(download_root_dir+"downloads/"+filename, "wb")
        else:
            file = open(download_root_dir+"downloads/"+filename, "ab")
        file.write(cherrypy.request.body.read())
        file.close()
        return "files uploaded!"
    else:
        raise cherrypy.HTTPRedirect("login")
</t>
<t tx="cmsxh.20131226100304.3696">@cherrypy.expose
def imageuploadform(self):
    if self.isAdmin():
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;image upload&lt;/h1&gt;"+'''
\\-4.&lt;script src="/static/jquery.js" type="text/javascript"&gt;&lt;/script&gt;
\\-4.&lt;script src="/static/axuploader.js" type="text/javascript"&gt;&lt;/script&gt;
\\-4.&lt;script&gt;
\\-4.$(document).ready(function(){
\\-4.$('.prova').axuploader({url:'/imageaxupload', allowExt:['jpg','png','gif'],
\\-4.finish:function(x,files)
    {
        alert('All files have been uploaded: '+files);
    },
\\-4.enable:true,
\\-4.remotePath:function(){
\\-2.return 'images/';
\\-4.}
\\-4.});
\\-4.});
\\-4.&lt;/script&gt;
\\-4.&lt;div class="prova"&gt;&lt;/div&gt;
\\-4.&lt;input type="button" onclick="$('.prova').axuploader('disable')" value="asd" /&gt;
\\-4.&lt;input type="button" onclick="$('.prova').axuploader('enable')" value="ok" /&gt;
\\-4.'''
    else:
        raise cherrypy.HTTPRedirect("login")
</t>
<t tx="cmsxh.20131226100304.3697">@cherrypy.expose
def imageaxupload(self, *args, **kwargs):
    if self.isAdmin():
        filename = kwargs["ax-file-name"]
        flag = kwargs["start"]
        if flag == 0:
            file = open(download_root_dir+"images/"+filename, "wb")
        else:
            file = open(download_root_dir+"images/"+filename, "ab")
        file.write(cherrypy.request.body.read())
        file.close()
        return "image files uploaded!"
    else:
        raise cherrypy.HTTPRedirect("login")
</t>
<t tx="cmsxh.20131226100304.3698">@cherrypy.expose
def file_selector(self, type=None, page=1, item_per_page=10, keyword=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    else:
        #if type == "downloads":
        if type == "file":
            #return downloads_file_selector()
            # 請注意因為在 editorhead 以 meta 判斷 filetyp, 所以前段 type 為 file, 但是後段必須與 file_lister 中的 type = downloads 配合, 所以目前前後的 type 字串不同, 之後整合修改時將修正, 設法讓  type 前後一致
            type = 'downloads'
            return file_lister("downloads", type, page, item_per_page)
        elif type == "image":
            #return images_file_selector()
            return file_lister("images", type, page, item_per_page)
</t>
<t tx="cmsxh.20131226100304.3699">@cherrypy.expose
def download_list(self, item_per_page=5, page=1, keyword=None, *args, **kwargs):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    # cherrypy.session['admin'] = 1
    # cherrypy.session.get('admin')
    files = os.listdir(download_root_dir+"downloads/")
    total_rows = len(files)
    totalpage = math.ceil(total_rows/int(item_per_page))
    starti = int(item_per_page) * (int(page) - 1) + 1
    endi = starti + int(item_per_page) - 1
    outstring = "&lt;form method='post' action='delete_file'&gt;"
    notlast = False
    if total_rows &gt; 0:
        outstring += "&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "download_list?&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "download_list?&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
            if index&gt;= 0 and index&lt; totalpage:
                page_now = index + 1 
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "download_list?&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "

        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "download_list?&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "download_list?&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
            outstring += downloadlist_access_list(files, starti, endi)+"&lt;br /&gt;"
        else:
            outstring += "&lt;br /&gt;&lt;br /&gt;"
            outstring += downloadlist_access_list(files, starti, total_rows)+"&lt;br /&gt;"
        
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "download_list?&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "download_list?&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
        #for ($j=$page-$range;$j&lt;$page+$range;$j++)
            if index &gt;=0 and index &lt; totalpage:
                page_now = index + 1
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "download_list?&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "
        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "download_list?&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "download_list?&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;"
    else:
        outstring += "no data!"
    outstring += "&lt;br /&gt;&lt;br /&gt;&lt;input type='submit' value='delete'&gt;&lt;input type='reset' value='reset'&gt;&lt;/form&gt;"

    head, level, page = parse_content()
    directory = render_menu(head, level, page)

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Download List&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="cmsxh.20131226100304.3700">@cherrypy.expose
def creo_getvolume(self, *args, **kwargs):
    return '''
\\-4.&lt;script src="/static/weblink/pfcUtils.js"&gt;
\\-4.&lt;/script&gt;&lt;script  src="/static/weblink/pfcParameterExamples.js"&gt;&lt;/script&gt;&lt;script  src="/static/weblink/pfcComponentFeatExamples.js"&gt;
\\-3.document.writeln ("Error loading script!");
\\-4.&lt;/script&gt;&lt;script language="JavaScript"&gt;
if (!pfcIsWindows())
    netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
\\-2.var session = pfcGetProESession ();
\\-4.// for volume
\\-2.var solid = session.CurrentModel;
try
    {
        createParametersFromArguments ();
        solid.Regenerate(void null);   
        properties = solid.GetMassProperty(void null);
        alert("part volume:"+properties.Volume);
    }
catch (err)
    {
        alert ("Exception occurred: "+pfcGetExceptionType (err));
   }
\\-4.&lt;/script&gt;
\\-4.'''
</t>
<t tx="cmsxh.20131226100304.3701">@cherrypy.expose
def anglebracket(self, *args, **kwargs):
    return '''
\\-4.&lt;script src="/static/weblink/pfcUtils.js"&gt;
\\-4.&lt;/script&gt;&lt;script src="/static/weblink/wl_header.js"&gt;
\\-4.document.writeln ("Error loading Pro/Web.Link header!");
\\-4.&lt;/script&gt;&lt;script language="JavaScript"&gt;
\\-4.if (!pfcIsWindows()) netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
\\-4.// if the third input is false, it means use session, but will not be displayed
\\-4.// ret is the model open return
\\-3.var ret = document.pwl.pwlMdlOpen("angle_bracket_creo.prt", "c:/tmp", false);
\\-4.if (!ret.Status) {
alert("pwlMdlOpen failed (" + ret.ErrorCode + ")");
\\-4.}
var session = pfcGetProESession();
var window = session.OpenFile(pfcCreate("pfcModelDescriptor").CreateFromFileName("angle_bracket_creo.prt"));
var solid = session.GetModel("angle_bracket_creo.prt",pfcCreate("pfcModelType").MDL_PART);
var d1,d2,myf,myn,i,j,volume,count,d1Value,d2Value;
d1 = solid.GetParam("len1");
//d2 = solid.GetParam("width");
//myf=20;
//myn=20;
volume=0;
count=0;
try
{
        //createParametersFromArguments ();
        for(i=0;i&lt;=3;i++)
        {
            //for(j=0;j&lt;=2;j++)
            //{
                myf=180+i;
                //myn=100+i*10;
     d1Value = pfcCreate ("MpfcModelItem").CreateDoubleParamValue(myf);
     d2Value = pfcCreate ("MpfcModelItem").CreateDoubleParamValue(myn);
                d1.Value = d1Value;
                //d2.Value = d2Value;
                solid.Regenerate(void null);
                properties = solid.GetMassProperty(void null);
                //volume = volume + properties.Volume;
\\-4.volume = properties.Volume;
                count = count + 1;
\\-4.alert("execute no: "+count+", part volume:"+volume);
\\-4.var newfile = document.pwl.pwlMdlSaveAs("angle_bracket_creo.prt", "c:/tmp", "cadp_w12_py_"+count+".prt");
\\-4.if (!newfile.Status) {
alert("pwlMdlSaveAs failed (" + newfile.ErrorCode + ")");
\\-4.//}
            }
        }
        //alert("totally execute:"+count+"times, part volume:"+volume);
        //alert("part volume:"+properties.Volume);
        //alert("part volume to integer:"+Math.round(properties.Volume));
    }
catch(err)
    {
        alert ("Exception occurred: "+pfcGetExceptionType (err));
    }
\\-4.&lt;/script&gt;
\\-4.'''
</t>
<t tx="cmsxh.20131226100304.3702">@cherrypy.expose
def search_form(self):
    if self.isAdmin():
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
    directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Search&lt;/h1&gt;&lt;form method='post' action='doSearch'&gt; \
    keywords:&lt;input type='text' name='keyword'&gt; \
    &lt;input type='submit' value='search'&gt;&lt;/form&gt; \
    &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
    else:
        raise cherrypy.HTTPRedirect("login")
</t>
<t tx="cmsxh.20131226100304.3703">@cherrypy.expose
def doSearch(self, keyword=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    else:
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        match = ""
        for index in range(len(head)):
            if (keyword != "" or None) and (keyword.lower() in page[index].lower() or \
            keyword.lower() in head[index].lower()): \
                match += "&lt;a href='get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;&lt;br /&gt;"
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Search Result&lt;/h1&gt;keyword: "+ \
        keyword.lower()+"&lt;br /&gt;&lt;br /&gt;in the following pages:&lt;br /&gt;&lt;br /&gt;"+ \
        match+" \
     &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="cmsxh.20131226100304.3704">def set_css(self):
    outstring = '''&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;title&gt;CMSimply - Simple Cloud CMS in Python 3&lt;/title&gt; \
&lt;link rel="stylesheet" type="text/css" href="/static/cmsimply.css"&gt;
'''+syntaxhighlight()

    outstring += '''
&lt;script src="/static/jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
$(function(){
    $("ul.topmenu&gt; li:has(ul) &gt; a").append('&lt;div class="arrow-right"&gt;&lt;/div&gt;');
    $("ul.topmenu &gt; li ul li:has(ul) &gt; a").append('&lt;div class="arrow-right"&gt;&lt;/div&gt;');
});
&lt;/script&gt;
'''
    if inOpenshift:
        outstring += '''
&lt;script type="text/javascript"&gt;
if ((location.href.search(/http:/) != -1) &amp;&amp; (location.href.search(/login/) != -1)) \
window.location= 'https://' + location.host + location.pathname + location.search;
&lt;/script&gt;
'''
    site_title, password = parse_config()
    outstring += '''
&lt;/head&gt;&lt;header&gt;&lt;h1&gt;'''+site_title+'''&lt;/h1&gt; \
&lt;confmenu&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="sitemap"&gt;Site Map&lt;/a&gt;&lt;/li&gt;
'''
    if self.isAdmin():
        outstring += '''
&lt;li&gt;&lt;a href="edit_page"&gt;Edit All&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="'''+cherrypy.url(qs=cherrypy.request.query_string)+'''&amp;edit=1"&gt;Edit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="edit_config"&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="search_form"&gt;Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="imageuploadform"&gt;image upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="fileuploadform"&gt;file upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="download_list"&gt;file list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="logout"&gt;logout&lt;/a&gt;&lt;/li&gt;
'''
    else:
        outstring += '''
&lt;li&gt;&lt;a href="login"&gt;login&lt;/a&gt;&lt;/li&gt;
'''
    outstring += '''
&lt;/ul&gt;
&lt;/confmenu&gt;&lt;/header&gt;
'''
    return outstring
</t>
<t tx="cmsxh.20131226100304.3705">@cherrypy.expose
def edit_config(self):
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    if not self.isAdmin():
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
    directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Login&lt;/h1&gt;&lt;form method='post' action='checkLogin'&gt; \
    Password:&lt;input type='password' name='password'&gt; \
    &lt;input type='submit' value='login'&gt;&lt;/form&gt; \
    &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
    else:
        site_title, password = parse_config()
        # edit config file
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
    directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Edit Config&lt;/h1&gt;&lt;form method='post' action='saveConfig'&gt; \
    Site Title:&lt;input type='text' name='site_title' value='"+site_title+"' size='50'&gt;&lt;br /&gt; \
    Password:&lt;input type='text' name='password' value='"+password+"' size='50'&gt;&lt;br /&gt; \
 &lt;input type='hidden' name='password2' value='"+password+"'&gt; \
    &lt;input type='submit' value='send'&gt;&lt;/form&gt; \
    &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="cmsxh.20131226100304.3706">@cherrypy.expose
def saveConfig(self, site_title=None, password=None, password2=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    if site_title == None or password == None:
        return self.error_log("no content to save!")
    old_site_title, old_password = parse_config()
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    if site_title == None or password == None or password2 != old_password or password == '':
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Error!&lt;/h1&gt;&lt;a href='/'&gt;Home&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;"
    else:
        if password == password2 and password == old_password:
            hashed_password = old_password
        else:
            hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
        file = open(data_dir+"config", "w", encoding="utf-8")
        file.write("siteTitle:"+site_title+"\npassword:"+hashed_password)
        file.close()
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;config file saved&lt;/h1&gt;&lt;a href='/'&gt;Home&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="cmsxh.20131226100304.3707"># use to check directory variable data
@cherrypy.expose
def listdir(self):
    return download_root_dir +","+data_dir
</t>
<t tx="cmsxh.20131226100304.3708">@cherrypy.expose
def sitemap(self):
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    sitemap = render_menu(head, level, page, sitemap=1)

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
    directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Site Map&lt;/h1&gt;"+sitemap+"&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="cmsxh.20131226100304.3709">class Download:
    @others
</t>
<t tx="cmsxh.20131226100304.3710">@cherrypy.expose
def index(self, filepath):
    return serve_file(filepath, "application/x-download", "attachment")
</t>
<t tx="cmsxh.20131226100304.3770">Ultrasimple Content Management System

V. 0.14 - add uploaded files deletion
V. 0.15 - ready for git remote add to bitbucket
V. 0.16 - change language to English
V. 1.0 - Use Tinymce4</t>
<t tx="cmsxh.20131226100304.3820"></t>
<t tx="cmsxh.20131226100304.5349"></t>
<t tx="cmsxh.20131226100304.5350">QSplitter::handle {
    background-color: #CAE1FF; /* lightSteelBlue1 */
}

QStackedWidget {
    /* background-color:lightpink; */
    border-color: red;
    padding: 0px;
    /* border-width: 0px; */
    /* background-color: yellow; */
}

QSplitter {
    border-color: white;
    background-color: white;
    border-style: solid;
}

QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    /* 標題字型大小設定 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    /* 沒有特別對應字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* log font 大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* 內文字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;
    /* 下方的 Minibuffer 標題字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    /* 沒有直接對應字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}</t>
<t tx="cmsxh.20131226100304.5351">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="cmsxh.20131226100304.5427">@cherrypy.expose
def delete_file(self, filename=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    if filename == None:
        outstring = "no file selected!"
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Delete Error&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
    outstring = "delete all these files?&lt;br /&gt;&lt;br /&gt;"
    outstring += "&lt;form method='post' action='doDelete'&gt;"
    # only one file is selected
    if isinstance(filename, str):
        outstring += filename+"&lt;input type='hidden' name='filename' value='"+filename+"'&gt;&lt;br /&gt;"
    else:
        # multiple files selected
        for index in range(len(filename)):
            outstring += filename[index]+"&lt;input type='hidden' name='filename' value='"+filename[index]+"'&gt;&lt;br /&gt;"
    outstring += "&lt;br /&gt;&lt;input type='submit' value='delete'&gt;&lt;/form&gt;"

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Download List&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="cmsxh.20131226100304.5428">@cherrypy.expose
def doDelete(self, filename=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    # delete files
    outstring = "all these files will be deleted:&lt;br /&gt;&lt;br /&gt;"
    # only select one file
    if isinstance(filename, str):
        try:
            os.remove(download_root_dir+"downloads/"+filename)
            outstring += filename+" deleted!"
        except:
            outstring += filename+"Error, can not delete files!&lt;br /&gt;"
    else:
        # multiple files selected
        for index in range(len(filename)):
            try:
                os.remove(download_root_dir+"downloads/"+filename[index])
                outstring += filename[index]+" deleted!&lt;br /&gt;"
            except:
                outstring += filename[index]+"Error, can not delete files!&lt;br /&gt;"

    head, level, page = parse_content()
    directory = render_menu(head, level, page)

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Download List&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="cmsxh.20131230000041.1602">@cherrypy.expose
def error_log(self, info="Error"):
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
    directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;ERROR&lt;/h1&gt;"+info+"&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="cmsxh.20140101145643.1604">Copyright © 2014-2016 Chiaming Yen

CMSimply is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

CMSimply is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with CMSimply. If not, see &lt;http://www.gnu.org/licenses/&gt;.</t>
<t tx="cmsxh.20140101145643.3406">@cherrypy.expose
def flvplayer(self, filepath=None):
    outstring = '''
&lt;object type="application/x-shockwave-flash" data="/static/player_flv_multi.swf" width="320" height="240"&gt;
     &lt;param name="movie" value="player_flv_multi.swf" /&gt;
     &lt;param name="allowFullScreen" value="true" /&gt;
     &lt;param name="FlashVars" value="flv='''+filepath+'''&amp;amp;width=320&amp;amp;height=240&amp;amp;showstop=1&amp;amp;showvolume=1&amp;amp;showtime=1
     &amp;amp;startimage=/static/startimage_en.jpg&amp;amp;showfullscreen=1&amp;amp;bgcolor1=189ca8&amp;amp;bgcolor2=085c68
     &amp;amp;playercolor=085c68" /&gt;
&lt;/object&gt;
'''
    return outstring
</t>
<t tx="cmsxh.20140108172857.1763">def sizeof_fmt(num):
    for x in ['bytes','KB','MB','GB']:
        if num &lt; 1024.0:
            return "%3.1f%s" % (num, x)
        num /= 1024.0
    return "%3.1f%s" % (num, 'TB')
</t>
<t tx="cmsxh.20140108172857.2428">version on public-cmsimply.rhcloud.com
</t>
<t tx="cmsxh.20140211204322.1703">def __init__(self):
    # hope to create downloads and images directories　
    if not os.path.isdir(download_root_dir+"downloads"):
        try:
            os.makedirs(download_root_dir+"downloads")
        except:
            print("mkdir error")
    if not os.path.isdir(download_root_dir+"images"):
        try:
            os.makedirs(download_root_dir+"images")
        except:
            print("mkdir error")
    if not os.path.isdir(download_root_dir+"tmp"):
        try:
            os.makedirs(download_root_dir+"tmp")
        except:
            print("mkdir error")
    if not os.path.isdir(data_dir+"brython_programs"):
        try:
            os.makedirs(data_dir+"brython_programs")
        except:
            print("mkdir error")
    if not os.path.isdir(data_dir+"calc_programs"):
        try:
            os.makedirs(data_dir+"calc_programs")
        except:
            print("mkdir error")

</t>
</tnodes>
</leo_file>
