<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<?xml-stylesheet ekr_test ?>
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="cmsxh.20131226100304.5349"><vh>@settings</vh>
<v t="cmsxh.20131226100304.5350"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="cmsxh.20131226100304.5351"><vh>@string initial_split_orientation = horizontal</vh></v>
</v>
<v t="cmsxh.20140108172857.2428"><vh>CMSimply public version</vh></v>
<v t="cmsxh.20131226100304.3770" a="E"><vh>CMSimply Project</vh>
<v t="cmsxh.20140101145643.1604"><vh>License</vh></v>
<v t="cmsxh.20131226100304.5424"><vh>Delete uploaded files</vh></v>
<v t="cmsxh.20131226100304.5425"><vh>View uploaded files</vh></v>
<v t="cmsxh.20140212132226.1611"><vh>View uploaded images</vh></v>
<v t="cmsxh.20140212132226.1612"><vh>Delete tmp session files</vh></v>
<v t="cmsxh.20131226100304.5426"><vh>about textile</vh></v>
<v t="2014pythonE.20140312072052.1942"><vh>about syntaxhighlight</vh></v>
<v t="2014pythonE.20140424170033.3315"><vh>about duplicate heading</vh></v>
<v t="2014pythonE.20140313091306.1898"><vh>Brython ajax</vh></v>
<v t="2014fall.20141219135032.2091"><vh>Brython 3.0.1 修改</vh>
<v t="2014fall.20141219135032.2092" a="E"><vh>變更</vh>
<v t="2014fall.20141219135032.2093"><vh>Cango 程式改寫</vh></v>
<v t="2014fall.20141219135032.2094"><vh>fourbar.js 呼叫改寫</vh></v>
</v>
<v t="2014fall.20141219135032.2095"><vh>新的 editor.py</vh></v>
<v t="2014fall.20141219135032.2096"><vh>舊的 editor.py</vh></v>
</v>
<v t="amd.20150501162657.1"><vh>Brython 3.1.1 修改</vh></v>
<v t="amd.20150702232137.1"><vh>Brython 3.2.0 修改</vh></v>
<v t="2014spring.20140605210826.1877"><vh>errors</vh></v>
<v t="2014pythonE.20140313212213.1898"><vh>CherryPy ajax example</vh>
<v t="2014pythonE.20140313212213.1899"><vh>another example</vh></v>
<v t="2014pythonE.20140313212213.1902"><vh>reference site</vh></v>
<v t="2014pythonE.20140313212213.1900" a="E"><vh>localStorage</vh>
<v t="2014pythonE.20140313212213.1901"><vh>example</vh></v>
</v>
</v>
<v t="cmsxh.20140212132226.1610"><vh>Error</vh></v>
<v t="2015.20141008201544.1881"><vh>Extension</vh></v>
<v t="2014pythonE.20140420143435.2016"><vh>OpenjsCAD 模型</vh>
<v t="2014pythonE.20140420143435.2017"><vh>Dodecahedron</vh></v>
<v t="2014pythonE.20140420143435.2018"><vh>axis coupler</vh></v>
<v t="2014pythonE.20140420143435.2019"><vh>cubes</vh></v>
<v t="2014pythonE.20140420143435.2020"><vh>ring</vh></v>
<v t="2014pythonE.20140420143435.2021"><vh>centers</vh></v>
<v t="2014pythonE.20140420143435.2022"><vh>chain hull</vh></v>
<v t="2014pythonE.20140420143435.2023"><vh>colors</vh></v>
<v t="2014pythonE.20140420143435.2024"><vh>example1</vh></v>
<v t="2014pythonE.20140420143435.2025"><vh>example2</vh></v>
<v t="2014pythonE.20140420143435.2026"><vh>example3</vh></v>
<v t="2014pythonE.20140420143435.2027"><vh>example4</vh></v>
<v t="2014pythonE.20140420143435.2028"><vh>example5</vh></v>
<v t="2014pythonE.20140420143435.2029"><vh>expand</vh></v>
<v t="2014pythonE.20140420143435.2030"><vh>gear</vh></v>
<v t="2014pythonE.20140420143435.2031"><vh>iphone4 case</vh></v>
<v t="2014pythonE.20140420143435.2032"><vh>lookup</vh></v>
<v t="2014pythonE.20140420143435.2033"><vh>name plate</vh></v>
<v t="2014pythonE.20140420143435.2034"><vh>polyhedron</vh></v>
<v t="2014pythonE.20140420143435.2035"><vh>primitives</vh></v>
<v t="2014pythonE.20140420143435.2036"><vh>rectangle extrude</vh></v>
<v t="2014pythonE.20140420143435.2037"><vh>rotate extrude</vh></v>
<v t="2014pythonE.20140420143435.2038"><vh>round cube</vh></v>
<v t="2014pythonE.20140420143435.2039"><vh>torus</vh></v>
<v t="2014pythonE.20140420143435.2040"><vh>Transparency</vh></v>
<v t="2014pythonE.20140420143435.2041"><vh>Transparency2</vh></v>
<v t="2014pythonE.20140420143435.2042"><vh>Umbilical Torus</vh></v>
<v t="2014pythonE.20140420143435.2043"><vh>lego man</vh></v>
</v>
</v>
<v t="cmsxh.20131226100304.3660" a="E"><vh>@path ./</vh>
<v t="cmsxh.20131226100304.3661" a="E"><vh>@clean application</vh>
<v t="cmsxh.20131226100304.3662"><vh>&lt;&lt;declarations&gt;&gt; (application)</vh></v>
<v t="cmsxh.20131226100304.3663"><vh>downloadlist_access_list</vh></v>
<v t="2014spring.20140530082747.2194"><vh>imagelist_access_list</vh></v>
<v t="cmsxh.20140108172857.1763"><vh>sizeof_fmt</vh></v>
<v t="cmsxh.20131226100304.3664"><vh>set_admin_css</vh></v>
<v t="cmsxh.20131226100304.3665"><vh>set_footer</vh></v>
<v t="cmsxh.20131226100304.3666"><vh>file_get_contents</vh></v>
<v t="cmsxh.20131226100304.3667"><vh>search_content</vh></v>
<v t="cmsxh.20131226100304.3668"><vh>parse_content</vh></v>
<v t="cmsxh.20131226100304.3669"><vh>render_menu</vh></v>
<v t="cmsxh.20131226100304.3670"><vh>filebrowser</vh></v>
<v t="cmsxh.20131226100304.3671"><vh>syntaxhighlight</vh></v>
<v t="cmsxh.20131226100304.3672"><vh>editorhead</vh></v>
<v t="cmsxh.20131226100304.3673"><vh>tinymceinit</vh></v>
<v t="cmsxh.20131226100304.3674"><vh>editorfoot</vh></v>
<v t="cmsxh.20131226100304.3675"><vh>tinymce_editor</vh></v>
<v t="cmsxh.20131226100304.3676"><vh>parse_config</vh></v>
<v t="cmsxh.20131226100304.3677"><vh>file_selector_script</vh></v>
<v t="cmsxh.20131226100304.3678"><vh>file_lister</vh></v>
<v t="cmsxh.20131226100304.3679"><vh>downloadselect_access_list</vh></v>
<v t="2014pythonE.20140321113009.1825"><vh>loadlist_access_list</vh></v>
<v t="cmsxh.20131226100304.3680"><vh>imageselect_access_list</vh></v>
<v t="cmsxh.20131226100304.3681"><vh>sizeof_fmt</vh></v>
<v t="2014pythonE.20140424170033.3316"><vh>unique</vh></v>
<v t="cmsxh.20131226100304.3682" a="E"><vh>class CMSimply</vh>
<v t="cmsxh.20140211204322.1703"><vh>__init__</vh></v>
<v t="cmsxh.20131226100304.3683"><vh>index</vh></v>
<v t="cmsxh.20131226100304.3684"><vh>default</vh></v>
<v t="cmsxh.20131230000041.1602"><vh>error_log</vh></v>
<v t="cmsxh.20131226100304.3685"><vh>login</vh></v>
<v t="cmsxh.20131226100304.3686"><vh>logout</vh></v>
<v t="cmsxh.20131226100304.3687"><vh>checkLogin</vh></v>
<v t="cmsxh.20131226100304.3688"><vh>get_page</vh></v>
<v t="cmsxh.20131226100304.3689"><vh>isAdmin</vh></v>
<v t="cmsxh.20131226100304.3690"><vh>edit_page</vh></v>
<v t="cmsxh.20131226100304.3691"><vh>savePage</vh></v>
<v t="cmsxh.20131226100304.3692"><vh>ssavePage</vh></v>
<v t="2014pythonE.20140321113009.1826"><vh>save_program</vh></v>
<v t="2014pythonE.20140415145042.1961"><vh>save_calcprogram</vh></v>
<v t="2014pythonE.20140327090839.1738"><vh>delete_program</vh></v>
<v t="2014pythonE.20140416133807.1743"><vh>delete_calcprogram</vh></v>
<v t="cmsxh.20131226100304.3694"><vh>fileuploadform</vh></v>
<v t="cmsxh.20131226100304.3695"><vh>fileaxupload</vh></v>
<v t="cmsxh.20140101145643.3406"><vh>flvplayer</vh></v>
<v t="cmsxh.20131226100304.3696"><vh>imageuploadform</vh></v>
<v t="cmsxh.20131226100304.3697"><vh>imageaxupload</vh></v>
<v t="cmsxh.20131226100304.3698"><vh>file_selector</vh></v>
<v t="cmsxh.20131226100304.3699"><vh>download_list</vh></v>
<v t="2014spring.20140530082747.2192"><vh>image_list</vh></v>
<v t="2014pythonE.20140321113009.1824"><vh>load_list</vh></v>
<v t="cmsxh.20131226100304.5427"><vh>delete_file</vh></v>
<v t="2014spring.20140530082747.2196"><vh>image_delete_file</vh></v>
<v t="cmsxh.20131226100304.5428"><vh>doDelete</vh></v>
<v t="2014spring.20140530082747.2198"><vh>image_doDelete</vh></v>
<v t="cmsxh.20131226100304.3700"><vh>creo_getvolume</vh></v>
<v t="cmsxh.20131226100304.3701"><vh>anglebracket</vh></v>
<v t="cmsxh.20131226100304.3702"><vh>search_form</vh></v>
<v t="cmsxh.20131226100304.3703"><vh>doSearch</vh></v>
<v t="cmsxh.20131226100304.3704"><vh>set_css</vh></v>
<v t="cmsxh.20131226100304.3705"><vh>edit_config</vh></v>
<v t="cmsxh.20131226100304.3706"><vh>saveConfig</vh></v>
<v t="cmsxh.20131226100304.3707"><vh>listdir</vh></v>
<v t="cmsxh.20131226100304.3708"><vh>sitemap</vh></v>
<v t="2014fall.20141219135032.2098"><vh>brython</vh></v>
<v t="2014pythonE.20140415145042.1959"><vh>calc</vh></v>
<v t="2014pythonE.20140418074836.2073"><vh>openjscad</vh></v>
<v t="2014pythonE.20140329072748.2053"><vh>ucrobot</vh></v>
</v>
<v t="cmsxh.20131226100304.3709" a="E"><vh>class Download</vh>
<v t="cmsxh.20131226100304.3710"><vh>index</vh></v>
</v>
</v>
<v t="cmsxh.20131226100304.3820" a="E"><vh>@path static</vh>
<v t="cmsxh.20131226100304.3821"><vh>@edit cmsimply.css</vh></v>
<v t="cmsxh.20131226100304.3822"><vh>@edit axuploader.js</vh></v>
<v t="2014pythonE.20140312215910.1786"><vh>@edit console.css</vh></v>
<v t="2014pythonE.20140312215910.1787"><vh>@edit brython.css</vh></v>
<v t="2014pythonE.20140312215910.1788"><vh>@edit editor.py</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="2014fall.20141219135032.2091">&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import header

qs_lang,language = header.show('../')

# other translations

trans = {
    'report_bugs':{'en':'Please report bugs in the ',
                   'es':'Poner los bugs en el ',
                   'fr':"Signalez les bugs dans l'"},
    'test_page':{'en':'Tests page','es':'P&amp;aacute;gina de pruebas','fr':'Page de tests'},
    'run':{'en':'run','es':'ejecutar','fr':'ex?cuter'},
    'clear':{'en':'clear','es':'borrar','fr':'effacer'}
}

for key in trans:
    if key in doc:
        doc[key].html = trans[key].get(language,trans[key]['en'])

# link to test page
tplink = doc['test_page']
if qs_lang:
    tplink.href += '?lang=%s' %qs_lang

def set_debug(ev):
    if ev.target.checked:
        __BRYTHON__.debug = 1
    else:
        __BRYTHON__.debug = 0

__BRYTHON__.debug = int(doc['set_debug'].checked)

# bindings
doc['run_js'].bind('click', window.run_js)
doc['set_debug'].bind('change',set_debug)

# next functions are defined in editor.py
doc['show_js'].bind('click', show_js)
doc['run'].bind('click',run)
doc['show_console'].bind('click',show_console)

# erase "main" div
def clear_main(ev):
    doc['main'].text = ''

main_content = 'Zone with id="main" ; use it to test interaction with DOM elements'

# add "main" div
def add_main(ev):
    global main_content
    try:
        # if "main" div already exists, save content and erase container
        main_content = doc["main"].html
        doc["main_container"].html = ""
        doc["add_main"].text = 'Show "main" div'
    except KeyError:
        t = html.TABLE()
        row = html.TR()
        b = html.BUTTON('Clear')
        b.bind('click', clear_main)
        row &lt;= html.TD(b)+html.TD(html.DIV(Id="main"))
        t &lt;= row
        doc["main_container"] &lt;= t
        doc["main"].html = main_content
        doc["add_main"].text = 'Hide "main" div'

doc["add_main"].bind('click', add_main)

&lt;/script&gt;

&lt;script&gt;
function run_js(){
    var cons = document.getElementById("console")
    var jscode = cons.value
    var t0 = (new Date()).getTime()
    eval(jscode)
    var t1 = (new Date()).getTime()
    console.log("Javascript code run in "+(t1-t0)+" ms")
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython({debug:1, cache:'version'})"&gt;

&lt;table id="banner" cellpadding=0 cellspacing=0&gt;
&lt;tr id="banner_row"&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;div id="main_container"&gt;&lt;/div&gt;

&lt;div style="text-align:center"&gt;Brython version: &lt;span id="version"&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;/center&gt;

&lt;div id="container"&gt;
&lt;div id="left-div"&gt;
&lt;div style="padding: 3px 3px 3px 3px;"&gt;
&lt;button id="add_main"&gt;Add &lt;b&gt;&amp;lt;div id=main&amp;gt;&lt;/b&gt;&lt;/button&gt;

&lt;/div&gt;
  &lt;div id="editor" style="width:100%;"&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="right-div"&gt;
&lt;div style="padding: 3px 3px 3px 3px;"&gt;
  &lt;div style="float:left"&gt;
    &lt;button id="run"&gt; ▶ Run&lt;/button&gt;
    &lt;button id="run_js"&gt; ▶ Run Javascript&lt;/button&gt;
    Debug&lt;input type="checkbox" id="set_debug" checked&gt;
  &lt;/div&gt;

  &lt;div style="float:right"&gt;
    &lt;button id="show_console"&gt;Python&lt;/button&gt;
    &lt;button id="show_js"&gt;Javascript&lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="console"&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;/div&gt;</t>
<t tx="2014fall.20141219135032.2092">更換新的 Brython 目錄
更換新的 editor.py
更換所有 ace.js 相關檔案
在 run_js 前面加上  window.

舊的用法, 使用 JSObject 改為 window 物件下直接引用
#filename = JSObject(getradio)("filename")
filename = window.getradio("filename")</t>
<t tx="2014fall.20141219135032.2093">from javascript import JSConstructor
from javascript import JSObject

# JSObject 直接改為 window
# JSConstructor 中的呼叫也要加上 window
cango = JSConstructor(window.Cango2D)
shapes2d = window.shapes2D
tweener = JSConstructor(window.Tweener)
cgo = cango("plotarea")

rect = ["M", 0, 100, 500, 100, 500, 200, 0, 200, "z"]
bkg = cgo.drawShape(rect, 0, 100,'red')
tri = cgo.compileShape(shapes2d.triangle, 'black', 'black')
tri.scale(300);
hole = cgo.compileShape(shapes2d.circle, 'red', 'red')
hole.scale(150)
hole.revWinding()
hole.translate(200, 200)
tri.translate(200,200)
tri.appendPath(hole)
cgo.render(tri)</t>
<t tx="2014fall.20141219135032.2094"># need yen_fourbar.js
from javascript import JSConstructor
import math
from browser import doc
import browser.timer
 
# convert Javascript function object into Brython object
point = JSConstructor(window.Point)
line = JSConstructor(window.Line)
link = JSConstructor(window.Link)
triangle = JSConstructor(window.Triangle)
 
def draw():
    global theta
    # clear canvas context
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    # draw linkeage
    line1.drawMe(ctx)
    line2.drawMe(ctx)
    line3.drawMe(ctx)
    # draw triangles
    #triangle1.drawMe(ctx)
    #triangle2.drawMe(ctx)
    # input link rotation increment
    theta += dx
    # calculate new p2 position according to new theta angle
    p2.x = p1.x + line1.length*math.cos(theta*degree)
    p2.y = p1.y - line1.length*math.sin(theta*degree)
    temp = triangle2.setPPSS(p2, p4, link3_len, link2_len)
    p3.x = temp[0]
    p3.y = temp[1]
 
 
x, y, r = 10, 10, 10
# define canvas and context
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")
# fourbar linkage inputs
theta = 0
degree = math.pi/180
dx = 2
dy = 4
p1 = point(150, 100)
p2 = point(150, 200)
p3 = point(300, 300)
p4 = point(350, 100)
line1 = link(p1, p2)
line2 = link(p2, p3)
line3 = link(p3, p4)
line4 = link(p1, p4)
line5 = link(p2, p4)
link2_len = p2.distance(p3)
link3_len = p3.distance(p4)
triangle1 = triangle(p1,p2,p4)
triangle2 = triangle(p2,p3,p4)
temp = []
ctx.translate(0, canvas.height)
ctx.scale(1, -1)
browser.timer.set_interval(draw, 10)</t>
<t tx="2014fall.20141219135032.2095">import sys
import time
import traceback
import dis

from browser import document as doc, window,alert
from javascript import JSObject

# set height of container to 66% of screen
_height = doc.documentElement.clientHeight
_s = doc['container']
_s.style.height = '%spx' % int(_height*0.66)

has_ace = True
try:
    editor = window.ace.edit("editor")
    session = editor.getSession()
    session.setMode("ace/mode/python")

    editor.setOptions({
     'width': '390px;',
     'enableLiveAutocompletion': True,
     'enableSnippets': True,
     'highlightActiveLine': False,
     'highlightSelectedWord': True
    })
except:
    from browser import html
    editor = html.TEXTAREA(rows=20,cols=70)
    doc["editor"] &lt;= editor
    def get_value(): return editor.value
    def set_value(x):editor.value=x
    editor.getValue = get_value
    editor.setValue = set_value
    has_ace = False

if sys.has_local_storage:
    from browser.local_storage import storage
else:
    storage = None

if 'set_debug' in doc:
    __BRYTHON__.debug = int(doc['set_debug'].checked)

def reset_src():
    if storage is not None and "py_src" in storage:
       editor.setValue(storage["py_src"])
    else:
       editor.setValue('for i in range(10):\n\tprint(i)')

    editor.scrollToRow(0)
    editor.gotoLine(0)

def reset_src_area():
    if storage and "py_src" in storage:
       editor.value = storage["py_src"]
    else:
       editor.value = 'for i in range(10):\n\tprint(i)'

def write(data):
    doc["console"].value += '%s' % data

#sys.stdout = object()    #not needed when importing sys via src/Lib/sys.py
sys.stdout.write = write

#sys.stderr = object()    # ditto
sys.stderr.write = write

def to_str(xx):
    return str(xx)

info = sys.implementation.version
doc['version'].text = '%s.%s.%s' %(info.major,info.minor,info.micro)

output = ''

def show_console(ev):
    doc["console"].value = output
    doc["console"].cols = 60

def run(in_globals=False):
    global output
    doc["console"].value=''
    src = editor.getValue()
    if storage is not None:
       storage["py_src"]=src

    t0 = time.perf_counter()
    try:
        if(in_globals):
            exec(src)
        else:
            ns = {}
            exec(src,ns)
        state = 1
    except Exception as exc:
        traceback.print_exc()
        state = 0
    output = doc["console"].value

    print('&lt;completed in %6.2f ms&gt;' % ((time.perf_counter()-t0)*1000.0))
    return state

# load a Python script
def load_script(evt):
    _name=evt.target.value+'?foo=%s' %time.time()
    editor.setValue(open(_name).read())

def show_js(ev):
    src = editor.getValue()
    doc["console"].value = dis.dis(src)

if has_ace:
    reset_src()
else:
    reset_src_area()</t>
<t tx="2014fall.20141219135032.2096"># -*- coding: utf-8 -*-
import sys
import time
import dis
import traceback

from browser import document as doc
from javascript import JSObject

# set height of container to 66% of screen
_height = doc.documentElement.clientHeight
_s = doc['container']
_s.style.height = '%spx' % int(_height*0.66)

has_ace = True
try:
    editor=JSObject(ace).edit("editor")
    editor.getSession().setMode("ace/mode/python")
    editor.setTheme("ace/theme/monokai")
except:
    from browser import html
    editor = html.TEXTAREA(rows=20,cols=70)
    doc["editor"] &lt;= editor
    def get_value(): return editor.value
    def set_value(x):editor.value=x
    editor.getValue = get_value
    editor.setValue = set_value
    has_ace = False

if sys.has_local_storage:
    from browser.local_storage import storage
else:
    storage = False

def reset_src():
    if storage and "py_src" in storage:
       editor.setValue(storage["py_src"])
    else:
       editor.setValue('''#coding: utf-8
# 猜數字遊戲
import random
 
標準答案 = random.randint(1, 100)
你猜的數字 = int(input("請輸入您所猜的整數:"))
猜測次數 = 1
while 標準答案 != 你猜的數字:
    if 標準答案 &lt; 你猜的數字:
        print("太大了，再猜一次 :)加油")
    else:
        print("太小了，再猜一次 :)加油")
    你猜的數字 = int(input("請輸入您所猜的整數:"))
    猜測次數 += 1
 
print("猜對了！總共猜了", 猜測次數, "次")
''')

    editor.scrollToRow(0)
    editor.gotoLine(0)

def reset_src_area():
    if storage and "py_src" in storage:
       editor.value = storage["py_src"]
    else:
        editor.value = '''#coding: utf-8
# 猜數字遊戲
import random
 
標準答案 = random.randint(1, 100)
你猜的數字 = int(input("請輸入您所猜的整數:"))
猜測次數 = 1
while 標準答案 != 你猜的數字:
    if 標準答案 &lt; 你猜的數字:
        print("太大了，再猜一次 :)加油")
    else:
        print("太小了，再猜一次 :)加油")
    你猜的數字 = int(input("請輸入您所猜的整數:"))
    猜測次數 += 1
 
print("猜對了！總共猜了", 猜測次數, "次")
'''

def write(data):
    doc["console"].value += str(data)

#sys.stdout = object()    #not needed when importing sys via src/Lib/sys.py
sys.stdout.write = write

#sys.stderr = object()    # ditto
sys.stderr.write = write

def to_str(xx):
    return str(xx)

#info = sys.implementation.version
#doc['version'].text = '%s.%s.%s' %(info.major,info.minor,info.micro)

output = ''

def show_console(ev):
    doc["console"].value = output
    doc["console"].cols = 60

def clear_text(ev):
    editor.setValue('')
    if sys.has_local_storage:
        storage["py_src"]=''

    doc["console"].value=''

def clear_src(ev):
    editor.setValue('')
    if sys.has_local_storage:
        storage["py_src"]=''
        
def clear_canvas(ev):
    canvas = doc["plotarea"]
    ctx = canvas.getContext("2d")
    # Store the current transformation matrix
    ctx.save();
    # Use the identity matrix while clearing the canvas
    ctx.setTransform(1, 0, 0, 1, 0, 0);
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    # Restore the transform
    ctx.restore();
    #ctx.clearRect(0, 0, canvas.width, canvas.height)

def clear_console(ev):
    doc["console"].value=''

def run(*args):
    global output
    doc["console"].value=''
    src = editor.getValue()
    if storage:
       storage["py_src"]=src

    t0 = time.perf_counter()
    try:
        exec(src,globals())
        state = 1
    except Exception as exc:
        traceback.print_exc()
        state = 0
    output = doc["console"].value

    print('&lt;completed in %6.2f ms&gt;' % ((time.perf_counter()-t0)*1000.0))
    return state

# load a Python script
def load(evt):
    _name=evt.target.value+'?foo=%s' %time.time()
    editor.setValue(open(_name).read())

def show_js(ev):
    src = editor.getValue()
    doc["console"].value = dis.dis(src)

def change_theme(evt):
    _theme=evt.target.value
    editor.setTheme(_theme)

    if storage:
       storage["ace_theme"]=_theme
doc["ace_theme"].bind("change",change_theme)

def reset_theme():
    if storage:
       if "ace_theme" in storage:
          editor.setTheme(storage["ace_theme"])
          doc["ace_theme"].value=storage["ace_theme"]

def reset_the_src(ev):
    if has_ace:
        reset_src()
        reset_theme()
    else:
        reset_src_area()

if has_ace:
    reset_src()
    reset_theme()
else:
    reset_src_area()
</t>
<t tx="2014fall.20141219135032.2098">@cherrypy.expose
def brython(self, item_per_page=5, page=1, keyword=None, filename=None, *args, **kwargs):
    part1 =  '''
&lt;!DOCTYPE html&gt; 
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;link rel="stylesheet" type="text/css" href="/static/console.css"&gt;
&lt;link rel="stylesheet" type="text/css" href="/static/brython.css"&gt;
&lt;script type="text/javascript" src="/static/Brython3.2.0-20150701-214155/brython.js"&gt;&lt;/script&gt;
&lt;script src="https://togetherjs.com/togetherjs-min.js"&gt;&lt;/script&gt;

&lt;script src="/static/ace/ace.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;script src="/static/ace/ext-language_tools.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;script src="/static/ace/mode-python3.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;script src="/static/ace/snippets/python.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="/static/Cango2D.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/yen_fourbar.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/gearUtils-04.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/jsc3d.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/stlviewer.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/threejs/three.min.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/threejs/Coordinates.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/threejs/dat.gui.min.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/threejs/Detector.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/threejs/OrbitAndPanControls.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script type="text/javascript" &gt;
function getradio(tagname){
var radios = document.getElementsByName(tagname);
for (var i = 0, length = radios.length; i &lt; length; i++) {
    if (radios[i].checked) {
        // do whatever you want with the checked radio
        return radios[i].value;
        // only one radio can be logically checked, don't check the rest
        break;
      }
   }
}

function run_js(){
    var cons = document.getElementById("console")
    var jscode = cons.value
    var t0 = (new Date()).getTime()
    eval(jscode)
    var t1 = (new Date()).getTime()
    console.log("Javascript code run in "+(t1-t0)+" ms")
}
&lt;/script&gt;
&lt;script type="text/python3" src="/static/editor.py"&gt;&lt;/script&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
from browser import window
import editor


overwrite = 0
# add delete_program 1/7, seven steps to complete the ajax task, the last step is to add delete_program function on server
# delete1 and delete2 parameters are also added into save_program function.
delete1 = 0
delete2 = 0

def set_debug(ev):
    if ev.target.checked:
        __BRYTHON__.debug = 1
    else:
        __BRYTHON__.debug = 0
        
def set_overwrite(ev):
    global overwrite
    if ev.target.checked:
        overwrite = 1
    else:
        overwrite = 0

# add delete_program 2/7, client side add set_delete1 and set_delete2 functions.
def set_delete1(ev):
    global delete1
    if ev.target.checked:
        delete1 = 1
    else:
        delete1 = 0

def set_delete2(ev):
    global delete2
    if ev.target.checked:
        delete2 = 1
    else:
        delete2 = 0

#### ajax process
from browser import ajax,doc

def on_complete(req):
    print(req.readyState)
    print('status',req.status)
    if req.status==200 or req.status==0:
        # show request text on id=result division
        doc["result"].html = req.text
    else:
        doc["result"].html = "error "+req.text

def err_msg():
    doc["result"].html = "server didn't reply after %s seconds" %timeout

timeout = 4

def go(url):
    req = ajax.ajax()
    req.bind('complete', on_complete)
    req.set_timeout(timeout, err_msg)
    req.open('GET', url, True)
    req.send()

def post(url):
    req = ajax.ajax()
    req.bind('complete', on_complete)
    req.set_timeout(timeout, err_msg)
    req.open('POST', url, True)
    req.set_header('content-type','application/x-www-form-urlencoded')
    # doc["filename"].value is the id=filename input field's value
    # editor.getValue() is the content on editor, need to send dictionary format data
    # while post url, need to save editor content into local_storage to use the previous load javascripts
    storage["py_src"] = editor.getValue()
    # add delete_program 3/7, two parameters added, this will also affect save_program function on server.
    req.send({'filename':doc["filename"].value, 'editor':editor.getValue(), 'overwrite':overwrite, 'delete1':delete1, 'delete2':delete2})
    
# get program from server
def get_prog(ev):
    # ajax can only read data from server
    _name = '/brython_programs/'+doc["filename"].value
    try:
        editor.setValue(open(_name, encoding="utf-8").read())
        doc["result"].html = doc["filename"].value+" loaded!"
    except:
        doc["result"].html = "can not get "+doc["filename"].value+"!"
    editor.scrollToRow(0)
    editor.gotoLine(0)
    reset_theme()
    
def get_radio(ev):
    filename = window.getradio("filename")
    # ajax can only read data from server
    doc["filename"].value = filename
    _name = '/brython_programs/'+filename
    editor.setValue(open(_name, encoding="utf-8").read())
    doc["result"].html = filename+" loaded!"
    editor.scrollToRow(0)
    editor.gotoLine(0)
    reset_theme()
    
# bindings
doc['run_js'].bind('click', window.run_js)
doc['set_debug'].bind('change',set_debug)
'''
    adm1 = '''
doc['set_overwrite'].bind('change',set_overwrite)
# add delete_program 4/7, two associated binds added
doc['set_delete1'].bind('change',set_delete1)
doc['set_delete2'].bind('change',set_delete2)
'''
    part2 = '''
# next functions are defined in editor.py
doc['show_js'].bind('click',editor.show_js)
doc['run'].bind('click',editor.run)
doc['show_console'].bind('click',editor.show_console)
# get_prog and get _radio (working)
doc['get_prog'].bind('click', get_prog)
doc['get_radio'].bind('click', get_radio)
# reset_the_src and clear_console (working)
doc['reset_the_src'].bind('click',editor.reset_the_src)
doc['clear_console'].bind('click',editor.clear_console)
# clear_canvas and clear_src
doc['clear_canvas'].bind('click',editor.clear_canvas)
doc['clear_src'].bind('click',editor.clear_src)
# only admin can save program to server
'''
    adm2 = '''
doc['save_program'].bind('click',lambda ev:post('save_program'))
# add delete_program 5/7, delete_program button bind to execute delete_program on server.
doc['delete_program'].bind('click',lambda ev:post('delete_program'))
'''
    # if load program through url
    if filename != None:
        load_program = '''
_name = '/brython_programs/'''+filename+''''
try:
    editor.setValue(open(_name, encoding="utf-8").read())
    doc["filename"].value = "'''+filename+'''"
    doc["result"].html = "'''+filename+''' loaded!"
except:
    doc["result"].html = "can not get '''+filename+'''!"
editor.scrollToRow(0)
editor.gotoLine(0)
reset_theme()
'''
    else:
        load_program = ""

    part3 = '''
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython({debug:1, cache:'version'})"&gt;
&lt;table id="banner" cellpadding=0 cellspacing=0&gt;
&lt;tr id="banner_row"&gt;
&lt;td style="width:80px"&gt;&lt;/td&gt;
&lt;td class="alnleft"&gt;
'''
    part4 = '''
&lt;/td&gt;
&lt;td class="alnleft"&gt;
            &lt;button id="reset_the_src"&gt;reset the_src&lt;/button&gt;
            &lt;button id="clear_src"&gt;clear src&lt;/button&gt;
            &lt;button id="clear_console"&gt;clear console&lt;/button&gt;
            &lt;button id="clear_canvas"&gt;clear canvas&lt;/button&gt;
            &lt;button onclick="TogetherJS(this); return false;"&gt;Start TogetherJS&lt;/button&gt;
            &lt;br /&gt;filename: &lt;input id="filename"&gt;
'''
    adm3 = '''
            &lt;button id="save_program"&gt;save program&lt;/button&gt;
            overwrite&lt;input type="checkbox" id="set_overwrite"&gt;
            &lt;br /&gt;&lt;!-- add delete_program button and two double checkboxs 6/7 --&gt;
            &lt;button id="delete_program"&gt;delete program&lt;/button&gt;
            sure to delete1&lt;input type="checkbox" id="set_delete1"&gt;
            sure to delete2&lt;input type="checkbox" id="set_delete2"&gt;
'''
    part5 = '''
            &lt;div id="result"&gt;(empty)&lt;/div&gt;
            &lt;button id="get_radio"&gt;load selected program&lt;/button&gt;
            &lt;button onClick="window.location.reload()"&gt;reload page&lt;/button&gt;
            &lt;button id="get_prog"&gt;get prog file&lt;/button&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;!--
&lt;div style="text-align:center"&gt;
&lt;br&gt;Brython version: &lt;span id="version"&gt;&lt;/span&gt;
&lt;/div&gt;
--&gt;
&lt;div id="container"&gt;
    &lt;div id="left-div"&gt;
    &lt;div style="padding: 3px 3px 3px 3px;"&gt;
    
      &lt;div style="float:center"&gt;
        &lt;button id="show_console"&gt;Console&lt;/button&gt;
        &lt;button id="show_js"&gt;Javascript&lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div style="width:100%;height:100%;"&gt;
    &lt;textarea id="console"&gt;&lt;/textarea&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div id="right-div"&gt;
    &lt;div style="padding: 3px 3px 3px 3px;"&gt;
        &lt;div style="float:left"&gt;
        &lt;button id="run"&gt;run&lt;/button&gt;
        &lt;button id="run_js"&gt;run Javascript&lt;/button&gt;
        debug&lt;input type="checkbox" id="set_debug" checked&gt;
        &lt;/div&gt;
    Theme: &lt;select id="ace_theme"&gt;
    &lt;optgroup label="Bright"&gt;
    &lt;option value="ace/theme/chrome"&gt;Chrome&lt;/option&gt;
    &lt;option value="ace/theme/crimson_editor"&gt;Crimson Editor&lt;/option&gt;
    &lt;option value="ace/theme/eclipse"&gt;Eclipse&lt;/option&gt;
    &lt;option value="ace/theme/github"&gt;GitHub&lt;/option&gt;
    &lt;/optgroup&gt;
    &lt;optgroup label="Dark"&gt;
    &lt;option value="ace/theme/cobalt"&gt;Cobalt&lt;/option&gt;
    &lt;option value="ace/theme/idle_fingers"&gt;idleFingers&lt;/option&gt;
    &lt;option value="ace/theme/monokai"&gt;Monokai&lt;/option&gt;
    &lt;option value="ace/theme/pastel_on_dark"&gt;Pastel on dark&lt;/option&gt;
    &lt;option value="ace/theme/vibrant_ink"&gt;Vibrant Ink&lt;/option&gt;
    &lt;/optgroup&gt;
    &lt;/select&gt; 
    &lt;/div&gt;
      &lt;div id="editor"&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div style="float:left;margin-top:50px;"&gt;
&lt;canvas id="plotarea" width="800" height="600"&gt;&lt;/canvas&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
'''
    if not self.isAdmin():
        return part1+part2+load_program+part3+self.load_list(item_per_page, page, "brython", keyword)+part4+part5
    else:
        return part1+adm1+part2+adm2+load_program+part3+self.load_list(item_per_page, page, "brython", keyword)+part4+adm3+part5
</t>
<t tx="2014pythonE.20140312072052.1942">At this moment, the syntaxhighlight cause the Brython error.
When syntaxhighlight return anything but None, error arises.

It is believed that the CherryPy header cause this problem.

According to: http://stackoverflow.com/questions/6054473/python-cherrypy-how-to-add-header

"When you set a status code by raising HTTPError, the headers in cherrypy.response.headers are ignored. Set the HTTP status by setting cherrypy.response.status instead:"

add the following lines into index() to eliminate this problem:

# Yen try
cherrypy.response.headers['Retry-After'] = 60
cherrypy.response.status = 404

According to: http://cherrypy.readthedocs.org/en/latest/tutorial/basics.html

Since "cherrypy.response.headers contains a mapping with the header options that will be returned by the server, before the contents get sent."

The real problem comes from default(), while the CMSimply class operated normally, the default() sent some header message to cause brython not working.

The syntaxhighlight is not the problem anymore.
</t>
<t tx="2014pythonE.20140313091306.1898">&lt;div id="result"&gt;(empty)&lt;/div&gt;
&lt;button id="get_text"&gt;get text file&lt;/button&gt;
&lt;button id="i_dont_exist"&gt;file not found&lt;/button&gt;
&lt;button id="get_test"&gt;GET request&lt;/button&gt;
&lt;button id="post_test"&gt;POST request&lt;/button&gt;
&lt;button id="timeout"&gt;timeout&lt;/button&gt;

&lt;script id="ascript" type="text/python"&gt;
from browser import ajax,doc

def on_complete(req):
    print(req.readyState)
    print('status',req.status)
    if req.status==200 or req.status==0:
        doc["result"].html = req.text
    else:
        doc["result"].html = "error "+req.text

def err_msg():
    doc["result"].html = "server didn't reply after %s seconds" %timeout

timeout = 4

def go(url):
    req = ajax.ajax()
    req.bind('complete',on_complete)
    req.set_timeout(timeout,err_msg)
    req.open('GET',url,True)
    req.send()

def post(url):
    req = ajax.ajax()
    req.bind('complete',on_complete)
    req.set_timeout(timeout,err_msg)
    req.open('POST',url,True)
    req.set_header('content-type','application/x-www-form-urlencoded')
    req.send({'foo':34})

# bindings
doc['get_text'].bind('click',lambda ev:go('ajax_data.txt'))
doc['i_dont_exist'].bind('click',lambda ev:go('i_dont_exist.txt'))
doc['get_test'].bind('click',lambda ev:go('/cgi-bin/get_test.py'))
doc['post_test'].bind('click',lambda ev:post('/cgi-bin/post_test.py'))
doc['timeout'].bind('click',lambda ev:go('/cgi-bin/timeout.py'))
&lt;/script&gt;</t>
<t tx="2014pythonE.20140313212213.1898">import cherrypy
import simplejson

class Root(object):

    @cherrypy.expose
    def update(self):
        cl = cherrypy.request.headers['Content-Length']
        rawbody = cherrypy.request.body.read(int(cl))
        body = simplejson.loads(rawbody)
        # do_something_with(body)
        return "Updated %r." % (body,)

    @cherrypy.expose
    def index(self):
        return """
&lt;html&gt;
&lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"&gt;&lt;/script&gt;
&lt;script type='text/javascript'&gt;
function Update() {
    $.ajax({
      type: 'POST',
      url: "update",
      contentType: "application/json",
      processData: false,
      data: $('#updatebox').val(),
      success: function(data) {alert(data);},
      dataType: "text"
    });
}
&lt;/script&gt;
&lt;body&gt;
&lt;input type='textbox' id='updatebox' value='{}' size='20' /&gt;
&lt;input type='submit' value='Update' onClick='Update(); return false' /&gt;
&lt;/body&gt;
&lt;/html&gt;
"""

cherrypy.quickstart(Root())</t>
<t tx="2014pythonE.20140313212213.1899">import cherrypy
import simplejson

class Root:

    @cherrypy.expose
    @cherrypy.tools.json_out()
    @cherrypy.tools.json_in()
    def my_route(self):

        result = {"operation": "request", "result": "success"}

        input_json = cherrypy.request.json
        value = input_json["my_key"]

        #All responses are serialized to JSON. This the same as
        #return simplejson.dumps(result)
        return result
        
Javascript part:

//assuming that you're using jQuery

var myObject = { "my_key": "my_value" };

$.ajax({
    type: "POST",
    url: "my_route",
    data: JSON.stringify(myObject),
    contentType: 'application/json',
    dataType: 'json',
    error: function() {
        alert("error");
    },
    success: function() {
        alert("success");
    }
});</t>
<t tx="2014pythonE.20140313212213.1900">localStorage:

存值：
localStorage.setItem(key,value);

取值：
localStorage.getItem(key);

移除KEY所對應的內容:
localStorage.removeItem(key);

清除所有內容
localStorage.clear();

&lt;script&gt;
    // set an item
    localStorage.setItem('name','goofy');
    // retrieve an item
    alert(localStorage.getItem('name'));
    // empty the localStorage completely
    localStorage.clear();
&lt;/script&gt;

&lt;script "text/javascript"&gt;
    start = new Date().getTime();
    for(i=1;i&lt;=1000;i++)
        localStorage.setItem(i.toString(),'a' * 1024);
    elapsed = ((new Date().getTime()) - start)/1000
    alert(elapsed.toString() + "s");
&lt;/script&gt;

&lt;script&gt;
    for(i=0; i&lt;localStorage.length; i++) {
        key = localStorage.key(i);
        item = localStorage.getItem(key);
        // do something with key and item ...
    }
&lt;/script&gt;</t>
<t tx="2014pythonE.20140313212213.1901">example: http://dreamforce.me/wp-content/dream_demo/html5_localstorage/html5_localDemo/html5_localstorage.html

&lt;!DOCTYPE html&gt; 
&lt;head&gt; 
	&lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"/&gt; 
	&lt;title&gt;Cute Bar Demo - SpyreStudios&lt;/title&gt; 
	&lt;script type='text/javascript' src='https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.js'&gt;&lt;/script&gt; 
	&lt;script type='text/javascript' src='https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.js'&gt;&lt;/script&gt; 
	&lt;script type='text/javascript' src='js/jquery.dataTables.js'&gt;&lt;/script&gt; 
	
	&lt;link href="css/jquery.ui.all.css" rel="stylesheet" type="text/css" media="all"/&gt;
	
	&lt;link href="css/demo_page.css" rel="stylesheet" type="text/css" media="all"/&gt;
	&lt;link href="css/demo_table_jui.css" rel="stylesheet" type="text/css" media="all"/&gt;
	&lt;link href="css/demo_table.css" rel="stylesheet" type="text/css" media="all"/&gt;
	
	&lt;script type='text/javascript'&gt; 
	var currentId = 1;
	var oTable;
    $(document).ready(function(){    
		if (typeof(localStorage) == 'undefined' ) {
			alert('Your browser does not support HTML5 localStorage. Try upgrading.');
		} else {
		try {
		var currentId = localStorage.getItem("currentId")
		if(currentId == null)
		{
		localStorage.setItem("currentId",1);
		currentId = 1;
		}
		  oTable = $('#localDataList').dataTable({
					"bJQueryUI": true,
					"sPaginationType": "full_numbers"
				});
		    addLocalStorageToTabel();		
		} catch (e) {
	 	 if (e == QUOTA_EXCEEDED_ERR) {
	 	 	 alert('Quota exceeded!'); //data wasn't successfully saved due to quota exceed so throw an error
		}
	    }
       }

    });
	
	function getStoredObjIdsArray()
	{
	   var ids = localStorage.getItem("storedObjIds");
	   var idStrArray;
	   if(ids!=null)
		{
        idStrArray = ids.split(",");
		}
		return idStrArray;
	}
	function addLocalStorageToTabel()
	{
	    oTable.fnClearTable();
	    var ids_Array = getStoredObjIdsArray();
		if(ids_Array!=null)
		{
		for ( var j = 0; j &lt; ids_Array.length; j++) {
		    var theId = ids_Array[j];
			var objStr = localStorage.getItem(theId);
			if(objStr != null)
			{
			   var objField = objStr.split("|");
			   addDataToTable(theId,objField[0],objField[1]);
			}
			}
	}
	}
	
	function addDataToTable(id,name,age)
	{
	  var deleteStr = '&lt;a href="javascript:void(0)" onclick="deleteObjStr('+id+');"&gt;delete&lt;/a&gt;';
	  oTable.fnAddData( [
        id,
		name,
		age,
		deleteStr
		] );
	}
	
	function deleteObjStr(id)
	{
	   var objStr = localStorage.getItem(id);
	   if(objStr!=null)
	   {
	       alert(objStr);
	       alert("in");
	       localStorage.removeItem(id);
		   addLocalStorageToTabel();
	   }
	}
	

	
	function setObjStrTolocalStorage() 
	{
	    var name = $("#nameValue").val();
		if(name==null || name=='')
		{
		  alert("please input name value!");
		  return false;
		}
		var age  = $("#ageValue").val();
		if(age==null || age =='')
		{
		  alert("please input age value!");
		  return false;
		}
		if(isNaN(age))
		{
		  alert("the age value must be int type!");
		  return false;
		}
		var id   = localStorage.getItem("currentId");
		localStorage.setItem(id,name+"|"+age);
		var ids = localStorage.getItem("storedObjIds");
		if(ids!=null)
		{
         ids+=","+id;
		}
		else
		{
		  ids = id;
		}
		localStorage.setItem("storedObjIds",ids);
		
		addCurrentIdPoint();
	}
	
	function addDataToLocalStorage()
	{
	    setObjStrTolocalStorage();
		addLocalStorageToTabel();
		$("#addDataToForm").dialog("close")
	 }
	 
	 function addCurrentIdPoint()
	 {
	   var currentId = localStorage.getItem("currentId");	
	   var currentIdInt = parseInt(currentId) + 1;
	   localStorage.setItem("currentId",currentIdInt);
	 }
	 
	function addDataReady()
	{
	  var id   = localStorage.getItem("currentId");
	  $("#currentIdLabel").html("Current ID: "+id);
	  var target = $("#addDataToForm")
	  setDisplayArea(target)
	  $(target).dialog("open");
	}
	
	function setDisplayArea(target, recall) {
	$(target).dialog({
		autoOpen : false,
		width : "auto",
		height : "auto",
		modal : true,
		position : "center",
		beforeClose : recall
	});
}

	&lt;/script&gt; 

&lt;/head&gt; 
&lt;body&gt; 
   &lt;a href="javascript:void(0)" onclick="addDataReady()"&gt;You can add Data Here!&lt;/a&gt;
   &lt;div id="addDataToForm" style="display:none;"&gt;
   &lt;span id="currentIdLabel"&gt;ID:&lt;/span&gt;&amp;nbsp;&lt;span&gt;Name:&lt;input type="text" id="nameValue"&gt;&lt;/span&gt;&amp;nbsp;&lt;span&gt;Age: &lt;input type="text" id="ageValue"&gt;&lt;/span&gt;&amp;nbsp;&lt;span&gt;&lt;a href="javascript:void(0)" onclick="addDataToLocalStorage();"&gt;ADD&lt;/a&gt;&lt;/span&gt;
   &lt;/div&gt;
   &lt;table id="localDataList" style="border:1px solid; width:100%;"&gt;
     &lt;thead&gt;
     &lt;tr id="head"&gt;
	   &lt;td width="20%"&gt;ID&lt;/td&gt;&lt;td width="20%"&gt;Name&lt;/td&gt;&lt;td width="20%"&gt;Age&lt;/td&gt;&lt;td width="40%"&gt;Operation&lt;/td&gt;
	 &lt;/tr&gt;
	 &lt;/thead&gt;
	 &lt;tbody&gt;
	 &lt;tr&gt;
	   &lt;td&gt;ID&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;td&gt;Age&lt;/td&gt;&lt;td&gt;Operation&lt;/td&gt;
	 &lt;/tr&gt;
	 &lt;/tbody&gt;
   &lt;/table&gt;
&lt;/body&gt; 
 
 
&lt;/html&gt; 
</t>
<t tx="2014pythonE.20140313212213.1902">http://ginstrom.com/scribbles/2010/03/07/simple-ajax-with-cherrypy-and-jquery/

minijQyery Lab: http://www.darkthread.net/MiniJQueryLab/
</t>
<t tx="2014pythonE.20140321113009.1824">@cherrypy.expose
def load_list(self, item_per_page=5, page=1, filedir=None, keyword=None, *args, **kwargs):
    '''
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    '''
    # cherrypy.session['admin'] = 1
    # cherrypy.session.get('admin')
    files = os.listdir(data_dir+filedir+"_programs/")
    if keyword == None:
        pass
    else:
        cherrypy.session['search_keyword'] = keyword
        files = [s for s in files if keyword in s]
    total_rows = len(files)
    totalpage = math.ceil(total_rows/int(item_per_page))
    starti = int(item_per_page) * (int(page) - 1) + 1
    endi = starti + int(item_per_page) - 1
    outstring = '''&lt;script&gt;
function keywordSearch(){
    var oform = document.forms["searchform"];
    // 取elements集合中 name 屬性為 keyword 的值
    var getKeyword = oform.elements.keyword.value;
    // 改為若表單為空, 則列出全部資料
    //if(getKeyword != ""){
        window.location = "?brython&amp;keyword="+getKeyword;
    //}
}
&lt;/script&gt;
    &lt;form name="searchform"&gt;
    &lt;input type="text" id="keyword" /&gt;
    &lt;input type="button" id="send" value="查詢" onClick="keywordSearch()"/&gt; 
    &lt;/form&gt;
'''
    outstring += "&lt;form name='filelist' method='post' action=''&gt;"
    notlast = False
    if total_rows &gt; 0:
        # turn off the page selector on top
        '''
        outstring += "&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "brython?&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;{{&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "brython?&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
            if index&gt;= 0 and index&lt; totalpage:
                page_now = index + 1 
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "brython?&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "

        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "brython?&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "brython?&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;}}&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        '''
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
            outstring += loadlist_access_list(files, starti, endi, filedir)+"&lt;br /&gt;"
        else:
            outstring += "&lt;br /&gt;&lt;br /&gt;"
            outstring += loadlist_access_list(files, starti, total_rows, filedir)+"&lt;br /&gt;"
        
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "/"+filedir+"?&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;{{&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "/"+filedir+"?&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 5
        for index in range(int(page)-span, int(page)+span):
        #for ($j=$page-$range;$j&lt;$page+$range;$j++)
            if index &gt;=0 and index &lt; totalpage:
                page_now = index + 1
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "/"+filedir+"?&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "
        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "/"+filedir+"?&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "/"+filedir+"?&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;}}&lt;/a&gt;"
    else:
        outstring += "no data!"
    #outstring += "&lt;br /&gt;&lt;br /&gt;&lt;input type='submit' value='load'&gt;&lt;input type='reset' value='reset'&gt;&lt;/form&gt;"
    outstring += "&lt;br /&gt;&lt;br /&gt;&lt;/form&gt;"

    return outstring
</t>
<t tx="2014pythonE.20140321113009.1825">def loadlist_access_list(files, starti, endi, filedir):
    # different extension files, associated links were provided
    # popup window to view images, video or STL files, other files can be downloaded directly
    # files are all the data to list, from starti to endi
    # add file size
    outstring = ""
    for index in range(int(starti)-1, int(endi)):
        fileName, fileExtension = os.path.splitext(files[index])
        fileExtension = fileExtension.lower()
        fileSize = sizeof_fmt(os.path.getsize(data_dir+filedir+"_programs/"+files[index]))
        # images files
        if fileExtension == ".png" or fileExtension == ".jpg" or fileExtension == ".gif":
            outstring += '&lt;input type="checkbox" name="filename" value="'+files[index]+'"&gt;&lt;a href="javascript:;" onClick="window.open(\'/downloads/'+ \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;'+files[index]+'&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'
        # stl files
        elif fileExtension == ".stl":
            outstring += '&lt;input type="checkbox" name="filename" value="'+files[index]+'"&gt;&lt;a href="javascript:;" onClick="window.open(\'/static/viewstl.html?src=/downloads/'+ \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;'+files[index]+'&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'
        # flv files
        elif fileExtension == ".flv":
            outstring += '&lt;input type="checkbox" name="filename" value="'+files[index]+'"&gt;&lt;a href="javascript:;" onClick="window.open(\'/flvplayer?filepath=/downloads/'+ \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;'+files[index]+'&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'
        # py files
        elif fileExtension == ".py":
            outstring += '&lt;input type="radio" name="filename" value="'+files[index]+'"&gt;'+files[index]+' ('+str(fileSize)+')&lt;br /&gt;'
        # direct download files
        else:
            outstring += "&lt;input type='checkbox' name='filename' value='"+files[index]+"'&gt;&lt;a href='/"+filedir+"_programs/"+files[index]+"'&gt;"+files[index]+"&lt;/a&gt; ("+str(fileSize)+")&lt;br /&gt;"
    return outstring
</t>
<t tx="2014pythonE.20140321113009.1826">@cherrypy.expose
def save_program(self, filename=None, editor=None, overwrite=0, delete1=0, delete2=0):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    else:
        if overwrite == "1" or not os.path.isfile(data_dir+"/brython_programs/"+filename):
            # open file in wt will use Windows \r\n for new line
            # use replace method to remove extra lines for Windows environment
            with open(data_dir+"/brython_programs/"+filename, "wt", encoding="utf-8") as out_file:
                data = editor.replace("\r\n", "\n")
                out_file.write(data)
            return str(filename)+" saved!&lt;br /&gt;"
        else:  
            return str(filename)+" exists! editor content not saved yet!&lt;br /&gt;"

</t>
<t tx="2014pythonE.20140327090839.1738">@cherrypy.expose
def delete_program(self, filename=None, editor=None, overwrite=0, delete1=0, delete2=0):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    else:       
        if delete1 == "1" and delete2 == "1" and os.path.isfile(data_dir+"/brython_programs/"+filename):
            os.remove(data_dir+"/brython_programs/"+filename)
            return str(filename)+" deleted!&lt;br /&gt;"
        elif not os.path.isfile(data_dir+"/brython_programs/"+filename):
            return str(filename)+" does not exist!&lt;br /&gt;"
        else:
            return "can not delete "+str(filename)+"!"
            
</t>
<t tx="2014pythonE.20140329072748.2053">@cherrypy.expose
def ucrobot(self):
    return '''
&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
        &lt;/head&gt;
	&lt;body style="overflow:auto; margin:0; padding:0;position:relative"&gt;
		&lt;div id="container" onclick="this.focus();"&gt;&lt;/div&gt;
		&lt;div id="grading"&gt;&lt;/div&gt;
&lt;script type="text/javascript" src="/static/threejs/Detector.js"&gt;&lt;/script&gt;
		&lt;script type="text/javascript"&gt;
		if ( ! Detector.webgl ) { 
				Detector.addGetWebGLMessage();
		}
		&lt;/script&gt;
		&lt;script type="text/javascript" src="/static/threejs/three.min.js"&gt;&lt;/script&gt;
          &lt;script type="text/javascript" src="/static/threejs/Coordinates.js"&gt;&lt;/script&gt;
		&lt;script type="text/javascript" src="/static/threejs/OrbitAndPanControls.js"&gt;&lt;/script&gt;
		&lt;script type="text/javascript" src="/static/threejs/dat.gui.min.js"&gt;&lt;/script&gt;
		&lt;script type="text/javascript" src="/static/threejs/demo.js"&gt;&lt;/script&gt;

&lt;/body&gt;&lt;/html&gt;
'''
</t>
<t tx="2014pythonE.20140415145042.1959">@cherrypy.expose
def calc(self, item_per_page=5, page=1, keyword=None, filename=None, *args, **kwargs):
    part1 = '''
&lt;!DOCTYPE html&gt; 
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;script type="text/javascript" src="/static/Brython3.2.0-20150701-214155/brython.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalcconstants.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalc-3.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalctableeditor.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/formatnumber2.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/formula1.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalcpopup.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalcspreadsheetcontrol.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalcviewer.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
function getradio(tagname){
var radios = document.getElementsByName(tagname);
for (var i = 0, length = radios.length; i &lt; length; i++) {
    if (radios[i].checked) {
        // do whatever you want with the checked radio
        return radios[i].value;
        // only one radio can be logically checked, don't check the rest
        break;
      }
   }
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython({debug:1, cache:'version'})"&gt;
&lt;div id="tableeditor" style="margin:8px 0px 10px 0px;"&gt;editor goes here&lt;/div&gt;
&lt;div id="msg" onclick="this.innerHTML='&amp;nbsp;';"&gt;&lt;/div&gt;

&lt;script id="ascript" type="text/python"&gt;
from browser import ajax, document as doc, alert, websocket
from javascript import JSConstructor
from browser import window

spreadsheet =  JSConstructor(window.SocialCalc.SpreadsheetControl)()
savestr = ""
spreadsheet.InitializeSpreadsheetControl("tableeditor")
spreadsheet.ExecuteCommand('redisplay', '')

overwrite = 0
# add delete_program 1/7, seven steps to complete the ajax task, the last step is to add delete_program function on server
# delete1 and delete2 parameters are also added into save_program function.
delete1 = 0
delete2 = 0

def set_overwrite(ev):
    global overwrite
    if ev.target.checked:
        overwrite = 1
    else:
        overwrite = 0

# add delete_program 2/7, client side add set_delete1 and set_delete2 functions.
def set_delete1(ev):
    global delete1
    if ev.target.checked:
        delete1 = 1
    else:
        delete1 = 0

def set_delete2(ev):
    global delete2
    if ev.target.checked:
        delete2 = 1
    else:
        delete2 = 0

def on_complete(req):
    print(req.readyState)
    print('status',req.status)
    if req.status==200 or req.status==0:
        doc["result"].html = req.text
    else:
        doc["result"].html = "error "+req.text

def err_msg():
    doc["result"].html = "server didn't reply after %s seconds" %timeout

timeout = 4

def go(url):
    req = ajax.ajax()
    req.bind('complete',on_complete)
    req.set_timeout(timeout,err_msg)
    req.open('GET',url,True)
    req.send()

def post(url):
    global spreadsheet
    sheet_content = spreadsheet.CreateSpreadsheetSave()
    req = ajax.ajax()
    req.bind('complete',on_complete)
    req.set_timeout(timeout,err_msg)
    req.open('POST',url,True)
    req.set_header('content-type','application/x-www-form-urlencoded')
    # add delete_program 3/7, two parameters added, this will also affect save_program function on server.
    req.send({'filename':doc["filename"].value, 'sheet_content':sheet_content, 'overwrite':overwrite, 'delete1':delete1, 'delete2':delete2})

def show_save(ev):
    global spreadsheet
    sheet_content = spreadsheet.CreateSpreadsheetSave()
    print(sheet_content)
    
def doreload(ev):
    global spreadsheet
    sheet_content = spreadsheet.CreateSpreadsheetSave()
    parts = spreadsheet.DecodeSpreadsheetSave(sheet_content)
    if (parts):
        if (parts.sheet):
            spreadsheet.sheet.ResetSheet()
            spreadsheet.ParseSheetSave(sheet_content[parts.sheet.start:parts.sheet.end])
        if (parts.edit):
            spreadsheet.editor.LoadEditorSettings(sheet_content[parts.edit.start:parts.edit.end])

    #if (spreadsheet.editor.context.sheetobj.attribs.recalc=="off"):
        #spreadsheet.ExecuteCommand('redisplay', '')
    #else:
    spreadsheet.ExecuteCommand('recalc', '')
    alert("reload done")

# get program from server
def get_prog(ev):
    # ajax can only read data from server
    _name = '/calc_programs/'+doc["filename"].value
    try:
        sheet_content = open(_name, encoding="utf-8").read()
        parts = spreadsheet.DecodeSpreadsheetSave(sheet_content)
        if (parts):
            if (parts.sheet):
                spreadsheet.sheet.ResetSheet()
                spreadsheet.ParseSheetSave(sheet_content[parts.sheet.start:parts.sheet.end])
            if (parts.edit):
                spreadsheet.editor.LoadEditorSettings(sheet_content[parts.edit.start:parts.edit.end])
        spreadsheet.ExecuteCommand('recalc', '')
        doc["result"].html = doc["filename"].value+" loaded!"
    except:
        doc["result"].html = "can not get "+doc["filename"].value+"!"

def get_radio(ev):
    filename = window.getradio("filename")
    # ajax can only read data from server
    doc["filename"].value = filename
    _name = '/calc_programs/'+filename
    try:
        sheet_content = open(_name, encoding="utf-8").read()
        parts = spreadsheet.DecodeSpreadsheetSave(sheet_content)
        if (parts):
            if (parts.sheet):
                spreadsheet.sheet.ResetSheet()
                spreadsheet.ParseSheetSave(sheet_content[parts.sheet.start:parts.sheet.end])
            if (parts.edit):
                spreadsheet.editor.LoadEditorSettings(sheet_content[parts.edit.start:parts.edit.end])
        spreadsheet.ExecuteCommand('recalc', '')
        doc["result"].html = doc["filename"].value+" loaded!"
    except:
        doc["result"].html = "can not get "+doc["filename"].value+"!"

# bindings
doc['get_prog'].bind('click', get_prog)
doc['get_radio'].bind('click', get_radio)
doc['doreload'].bind('click', doreload)
'''
    adm1 = '''
doc['save_program'].bind('click',lambda ev:post('save_calcprogram'))
# add delete_program 5/7, delete_program button bind to execute delete_program on server.
doc['delete_program'].bind('click',lambda ev:post('delete_calcprogram'))
doc['show_save'].bind('click', show_save)
doc['set_overwrite'].bind('change',set_overwrite)
# add delete_program 4/7, two associated binds added
doc['set_delete1'].bind('change',set_delete1)
doc['set_delete2'].bind('change',set_delete2)
'''
    # if load program through url
    if filename != None:
        load_program = '''
# ajax can only read data from server
_name = '/calc_programs/'''+filename+''''
try:
    sheet_content = open(_name, encoding="utf-8").read()
    parts = spreadsheet.DecodeSpreadsheetSave(sheet_content)
    if (parts):
        if (parts.sheet):
            spreadsheet.sheet.ResetSheet()
            spreadsheet.ParseSheetSave(sheet_content[parts.sheet.start:parts.sheet.end])
        if (parts.edit):
            spreadsheet.editor.LoadEditorSettings(sheet_content[parts.edit.start:parts.edit.end])
    spreadsheet.ExecuteCommand('recalc', '')
    doc["filename"].value = "'''+filename+'''"
    doc["result"].html = "'''+filename+''' loaded!"
except:
    doc["result"].html = "can not get '''+filename+'''!"
'''
    else:
        load_program = ""

    part2 = '''
&lt;/script&gt;
filename: &lt;input id="filename"&gt;
&lt;button id="get_prog"&gt;get prog file&lt;/button&gt;&lt;br /&gt;
&lt;div id="result"&gt;(empty)&lt;/div&gt;&lt;br /&gt;
&lt;button id="doreload"&gt;do reload&lt;/button&gt;
&lt;button id="get_radio"&gt;load selected program&lt;/button&gt;&lt;br /&gt;
'''
    adm2 = '''
&lt;button id="show_save"&gt;顯示內容&lt;/button&gt;
&lt;button id="save_program";&gt;save program&lt;/button&gt;
overwrite&lt;input type="checkbox" id="set_overwrite"&gt;
&lt;br /&gt;&lt;!-- add delete_program button and two double checkboxs 6/7 --&gt;
&lt;button id="delete_program"&gt;delete program&lt;/button&gt;
sure to delete1&lt;input type="checkbox" id="set_delete1"&gt;
sure to delete2&lt;input type="checkbox" id="set_delete2"&gt;&lt;br /&gt;
'''
    part3 = '''
&lt;/body&gt;
&lt;/html&gt;
'''
    # only admin can view and edit calc, we still need to find a way to protect programs on calc_programs
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
        # for not admin
        #return part1+load_program+part2+self.load_list(item_per_page, page, "calc")+part3
    else:
        # for admin
        return part1+adm1+load_program+part2+adm2+self.load_list(item_per_page, page, "calc")+part3

</t>
<t tx="2014pythonE.20140415145042.1961">@cherrypy.expose
def save_calcprogram(self, filename=None, sheet_content=None, overwrite=0, delete1=0, delete2=0):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    else:
        if overwrite == "1" or not os.path.isfile(data_dir+"/calc_programs/"+filename):
            # open file in wt will use Windows \r\n for new line
            # use replace method to remove extra lines for Windows environment
            with open(data_dir+"/calc_programs/"+filename, "wt", encoding="utf-8") as out_file:
                data = sheet_content.replace("\r\n", "\n")
                out_file.write(data)
            return str(filename)+" saved!&lt;br /&gt;"
        else:  
            return str(filename)+" exists! editor content not saved yet!&lt;br /&gt;"

 





</t>
<t tx="2014pythonE.20140416133807.1743">@cherrypy.expose
def delete_calcprogram(self, filename=None, sheet_content=None, overwrite=0, delete1=0, delete2=0):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    else:       
        if delete1 == "1" and delete2 == "1" and os.path.isfile(data_dir+"/calc_programs/"+filename):
            os.remove(data_dir+"/calc_programs/"+filename)
            return str(filename)+" deleted!&lt;br /&gt;"
        elif not os.path.isfile(data_dir+"/calc_programs/"+filename):
            return str(filename)+" does not exist!&lt;br /&gt;"
        else:
            return "can not delete "+str(filename)+"!"
            
</t>
<t tx="2014pythonE.20140418074836.2073">@cherrypy.expose
def openjscad(self, *args, **kwargs):
    return '''
&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"/&gt;
&lt;title&gt;OpenJSCAD.org&lt;/title&gt;
&lt;link rel="stylesheet" href="/jquery/themes/base/jquery-ui.css" /&gt;
&lt;script src="/jquery/jquery-1.9.1.js"&gt;&lt;/script&gt;
&lt;script src="/jquery/jquery-ui.js"&gt;&lt;/script&gt;
&lt;script src="/jquery/jquery.hammer.js"&gt;&lt;/script&gt;
&lt;link rel="stylesheet" href="/style.css" type="text/css"&gt;
&lt;link rel="stylesheet" href="/openjscad.css" type="text/css"&gt;
&lt;/head&gt;
&lt;body onload="onload()"&gt;
&lt;style&gt;
/* we choose chrome theme for ace, and make sure line number is transparent too */
/* this has to stay in the body (not head) otherwise does not take effect */
.ace-chrome .ace_gutter { 
   border-left: 2px dashed rgba(200,200,200,0.2);
   background: none;
}
.ace-chrome {
   font-size: 10pt;     // -- not 'px', but 'pt' for high dpi screens
}
&lt;/style&gt;
&lt;script src="/lightgl.js"&gt;&lt;/script&gt;
&lt;script src="/csg.js"&gt;&lt;/script&gt;
&lt;script src="/openjscad.js"&gt;&lt;/script&gt;
&lt;script src="/openscad.js"&gt;&lt;/script&gt;
&lt;script src="/underscore.js"&gt;&lt;/script&gt;
&lt;script src="/openscad-openjscad-translator.js"&gt;&lt;/script&gt;
&lt;script lang=JavaScript&gt;
var version = '0.017 (2014/02/14)';
var me = document.location.toString().match(/^file:/)?'web-offline':'web-online'; // me: {cli, web-offline, web-online}
var browser = 'unknown';
if(navigator.userAgent.match(/(opera|chrome|safari|firefox|msie)/i))
   browser = RegExp.$1.toLowerCase();

$(document).ready(function() {
   $("#viewer").height($(window).height());

   $(window).resize(function() {                // adjust the relevant divs
      $("#viewer").width($(window).width());
      $("#viewer").height($(window).height());
   });


});   
&lt;/script&gt;
&lt;div id="editor"&gt;// -- OpenJSCAD.org logo
function main(params)
{
  // Main entry point; here we construct our solid: 
  var gear = involuteGear(
    params.numTeeth,
    params.circularPitch,
    params.pressureAngle,
    params.clearance,
    params.thickness
  );
  if(params.centerholeradius &gt; 0)
  {
    var centerhole = CSG.cylinder({start: [0,0,-params.thickness], end: [0,0,params.thickness], radius: params.centerholeradius, resolution: 16});
    gear = gear.subtract(centerhole);
  }
  return gear;
}

// Here we define the user editable parameters: 
function getParameterDefinitions() {
  return [
    { name: 'numTeeth', caption: 'Number of teeth:', type: 'int', default: 15 },
    { name: 'circularPitch', caption: 'Circular pitch:', type: 'float', default: 10 },
    { name: 'pressureAngle', caption: 'Pressure angle:', type: 'float', default: 20 },
    { name: 'clearance', caption: 'Clearance:', type: 'float', default: 0 },
    { name: 'thickness', caption: 'Thickness:', type: 'float', default: 5 },
    { name: 'centerholeradius', caption: 'Radius of center hole (0 for no hole):', type: 'float', default: 2 },
  ];
}

/*
  For gear terminology see: 
    http://www.astronomiainumbria.org/advanced_internet_files/meccanica/easyweb.easynet.co.uk/_chrish/geardata.htm
  Algorithm based on:
    http://www.cartertools.com/involute.html

  circularPitch: The distance between adjacent teeth measured at the pitch circle
*/ 
function involuteGear(numTeeth, circularPitch, pressureAngle, clearance, thickness)
{
  // default values:
  if(arguments.length &lt; 3) pressureAngle = 20;
  if(arguments.length &lt; 4) clearance = 0;
  if(arguments.length &lt; 4) thickness = 1;
  
  var addendum = circularPitch / Math.PI;
  var dedendum = addendum + clearance;
  
  // radiuses of the 4 circles:
  var pitchRadius = numTeeth * circularPitch / (2 * Math.PI);
  var baseRadius = pitchRadius * Math.cos(Math.PI * pressureAngle / 180);
  var outerRadius = pitchRadius + addendum;
  var rootRadius = pitchRadius - dedendum;

  var maxtanlength = Math.sqrt(outerRadius*outerRadius - baseRadius*baseRadius);
  var maxangle = maxtanlength / baseRadius;

  var tl_at_pitchcircle = Math.sqrt(pitchRadius*pitchRadius - baseRadius*baseRadius);
  var angle_at_pitchcircle = tl_at_pitchcircle / baseRadius;
  var diffangle = angle_at_pitchcircle - Math.atan(angle_at_pitchcircle);
  var angularToothWidthAtBase = Math.PI / numTeeth + 2*diffangle;

  // build a single 2d tooth in the 'points' array:
  var resolution = 5;
  var points = [new CSG.Vector2D(0,0)];
  for(var i = 0; i &lt;= resolution; i++)
  {
    // first side of the tooth:
    var angle = maxangle * i / resolution;
    var tanlength = angle * baseRadius;
    var radvector = CSG.Vector2D.fromAngle(angle);    
    var tanvector = radvector.normal();
    var p = radvector.times(baseRadius).plus(tanvector.times(tanlength));
    points[i+1] = p;
    
    // opposite side of the tooth:
    radvector = CSG.Vector2D.fromAngle(angularToothWidthAtBase - angle);    
    tanvector = radvector.normal().negated();
    p = radvector.times(baseRadius).plus(tanvector.times(tanlength));
    points[2 * resolution + 2 - i] = p;
  }

  // create the polygon and extrude into 3D:
  var tooth3d = new CSG.Polygon2D(points).extrude({offset: [0, 0, thickness]});

  var allteeth = new CSG();
  for(var i = 0; i &lt; numTeeth; i++)
  {
    var angle = i*360/numTeeth;
    var rotatedtooth = tooth3d.rotateZ(angle);
    allteeth = allteeth.unionForNonIntersecting(rotatedtooth);
  }

  // build the root circle:  
  points = [];
  var toothAngle = 2 * Math.PI / numTeeth;
  var toothCenterAngle = 0.5 * angularToothWidthAtBase; 
  for(var i = 0; i &lt; numTeeth; i++)
  {
    var angle = toothCenterAngle + i * toothAngle;
    var p = CSG.Vector2D.fromAngle(angle).times(rootRadius);
    points.push(p);
  }

  // create the polygon and extrude into 3D:
  var rootcircle = new CSG.Polygon2D(points).extrude({offset: [0, 0, thickness]});

  var result = rootcircle.union(allteeth);

  // center at origin:
  result = result.translate([0, 0, -thickness/2]);

  return result;
}
&lt;/div&gt;

&lt;div oncontextmenu="return false;" id="viewer"&gt;&lt;/div&gt; &lt;!-- avoiding popup when right mouse is clicked --&gt;

&lt;div id="parametersdiv"&gt;&lt;/div&gt;
&lt;div id="tail"&gt;
&lt;div id="statusdiv"&gt;&lt;/div&gt;
&lt;div id="errordiv"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;!--&lt;script src="https://d1n0x3qji82z53.cloudfront.net/src-min-noconflict/ace.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;--&gt;
&lt;script src="https://d1n0x3qji82z53.cloudfront.net/src-min-noconflict/ace.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;script&gt;
var gProcessor = null;
var editor = null;
var _includePath = "/";

function onload() {
   // -- http://ace.ajax.org/#nav=howto
   editor = ace.edit("editor");
   editor.setTheme("ace/theme/chrome");
   //document.getElementById('ace_gutter').style.background = 'none';
   editor.getSession().setMode("ace/mode/javascript");
   editor.getSession().on('change', function(e) {});               
   ['Shift-Return'].forEach(function(key) {
      editor.commands.addCommand({
         name: 'myCommand',
         bindKey: { win: key, mac: key },
         exec: function(editor) {
            var src = editor.getValue();
            if(src.match(/^\/\/\!OpenSCAD/i)) {
               editor.getSession().setMode("ace/mode/scad");
               src = openscadOpenJscadParser.parse(src);
            } else {
               editor.getSession().setMode("ace/mode/javascript");
            }
            gMemFs = [];
            gProcessor.setJsCad(src);
         },
      });
   });
   
   gProcessor = new OpenJsCad.Processor(document.getElementById("viewer"));

   //gProcessor.setDebugging(debugging); 
   if(me=='web-online') {    // we are online, fetch first example
      gProcessor.setJsCad(editor.getValue());
   }
}

// Show all exceptions to the user:
OpenJsCad.AlertUserOfUncaughtExceptions();
&lt;/script&gt;
&lt;/body&gt;&lt;/html&gt; 
'''
</t>
<t tx="2014pythonE.20140420143435.2016">2014.06.20:

right now the openjscad can only use the following ace.js which is older than ace 1.0.0

https://d1n0x3qji82z53.cloudfront.net/src-min-noconflict/ace.js

on https://github.com/ajaxorg/ace-builds/releases we may download the official release version

BTW, /brython can use any ace.js version (the version is package 06.09.2014)</t>
<t tx="2014pythonE.20140420143435.2017">// title: Dodecahedron
// author: OpenSCAD, adapted by Rene K. Mueller

function dodecahedron(h) {  // from http://en.wikibooks.org/wiki/OpenSCAD_User_Manual/Commented_Example_Projects
   var c = cube({ size: [2,2,1], center: true });

   for(var i=0; i&lt;=4; i++) { // loop i from 0 to 4, and intersect results
      // make a cube, rotate it 116.565 degrees around the X axis,
      // then 72*i around the Z axis
      c = c.intersect(
         cube({size: [2,2,1], center: true}).
         rotateX(116.565).
         rotateZ(72*i)
      );
   }
   return scale([h,h,h],c); // scale by height parameter
}

function main() {
   return dodecahedron(30);
}</t>
<t tx="2014pythonE.20140420143435.2018">// title: Axis Coupler
// author: Joost Nieuwenhuijse
// license: MIT License

var cylresolution=16;

// Here we define the user editable parameters: 
function getParameterDefinitions() {
  return [
    {
      name: 'quality', 
      type: 'choice',
      caption: 'Quality',
      values: [0, 1],
      captions: ["Draft","High"], 
      initial: 0
    },    
  
    { name: 'diameter1', caption: 'Axis diameter of first coupler:', type: 'float', initial: 12.2 },
    { name: 'shaftlength1', caption: 'Axis depth of first coupler:', type: 'float', initial: 15 },
    { name: 'outerlength1', caption: 'Outer length of first coupler:', type: 'float', initial: 20 },
    { name: 'nutradius1', caption: 'Nut radius of first coupler:', type: 'float', initial: 4.65 },
    { name: 'nutthickness1', caption: 'Nut thickness of first coupler:', type: 'float', initial: 4.2},
    { name: 'screwdiameter1', caption: 'Screw diameter of first coupler:', type: 'float', initial: 5},
    { name: 'diameter2', caption: 'Axis diameter of second coupler:', type: 'float', initial: 9.5 },
    { name: 'shaftlength2', caption: 'Axis depth of second coupler:', type: 'float', initial: 10 },
    { name: 'outerlength2', caption: 'Outer length of second coupler:', type: 'float', initial: 15 },
    { name: 'nutradius2', caption: 'Nut radius of second coupler:', type: 'float', initial: 3.2 },
    { name: 'nutthickness2', caption: 'Nut thickness of second coupler:', type: 'float', initial: 2.6},
    { name: 'screwdiameter2', caption: 'Screw diameter of second coupler:', type: 'float', initial: 3},
    { name: 'outerdiameter', caption: 'Outer diameter:', type: 'float', initial: 30 },
    { name: 'spiderlength', caption: 'Spider thickness:', type: 'float', initial: 12 },
    { name: 'spidermargin', caption: 'Spider tolerance:', type: 'float', initial: 0 },
    { name: 'numteeth', caption: 'Num teeth per coupler:', type: 'int', initial: 2}
  ];
}

function main(params)
{
  cylresolution=(params.quality == "1")? 64:16;
 
  var outerdiameter=params.outerdiameter;
  outerdiameter=Math.max(outerdiameter, params.diameter1+0.5);
  outerdiameter=Math.max(outerdiameter, params.diameter2+0.5);

  var spidercenterdiameter=outerdiameter/2;
  
  var part1=makeShaft(params.diameter1, outerdiameter,spidercenterdiameter,params.shaftlength1,params.outerlength1,params.spiderlength, params.nutradius1, params.nutthickness1, params.screwdiameter1, params.numteeth);  
  var part2=makeShaft(params.diameter2, outerdiameter,spidercenterdiameter,params.shaftlength2,params.outerlength2,params.spiderlength, params.nutradius2, params.nutthickness2, params.screwdiameter2, params.numteeth);
  var spider=makeSpider(outerdiameter, spidercenterdiameter, params.spiderlength, params.numteeth);
  
  if(params.spidermargin &gt; 0)
  {
    spider=spider.contract(params.spidermargin, 4);
  }
  
  // rotate shaft parts for better 3d printing:
  part1=part1.rotateX(180).translate([0,0,params.outerlength1+params.spiderlength]);
  part2=part2.rotateX(180).translate([0,0,params.outerlength2+params.spiderlength]);
  
  var result=part1.translate([-outerdiameter-5,0,0]);
  result=result.union(part2.translate([0,0,0]));
  result=result.union(spider.translate([outerdiameter+5,0,-params.spidermargin]));
  return result;
}

function makeShaft(innerdiameter, outerdiameter, spidercenterdiameter, shaftlength, outerlength, spiderlength, nutradius, nutthickness, screwdiameter, numteeth)
{
  var result=CSG.cylinder({start:[0,0,0], end:[0,0,outerlength], radius:outerdiameter/2, resolution:cylresolution});
  
  for(var i=0; i &lt; numteeth; i++)
  {
    var angle=i*360/numteeth;
    var pie=makePie(outerdiameter/2, spiderlength,angle-45/numteeth, angle+45/numteeth); 
    pie=pie.translate([0,0,outerlength]);
    result=result.union(pie);
  }
  var spidercylinder=CSG.cylinder({start:[0,0,outerlength], end:[0,0,outerlength+spiderlength],radius:spidercenterdiameter/2,resolution:cylresolution});
  result=result.subtract(spidercylinder);
  var shaftcylinder=CSG.cylinder({start:[0,0,0], end:[0,0,shaftlength], radius:innerdiameter/2, resolution:cylresolution});
  result=result.subtract(shaftcylinder);
  
  var screwz=shaftlength/2;
  if(screwz &lt; nutradius) screwz=nutradius;  
  var nutcutout = hexagon(nutradius, nutthickness).translate([0,0,-nutthickness/2]);
  var grubnutradiusAtFlatSide = nutradius * Math.cos(Math.PI / 180 * 30);
  var nutcutoutrectangle = CSG.cube({
    radius: [outerlength/2, grubnutradiusAtFlatSide, nutthickness/2],
    center: [outerlength/2, 0, 0]
  });
  nutcutout = nutcutout.union(nutcutoutrectangle);
  nutcutout = nutcutout.rotateY(90);
  nutcutout = nutcutout.translate([(outerdiameter+innerdiameter)/4, 0, screwz]);
  result = result.subtract(nutcutout);
  
  var screwcutout=CSG.cylinder({
    start: [outerdiameter/2, 0, screwz],
    end: [0, 0, screwz],
    radius: screwdiameter/2, 
    resolution:cylresolution
  });
  result=result.subtract(screwcutout);
  
//return nutcutout; 
//  nutcutout = nutcutout.translate([-grubnutheight/2 - centerholeradius - nutdistance,0,0]);
  
  return result;
}

function makePie(radius, height, startangle, endangle)
{
  var absangle=Math.abs(startangle-endangle);
  if(absangle &gt;= 180)
  {
    throw new Error("Pie angle must be less than 180 degrees");
  }
  var numsteps=cylresolution*absangle/360;
  if(numsteps &lt; 1) numsteps=1;
  var points=[];
  for(var i=0; i &lt;= numsteps; i++)
  {
    var angle=startangle+i/numsteps*(endangle-startangle);
    var vec = CSG.Vector2D.fromAngleDegrees(angle).times(radius);
    points.push(vec);    
  }
  points.push(new CSG.Vector2D(0,0));
  var shape2d=new CSG.Polygon2D(points);
  var extruded=shape2d.extrude({
    offset: [0,0,height]   // direction for extrusion
  });
  return extruded;  
}

function hexagon(radius, height)
{
  var vertices=[];
  for(var i=0; i &lt; 6; i++)
  {
    var point=CSG.Vector2D.fromAngleDegrees(-i*60).times(radius).toVector3D(0);
    vertices.push(new CSG.Vertex(point));
  }
  var polygon=new CSG.Polygon(vertices);
  var hex=polygon.extrude([0,0,height]);
  return hex;
}

function makeSpider(outerdiameter, spidercenterdiameter, spiderlength, numteeth)
{
  var result=new CSG();
  var numspiderteeth=numteeth*2; // spider has twice the number of teeth
  for(var i=0; i &lt; numspiderteeth; i++)
  {
    var angle=i*360/numspiderteeth;
    var pie=makePie(outerdiameter/2, spiderlength,angle-90/numspiderteeth, angle+90/numspiderteeth); 
    pie=pie.translate([0,0,0]);
    result=result.union(pie);
  }

  var centercylinder=CSG.cylinder({start:[0,0,0], end:[0,0,spiderlength], radius:spidercenterdiameter/2, resolution:cylresolution});
  result=result.union(centercylinder);

  return result;
}
</t>
<t tx="2014pythonE.20140420143435.2019">// title: Bunch of Cubes
// author: Rene K. Mueller
// license: MIT License
// description: creating 100 cubes in space ...

var cubes = new Array();

function main() {
   for(var i=0; i&lt;100; i++) {
      cubes[i] = translate([
         150*Math.random()-75,
         150*Math.random()-75,
         150*Math.random()-75],
         cube(5).
            setColor(hsl2rgb(Math.random()*0.2+0.7,1,0.5)));
   }
   return cubes;
}</t>
<t tx="2014pythonE.20140420143435.2020">// title: Celtic Knot Ring
// author: Joost Nieuwenhuijse
// license: MIT License
// tags: Catmull Spline

// -*- mode: javascript; -*-


'use strict';

function getParameterDefinitions() {
  return [
    {
      name: 'hisorhers', 
      type: 'choice',
      caption: 'For Daniel or Zette:',
      values: [0, 1],
      captions: ["Dan", "Suzette"], 
      initial: 0
    }
   ];
}


var his = true;


var debugcount = 10;
function debugprint () {
    if (debugcount-- &gt; 0) {
    try {
        console.log(arguments);
    } catch (err) {
        //
    }
    }
}


// interpolate between v2 and v3, at time u
function catmullRom(v1, v2, v3, v4, u) {
    var c1x,c2x,c3x,c4x, resX;
    var c1y,c2y,c3y,c4y, resY;
    var c1z,c2z,c3z,c4z, resZ;

    // Coefficients for Matrix M
    // these should all be const, but MSIE doens't handle that
    var M11 = 0.0;
    var M12 = 1.0;
    var M13 = 0.0;
    var M14 = 0.0;
    var M21 =-0.5;
    var M22 = 0.0;
    var M23 = 0.5;
    var M24 = 0.0;
    var M31 = 1.0;
    var M32 =-2.5;
    var M33 = 2.0;
    var M34 =-0.5;
    var M41 =-0.5;
    var M42 = 1.5;
    var M43 =-1.5;
    var M44 = 0.5;
    
    c1x =            M12*v2.x;
    c2x = M21*v1.x            + M23*v3.x;
    c3x = M31*v1.x + M32*v2.x + M33*v3.x + M34*v4.x;
    c4x = M41*v1.x + M42*v2.x + M43*v3.x + M44*v4.x;
    
    c1y =            M12*v2.y;
    c2y = M21*v1.y            + M23*v3.y;
    c3y = M31*v1.y + M32*v2.y + M33*v3.y + M34*v4.y;
    c4y = M41*v1.y + M42*v2.y + M43*v3.y + M44*v4.y;
    
    c1z =            M12*v2.z;
    c2z = M21*v1.z            + M23*v3.z;
    c3z = M31*v1.z + M32*v2.z + M33*v3.z + M34*v4.z;
    c4z = M41*v1.z + M42*v2.z + M43*v3.z + M44*v4.z;
    
    resX = (((c4x*u + c3x)*u +c2x)*u + c1x);
    resY = (((c4y*u + c3y)*u +c2y)*u + c1y);
    resZ = (((c4z*u + c3z)*u +c2z)*u + c1z);
    
    return new CSG.Vector3D(resX, resY, resZ);
}

var tiny = 0.0000001;

function catmullRomWithTangent(v1, v2, v3, v4, u) {
    var res1, res2, tangent;
    if ((u+tiny) &lt;= 1) {
    res1 = catmullRom(v1, v2, v3, v4, u) ;
    res2 = catmullRom(v1, v2, v3, v4, u+tiny) ;
    tangent = res2.minus(res1).unit();
    return [res1, tangent];
    } else {
    res1 = catmullRom(v1, v2, v3, v4, u-tiny) ;
    res2 = catmullRom(v1, v2, v3, v4, u) ;
    tangent = res2.minus(res1).unit();
    return [res2, tangent];
    }
}



// create a CSG by dragging a CAG along a Catmull-Rom spline
// where the 'top' of the CAG is 'up' and 'sideways' of
// the CAG are perpendicular to 'up' and the spline tangent


function splineExtrude(vCP, numInterps, up, 
               cag, transform) {
    var polygons = [];
    var splinePointsAndTangents = [];
    // corners is an array of arrays

    // corners [j] corresponds to the array of all points on the
    // spline with the offset of cag.sides[j].vertex0
    
    // corners[j][i] is the i'th interpolated point on the master
    // spline, plus the offset of cag.sides[j].vertex0

    var corners = [];
    var nSides = cag.sides.length;

    for (i=0; i&lt; nSides; i++) {
    corners.push([]);
    }

    if (typeof(transform) != 'function') {
    transform = function(e) { return e; };
    }
    
    // fencepost - do the zeroth point of the zeroth segment
    splinePointsAndTangents.push(catmullRomWithTangent(vCP[0],vCP[0+1],
                               vCP[0+2],vCP[0+3],0));
    for (var j = 0; j &lt;= vCP.length-4; j++) {
    // don't do the zeroth point, because it's the same as the
    // last point of the previous segment
    for (var i = 1; i &lt;= numInterps; i++) {
        var u = i/numInterps;
        splinePointsAndTangents.push(catmullRomWithTangent(vCP[j],vCP[j+1],
                                   vCP[j+2],vCP[j+3],u));
    }
    }
    

    for (var m=0; m &lt; splinePointsAndTangents.length; m++) {
    var sideways = up.cross(splinePointsAndTangents[m][1]);
    for (var n = 0; n &lt; nSides; n++) {
        corners[n].push(transform(splinePointsAndTangents[m][0]
                      .plus(sideways.times(cag.sides[n].vertex0.pos.x))
                      .plus(up.times(cag.sides[n].vertex0.pos.y))));
        
        // vertex1 should be the same as vertex0 of the next side,
        // so I don't need to handle it here
    }
    }
    var shared = CSG.Polygon.defaultShared;
    
    var start = 0;
    var end = corners[0].length-1;
    var nCorners = corners[0].length;

    

    //start cap
    var startCap = [];
    for (var p =nSides-1; p&gt;=0; p--) {
    startCap.push(corners[p][start]);
    }
    polygons.push(CSG.Polygon.createFromPoints(startCap, shared));

//    polygons.push(CSG.Polygon.createFromPoints([corners4[start],corners3[start],
//                        corners2[start],corners1[start]],
//                           shared));
    for (var q = start; q &lt; end; q++) { 

    // This is done as triangles, (rather than rectangles) because
    // at points on the spline with high curvature, the inside
    // corners can become twisted, which messes up the
    // renderer. What I don't know is what happens when such a
    // file is converted to STL and sent to a 3D printer.  

    // In the words of Shapeways, it makes the printer cry.

    for (var r = 0; r &lt; nSides; r++) {

        polygons.push(CSG.Polygon.createFromPoints([corners[r][q],  corners[(r+1)%nSides][q],
                                                corners[r][q+1]],
                                shared));
        polygons.push(CSG.Polygon.createFromPoints([              corners[(r+1)%nSides][q],
                                corners[(r+1)%nSides][q+1],corners[r][q+1]],
                               shared));
    }
    }
    var endCap = [];
    for (var s =0; s&lt; nSides; s++) {
    endCap.push(corners[s][end]);
    }
    polygons.push(CSG.Polygon.createFromPoints(endCap, shared));

    return CSG.fromPolygons(polygons);
}


var controlPoints = 
    [
    [0,     0,  1, 1],   //over across the middle
    [10,  10, -1, 0],  //under the first cross
    [20,  20,  1, 1],   //over the second cross
//  [30,  24,  0, 0],   //curving into the corner
    [39,  27.25,  0, 1],   // the sharp corner
//  [32,  12,  0, 0],
    [30,  10, -1, 0],
//  [28,  8,   0, 0],  
    [20,  3.75,   0, 0],  // bottom of loop under the corner
    [10,  10,  1, 1],
    [4,   20,  0, 0], // grand curve near the sharp corner (under the long arc)
////    [6,   26,  0, 0],
//  [8,   28,  0, 0],
    [10,  30, -1, 0],
    [24,  34,  0, 0],
//  [30,  35,  0, 0], // top of the long arc
    [40,  34,  0, 0],
    [50,  30,  1, 1], // about where the long arc crosses over
//  [58,  22,  0, 0], 
    [60,  20, -1, 0],
    [70,  10,  1, 1],
    [75,  5,  0, 0],
    [80,  0,  -1, 0]
//  [79.9, .1, -1, 0]   // under the middle (2 cycles right)
//  [79.95, .05, -1, 0]   // under the middle (2 cycles right)
];

var numberOfPatterns = 11;
var circumference = 40 * numberOfPatterns;
var radius = circumference / 2 / Math.PI;
var targetCircumference = his?54.3:56.3;


function main (params) {
    his = (params.hisorhers != 1);
    targetCircumference = his?54.3:56.3;

    var up = new CSG.Vector3D(0,0,1);
    var flipCP = controlPoints.slice();
    flipCP.reverse();
    flipCP = flipCP.map(function(elt) { return ([elt[0]*-1, elt[1]*-1, 
                         elt[2],    elt[3]]); });
    // delete the repeated 0,0 point;
    controlPoints.shift();
    controlPoints = flipCP.concat(controlPoints);
    if (!his) {
    controlPoints = controlPoints.map(function(elt) { 
        return ([elt[0], elt[1]*-1, 
             elt[2]*-1,    elt[3]]); });
    }
    var splines = [];
    var lastPoint ;
    var tripleCP = [];
    // one extra cycle before and after
    for (var i=-1; i&lt;numberOfPatterns+1; i++) {
//    for (var i=-1; i&lt;4+1; i++) {
    tripleCP = tripleCP.concat(controlPoints.map(
        function(elt) { return ([elt[0]+(i*160), elt[1], 
                     elt[2], elt[3]]); }));
    // delete final point so it's not duplicated
    lastPoint = tripleCP.pop();
    }
    // put final point back after the last spline
    tripleCP.push(lastPoint);

    // delete all but last two points of the extra cycle 
    // ie. the start/end point and the extra control point
    for (var t=0; t &lt; controlPoints.length-2; t++) {
    tripleCP.pop();
    tripleCP.shift();
    }

    debugprint(tripleCP);
    var vCP = tripleCP.map(function(e) {
    return new CSG.Vector3D(e[0],e[1],e[2]); 
    });

    var shape1 = CAG.fromPoints([[-4,0], 
                 [-4,5.0], [-1.5,8.5],  
                 [1.55,8.5], [4, 5.0], 
                 [4,0]]);

    // var shape1 = CAG.fromPoints([[-2.75,0], [0,2.75], [2.75,0]]);
    splines.push(splineExtrude(vCP, 11, up, shape1, transformVec3DtoRingSpace));
//        splines.push(splineExtrude(vCP, 11, up, shape1));
    var csg = new CSG();
    for (var u=0; u &lt; splines.length; u++) {
    csg = csg.union(splines[u]);
    }

    csg = csg.transform(CSG.Matrix4x4.rotationX(90));
    csg = csg.scale(targetCircumference/circumference);    
    return csg;

// 7.5 ring size is 17.7 mm diameter 55.7mm circumference
// my guess as to my own ring size is 54mm

// augh! the pass-under bits are 1 pre-scaled unit narrower 
// (after scaling, about 1/8 mm, so .4 mm in extra circumference.
}

function transformVec3DtoRingSpace (vec) {
    var m = new CSG.Matrix4x4();

    m = m.multiply(CSG.Matrix4x4.translation([-vec.x, 0, radius]));
    m = m.multiply(CSG.Matrix4x4.rotationY(360*(vec.x)/circumference));
    var res = vec.transform(m);
    return res;
}

// Question: polygons are supposed to be coplanar vertices, but after
// being transformed into ring space, are 4 coplanar vertices still
// always coplanar?  I'm pretty sure the answer is 'No'.  Does this matter?
// I think yes.  So I can generate triangles instead, easily enough.
// Excpet the end caps... which for my model are not actually rotated, 
// because they are at the origin or exactly 11 loops away.


</t>
<t tx="2014pythonE.20140420143435.2021">// title: Center
// author: Rene K. Mueller
// description: testing all the different options of the OpenSCAD-like OpenJSCAD functions (aside of the strict object oriented approaches)

function main() {
   var o = [];

   pos = function(p) {
      o.push(
         union(
            cube({size: [2,0.05,0.05], center: [false,true,true]}).setColor(1,0,0), 
            cube({size: [2,0.05,0.05], center: [false,true,true]}).setColor(1,0,0).rotateY(-90), 
            cube({size: [2,0.05,0.05], center: [false,true,true]}).setColor(1,0,0).rotateZ(90), 
            p
         )
      );
   }
   pos(cube());
   pos(cube(1.5));
   pos(cube({size: 0.8}));
   pos(cube({size: [1,2,3]}));
   pos(cube({size: [1,2,3], center: true}));
   pos(cube({size: [1,2,3], center: [true,true,false]}));
   pos(cube({size: [1,2,3], round: true, center: [true,true,false]}));
   pos(cube({size: [1,2,3], round: true, center: [true,true,false]}).setColor(1,1,0));

   pos(sphere());
   pos(sphere(0.8));
   pos(sphere({r: 1.1}));
   pos(sphere({r: 1, center: false}));
   pos(sphere({r: 1, center: [true, true, false]}));
   pos(sphere({r: 1, fn: 10}));
   pos(sphere({r: 1, fn: 32}).setColor([1,1,0]));
   pos(cube({size: 0.01, center: true}));
   
   pos(cylinder());
   pos(cylinder({r:1, h: 4}));
   pos(cylinder({r:1, h: 4, center: true}));
   pos(cylinder({r:1, h: 4, center: [true,true,false]}));
   pos(cylinder({r1:1, r2:0, h: 4, center: [false,false,true]}));
   pos(cylinder({r: 1, start: [0,0,0], end:[1,1,4], center: [true,true,false]}));
   pos(color("yellow",cylinder({r: 1, start: [0,0,0], end:[1,1,4], center: [true,true,false]})));
   pos(cube({size: 0.01, center: true}));

   for(var i=0; i&lt;o.length; i++) {
      o[i] = o[i].translate([(i%8)*3,Math.floor(i/8)*4,0]);
   }

   return o;
}
</t>
<t tx="2014pythonE.20140420143435.2022">// title: Chain Hull
// author: Rene K. Mueller
// date: 2013/04/18
// description: Whosa whatsis suggested "Chain Hull" as described at 
//    https://plus.google.com/u/0/105535247347788377245/posts/aZGXKFX1ACN

function main() {
   var o = [], p = [];
   
   for(var i=0; i&lt;12; i++) {           // -- shell like
      var x = sin(i/12*180)*10;
      var y = cos(i/12*180)*10;
      o.push(circle({center: true}).scale(6-i/2).translate([x,y,0]));
   }

   var n = 6;
   for(var i=0; i&lt;n; i++) {            // -- hexagon chain hulled
      var x = sin(i/n*360)*10;
      var y = cos(i/n*360)*10;
      p.push(circle({center: true}).translate([x,y,0]));
   }

   return [
      linear_extrude({height: 5}, chain_hull(o)).translate([-20,0,0]), 
      chain_hull(o), 
      union(o).translate([20,0,0]),

      linear_extrude({height: 5}, chain_hull({closed: true}, p)).translate([-25,40,0]), 
      chain_hull({closed: true}, p).translate([0,40,0]),
      union(p).translate([25,40,0])
   ];
}
</t>
<t tx="2014pythonE.20140420143435.2023">// title: Colors
// author: Rene K. Mueller
// license: MIT License
// tags: RGB, RGBA

function spread() {
   var a = Array.prototype.slice.call(arguments);
   var p = null;
   var type = 'linear';
   var spacing = 1;
   
   if(a[0].type) p = a.shift();        // first argument { type: 'something' }?
   if(a[0].length) a = a[0];           // element is an array?
   if(p&amp;&amp;p.type) type = p.type;
   if(p&amp;&amp;p.spacing) spacing = p.spacing;
   
   if(type=='circular') {
      ;
      
   } else {
      var rows = Math.floor(Math.sqrt(a.length));
      if(p&amp;&amp;p.rows) rows = p.rows;
      if(rows&lt;1) rows = 1;
      for(i=0; i&lt;a.length; i++) {
         a[i] = a[i].translate([(i%rows)*spacing,Math.floor(i/rows)*spacing,0]);
      }
   }
   return a;
}

function main() {
   var o = [];
   
   o.push( color([1,0,0],sphere()) );
   o.push( color([0,1,0],cube()) );
   o.push( color([0,0,1],cylinder()) );

   o.push( color("red",sphere()) );
   o.push( color("green", cube()) );
   o.push( color("blue", cylinder()) );

   for(var i=0; i&lt;1; i+=1/12) {
      o.push( cube().setColor(hsl2rgb(i,1,0.5)) );
   }
   return spread({type: 'linear', spacing: 3, rows: 3}, o);
}
</t>
<t tx="2014pythonE.20140420143435.2024">// title: Example 001
// author: OpenSCAD.org
// description: example001.scad ported to OpenJSCAD.org

function r_from_dia(d) { return d / 2; }

function rotcy(rot, r, h) {
	return rotate(90, rot,
		cylinder({r: r, h: h, center: true}));
}

function example001() {
	var size = 50;
	var hole = 25;
	var cy_r = r_from_dia(hole);
	var cy_h = r_from_dia(size * 2.5);

	return difference(
		sphere({r: r_from_dia(size)}),
		rotcy([0, 0, 0], cy_r, cy_h),
		rotcy([1, 0, 0], cy_r, cy_h),
		rotcy([0, 1, 0], cy_r, cy_h)
	);
}

function main() {
	return example001();
}
</t>
<t tx="2014pythonE.20140420143435.2025">// title: Example 002
// author: OpenSCAD.org
// description: example001.scad ported to OpenJSCAD.org

function example002() {
	return intersection(
		difference(
			union(
				cube({size: [30, 30, 30], center: true}),
				translate([0, 0, -25],
					cube({size: [15, 15, 50], center: true}))
			),
			union(
				cube({size: [50, 10, 10], center: true}),
				cube({size: [10, 50, 10], center: true}),
				cube({size: [10, 10, 50], center: true})
			)
		),
		translate([0, 0, 5],
			cylinder({h: 50, r1: 20, r2: 5, center: true}))
	);
}

function main() {
  return example002();
}
</t>
<t tx="2014pythonE.20140420143435.2026">// title: Example 003
// author: OpenSCAD.org
// description: example001.scad ported to OpenJSCAD.org

function example003() {
	return difference(
		union(
			cube({size: [30, 30, 30], center: true}),
			cube({size: [40, 15, 15], center: true}),
			cube({size: [15, 40, 15], center: true}),
			cube({size: [15, 15, 40], center: true})
		),
		union(
			cube({size: [50, 10, 10], center: true}),
			cube({size: [10, 50, 10], center: true}),
			cube({size: [10, 10, 50], center: true})
		)
	);
}

function main() {
   return example003();
}</t>
<t tx="2014pythonE.20140420143435.2027">// title: Example 004
// author: OpenSCAD.org
// description: example001.scad ported to OpenJSCAD.org

function example004() {
	return difference(
		cube({size: 30, center: true}),
		sphere(20)
	);
}

function main() {
   return example004();
}
</t>
<t tx="2014pythonE.20140420143435.2028">// title: Example 005
// author: OpenSCAD.org
// description: example001.scad ported to OpenJSCAD

function example005() {
   var cy = new Array();
   for(var i = 0; i&lt;=5; i++) {
      //echo(360*i/6, sin(360*i/6)*80, cos(360*i/6)*80);
      cy[i] = translate([sin(360*i/6)*80, cos(360*i/6)*80, 0 ],
         cylinder({h: 200, r: 10}));
   }
   return translate([0, 0, -120],
      union(
         difference(
            cylinder({h: 50, r: 100}),
            translate([0, 0, 10], cylinder({h: 50, r: 80})),
            translate([100, 0, 35], cube({size: 50, center: true}))
         ),
         cy,
         translate([0, 0, 200],
            cylinder({h: 80, r1: 120, r2: 0}))
      )
   );
}

function main() {
   return example005().scale(1/3);
}</t>
<t tx="2014pythonE.20140420143435.2029">// title: Expand()

function main() {
   return union(
      expand(0.2,8, 
         difference(cube(2),translate([0.3,-0.3,0.3], cube(2)))),
         difference(cube(2),translate([0.3,-0.3,0.3], cube(2))).translate([-4,0,0]),
      
      expand(0.3,8, cube(2)).translate([0,-3,0]),
         cube(2).translate([-4,-3,0]),

      expand(0.3,4, cylinder({r: 1, h: 2, fn: 16})).translate([0,4,0]),
         cylinder({r: 1, h: 2}).translate([-4,4,0])
   ).scale(10);
}</t>
<t tx="2014pythonE.20140420143435.2030">// title: Gear
// author: Joost Nieuwenhuijse
// license: MIT License

// Here we define the user editable parameters: 
function getParameterDefinitions() {
  return [
    { name: 'numTeeth', caption: 'Number of teeth:', type: 'int', initial: 10 },
    { name: 'circularPitch', caption: 'Circular pitch:', type: 'float', initial: 5 },
    { name: 'pressureAngle', caption: 'Pressure angle:', type: 'float', initial: 20 },
    { name: 'clearance', caption: 'Clearance:', type: 'float', initial: 0 },
    { name: 'thickness', caption: 'Thickness:', type: 'float', initial: 5 },
    { name: 'centerholeradius', caption: 'Radius of center hole (0 for no hole):', type: 'float', initial: 2 }
  ];
}

// Main entry point; here we construct our solid: 
function main(params)
{
  var gear = involuteGear(
    params.numTeeth,
    params.circularPitch,
    params.pressureAngle,
    params.clearance,
    params.thickness
  );
  if(params.centerholeradius &gt; 0)
  {
    var centerhole = CSG.cylinder({start: [0,0,-params.thickness], end: [0,0,params.thickness], radius: params.centerholeradius, resolution: 16});
    gear = gear.subtract(centerhole);
  }
  return gear;
}

/*
  For gear terminology see: 
    http://www.astronomiainumbria.org/advanced_internet_files/meccanica/easyweb.easynet.co.uk/_chrish/geardata.htm
  Algorithm based on:
    http://www.cartertools.com/involute.html

  circularPitch: The distance between adjacent teeth measured at the pitch circle
*/ 
function involuteGear(numTeeth, circularPitch, pressureAngle, clearance, thickness)
{
  // default values:
  if(arguments.length &lt; 3) pressureAngle = 20;
  if(arguments.length &lt; 4) clearance = 0;
  if(arguments.length &lt; 4) thickness = 1;
  
  var addendum = circularPitch / Math.PI;
  var dedendum = addendum + clearance;
  
  // radiuses of the 4 circles:
  var pitchRadius = numTeeth * circularPitch / (2 * Math.PI);
  var baseRadius = pitchRadius * Math.cos(Math.PI * pressureAngle / 180);
  var outerRadius = pitchRadius + addendum;
  var rootRadius = pitchRadius - dedendum;

  var maxtanlength = Math.sqrt(outerRadius*outerRadius - baseRadius*baseRadius);
  var maxangle = maxtanlength / baseRadius;

  var tl_at_pitchcircle = Math.sqrt(pitchRadius*pitchRadius - baseRadius*baseRadius);
  var angle_at_pitchcircle = tl_at_pitchcircle / baseRadius;
  var diffangle = angle_at_pitchcircle - Math.atan(angle_at_pitchcircle);
  var angularToothWidthAtBase = Math.PI / numTeeth + 2*diffangle;

  // build a single 2d tooth in the 'points' array:
  var resolution = 5;
  var points = [new CSG.Vector2D(0,0)];
  for(var i = 0; i &lt;= resolution; i++)
  {
    // first side of the tooth:
    var angle = maxangle * i / resolution;
    var tanlength = angle * baseRadius;
    var radvector = CSG.Vector2D.fromAngle(angle);    
    var tanvector = radvector.normal();
    var p = radvector.times(baseRadius).plus(tanvector.times(tanlength));
    points[i+1] = p;
    
    // opposite side of the tooth:
    radvector = CSG.Vector2D.fromAngle(angularToothWidthAtBase - angle);    
    tanvector = radvector.normal().negated();
    p = radvector.times(baseRadius).plus(tanvector.times(tanlength));
    points[2 * resolution + 2 - i] = p;
  }

  // create the polygon and extrude into 3D:
  var tooth3d = new CSG.Polygon2D(points).extrude({offset: [0, 0, thickness]});

  var allteeth = new CSG();
  for(var j = 0; j &lt; numTeeth; j++)
  {
    var ang = j*360/numTeeth;
    var rotatedtooth = tooth3d.rotateZ(ang);
    allteeth = allteeth.unionForNonIntersecting(rotatedtooth);
  }

  // build the root circle:  
  points = [];
  var toothAngle = 2 * Math.PI / numTeeth;
  var toothCenterAngle = 0.5 * angularToothWidthAtBase; 
  for(var k = 0; k &lt; numTeeth; k++)
  {
    var angl = toothCenterAngle + k * toothAngle;
    var p1 = CSG.Vector2D.fromAngle(angl).times(rootRadius);
    points.push(p1);
  }

  // create the polygon and extrude into 3D:
  var rootcircle = new CSG.Polygon2D(points).extrude({offset: [0, 0, thickness]});

  var result = rootcircle.union(allteeth);

  // center at origin:
  result = result.translate([0, 0, -thickness/2]);

  return result;
}
</t>
<t tx="2014pythonE.20140420143435.2031">// title: iPhone 4 Dock
// author: Joost Nieuwenhuijse

/*

OpenJsCad script for iPhone 4 dock
Note: not tried printing yet, not sure if it really wil fit.

To create the STL file, launch Google Chrome and go to:
http://joostn.github.com/OpenJsCad/processfile.html or http://openjscad.org

Then drag&amp;drop this file into the page

OpenJsCad is an open source 3d solid modeling tool using JavaScript.
For more information see http://joostn.github.com/OpenJsCad

*/

function getParameterDefinitions() {
  return [
    {
      name: 'quality', 
      type: 'choice',
      caption: 'Quality:',
      values: ["draft", "smooth", "supersmooth"],
      captions: ["Draft (no rounded corners)", "Smooth (rounded corners)", "Super smooth (rounded corners)"], 
      initial: "draft"
    },
    {
      name: 'iphonemargin', 
      type: 'float', 
      initial: 0.5,
      caption: "Margin around iphone (in mm):"
    },
    {
      name: 'plugmargin', 
      type: 'float', 
      initial: 0.25,
      caption: "Margin around dock connector (in mm):"
    },
    { name: 'mouseear', caption: 'Add mouse ear:', type: 'choice', values: [0, 1], initial: 1, captions: ["No", "Yes"]}
  ];
}

function main(params)
{  
  var resolution = 16;  // resolution for all the curved surfaces
  var smoothing = (params.quality != "draft"); // set to false during development, for fast rendering
  var draft = (params.quality != "supersmooth");     // set to false for high resolution smoothing, rendering will take several minutes!

  var x1=40, x2=25, x3=8;
  var y1=35, y2=y1+8, y3=y2+25;
  var frontheight = 30;
  
  // Build the base from two 2D polygons:
  var base1=new CSG.Polygon2D([[0,0],[x1,0],[x1,y1],[x2,y2],[0,y2]]);
  var base2=new CSG.Polygon2D([[0,y2],[x2,y2],[x3,y3],[0,y3]]);
  var extruded1=base1.extrude({offset: [0, 0,frontheight]});
  var extruded2=base2.extrude({offset: [0, 0,frontheight]});
  // We now have the right half; mirror to create the left half:
  extruded1 = extruded1.union(extruded1.mirroredX());
  extruded2 = extruded2.union(extruded2.mirroredX());
  var base = extruded1.union(extruded2);
  
  // Make the top back surface slightly slanted:
  var backtopplane = CSG.Plane.fromNormalAndPoint([0, 8, 10], [0, y2, frontheight]);
  base = base.cutByPlane(backtopplane);
  
  // Make the front surface slightly slanted:
  var frontplane = CSG.Plane.fromNormalAndPoint([0, -10, 2], [0, 0, 0]);
  base = base.cutByPlane(frontplane);
  
  // Add a CSG.Connector to the base, at the point where the iphone should
  // rest in the base. The connector's axis points upwards and its normal
  // points towards the front:
  var recessionDepth = 10;
  var distanceFromFront = 20;
  var angle = 15;
  base.properties.iphoneConnector = new CSG.Connector(
    [0, distanceFromFront, frontheight - recessionDepth],  // the point
    [0, 0, 1],  // axis vector
    [1, 0, 0]  // normal vector
  );
  // rotate the base.properties.iphoneConnector, so that the iphone will be tilted: 
  var rotmaxtrix = CSG.Matrix4x4.rotation(base.properties.iphoneConnector.point, [1, 0, 0], angle);
  base.properties.iphoneConnector = base.properties.iphoneConnector.transform(rotmaxtrix);
   
  // Create iphone placeholder (it's just a cube with the iphone's dimensions):
  var iphoneradius = new CSG.Vector3D(58.6/2 + params.iphonemargin, 9.4/2 + params.iphonemargin, 115/2); 
  var iphone = CSG.cube({radius: iphoneradius});
  
  // Create the little tab behind the iphone:
  var tabradius = new CSG.Vector3D(15, 5, 12); 
  var tab = CSG.cube({radius: tabradius});
  tab = tab.translate([0, (iphoneradius.y+tabradius.y), (-iphoneradius.z+tabradius.z)]);
  
  // Add a CSG.Connector to the iphone's properties. This is the place where the 
  // 30 pin dock plug will snap in. In this case it is the center of the bottom
  // Z plane of the cube. Since the cube already has 6 predefined connectors
  // at the center of each face, we can just use one of those instead of creating
  // a new CSG.Connector:
  iphone.properties.dockConnector = iphone.properties.cube.facecenters[5];

  // transform the iphone so it sits in the base:
  var iphoneTransformation = iphone.properties.dockConnector.getTransformationTo(base.properties.iphoneConnector, true, 0); 
  iphone = iphone.transform(iphoneTransformation);
  
  // transform the tab so it stays behind the iphone: 
  tab = tab.transform(iphoneTransformation);

  // and add the tab to the base:  
  base = base.union(tab);  

  // build the iphone plug:
  var plug = getIphoneDockConnector(params.plugmargin, resolution);
  
  // The plug has a predefined Connector plug.properties.iphoneConnector
  // To attach the plug to the iphone we connect plug.properties.iphoneConnector
  // to iphone.properties.dockConnector
  plug = plug.connectTo(plug.properties.iphoneConnector, 
    iphone.properties.dockConnector, true, 0);
  
  // We must make sure we can pull the USB cable through the dock. So there needs 
  // to be space for the plug. We just create a tall cube with the size of the USB
  // plug (8 by 40 mm), which will be subtracted from the dock's shape:
  var gapForUsbPlug = CSG.cube({radius: [8, 4, 40]});
  
  // Align it to the plug. Again, since gapForUsbPlug is a CSG.cube it already
  // has predefined CSG.Connectors at every face. Connect the Z face to the iphone: 
  gapForUsbPlug = gapForUsbPlug.connectTo(gapForUsbPlug.properties.cube.facecenters[5], 
    iphone.properties.dockConnector, true, 0);
  
//  return plug.union(iphone).union(gapForUsbPlug);
  
  //var cutout = plug.union(iphone).union(gapForUsbPlug);
  //return cutout;
  
  base = base.subtract(iphone);
  
  // make the cutout for the cable:
  var cablewidth = 3;
  var cableheight = 4; 
  var bottomplane = CSG.Plane.fromNormalAndPoint([0, 0, -1], [0, 0, 0]);
  var cableline = plug.properties.cableConnector.axisLine();
  var cableexitpoint = bottomplane.intersectWithLine(cableline);
  var cableentrypoint = new CSG.Vector3D(0, y3, 0);

  var cablepath = new CSG.Path2D([[cableentrypoint.x, cableentrypoint.y], [cableexitpoint.x, cableexitpoint.y]], false);
  var cablecutout = cablepath.rectangularExtrude(cablewidth, cableheight, resolution, false);
  
  // Smooth the base:
  if(smoothing)
  {
    base = base.contract(4, draft? 4:16);
    base = base.expand(4, draft? 4:16);
  }
  
  // Subtract the connector and cable:
  base = base.subtract(iphone).subtract(plug).subtract(cablecutout).subtract(gapForUsbPlug);
  
  // add mouse ear:
  if(params.mouseear == 1)
  {
    var mouseearpoint = new CSG.Vector3D(0, y3, 0);
    var mouseearthickness = 0.5;
    var mouseearradius = 15;
    var mouseear = CSG.cylinder({
      start: mouseearpoint, 
      end: mouseearpoint.plus(new CSG.Vector3D(0, 0, mouseearthickness)),
      radius: mouseearradius,
      resolution: 16
    });
    base = base.union(mouseear);     
  }
  
  // center:
  var basecenter = base.getBounds()[0].plus(base.getBounds()[1]).times(0.5);
  base = base.translate(basecenter.negated());
  
  return base;
}

///////////////////// 
function getIphoneDockConnector(margin, resolution)
{
  margin = new CSG.Vector3D(margin);
  var dockConnectorSize = new CSG.Vector3D([26.2, 5.7, 9.5]).plus(margin.times(2));  
  var dockConnector = CSG.cube({radius: [(dockConnectorSize.x-dockConnectorSize.y)/2, dockConnectorSize.y/2, dockConnectorSize.z/2]});
  dockConnector = dockConnector.union(CSG.cylinder({
    start: [(dockConnectorSize.x-dockConnectorSize.y)/2, 0, -dockConnectorSize.z/2],
    end: [(dockConnectorSize.x-dockConnectorSize.y)/2, 0, dockConnectorSize.z/2],
    radius: dockConnectorSize.y/2,
    resolution: resolution
  }));
  dockConnector = dockConnector.union(CSG.cylinder({
    start: [-(dockConnectorSize.x-dockConnectorSize.y)/2, 0, -dockConnectorSize.z/2],
    end: [-(dockConnectorSize.x-dockConnectorSize.y)/2, 0, dockConnectorSize.z/2],
    radius: dockConnectorSize.y/2,
    resolution: resolution
  }));
  var cableTube = CSG.cylinder({
    start: [0, 0, -dockConnectorSize.z/2-5.70-margin.z],
    end: [0, 0, -dockConnectorSize.z/2],
    radius: 2.25+margin.y,
    resolution: resolution
  }); 
  dockConnector = dockConnector.union(cableTube);
  
  // Add CSG.Connector properties:
  dockConnector.properties.iphoneConnector = dockConnector.properties.cube.facecenters[4];
  dockConnector.properties.cableConnector = cableTube.properties.cylinder.start;
    
  return dockConnector;
}

</t>
<t tx="2014pythonE.20140420143435.2032">// title: Lookup()
// author: OpenSCAD.org, adapted by Rene K. Mueller
// description: testing lookup() function 

// from http://en.wikibooks.org/wiki/OpenSCAD_User_Manual/Mathematical_Functions

function get_cylinder_h(p) { 
   return lookup(p, [
                [ -200, 5 ],
                [ -50, 20 ],
                [ -20, 18 ],
                [ +80, 25 ],
                [ +150, 2 ]
        ]);
}

function main() { 
   var w = new Array();
   for (var i =-100; i&lt;=100; i+=5) {
      //echo(i, get_cylinder_h(i));
      w.push( translate([ i, 0, -30 ], 
         cylinder({r1: 2, r2: 2, h: get_cylinder_h(i)*3, fn: 16})).
            setColor(hsl2rgb(((i+100)/200)*0.3+0.6,1,0.5)));
   }
   return w;
}</t>
<t tx="2014pythonE.20140420143435.2033">// title: Name Plate
// author: Rene K. Mueller
// date: 2013/04/24
// description: create your own name plate
// license: MIT License

function getParameterDefinitions() {
   return [
      { name: 'name', initial: "Joe Example", type: 'text', caption: 'Your name', size: 30 },
      { name: 'title', initial: "3D Printer Developer", type: 'text', caption: 'Your title', size: 30 },
      { name: 'thickness', initial: 3, type: 'float', caption: 'Thickness' }
   ];
}

function main(param) {
   var o = [];    // our stack of objects
   var l = [];    // our stack of line segments (when rendering vector text)
   var p = [];    // our stack of extruded line segments
   
   // -- render name &amp; extrude
   l = vector_text(0,0,param.name);
   l.forEach(function(s) {                
      p.push(rectangular_extrude(s, { w:param.thickness, h:param.thickness }));
   });
   o.push(union(p).setColor([1,1,0]).scale([1/3,1/3,1/3]).center([true,true,false]).translate([0,0,param.thickness]));

   if(param.title.length) {
      // -- render title &amp; extrude
      l = vector_text(0,0,param.title); p = [];
      l.forEach(function(s) {                
         p.push(rectangular_extrude(s, { w:param.thickness, h:param.thickness }));
      });
      o.push(union(p).setColor([1,1,0]).scale([1/8,1/8,1/3]).center([true,true,false]).translate([0,-8,param.thickness]));
   }
   o = [union(o)];      // neat: we combine name + title, and make it first entry of an array
   
   {  // -- adding a plate underneath
      var b = o[0].getBounds();
      var m = 2;
      var w = b[1].x-b[0].x+m*2;
      var h = b[1].y-b[0].y+m*2;
      o.push(cube({size: [w,h,param.thickness], round: true, radius: 0.5}).translate([b[0].x-m,b[0].y-m,0]));
   }
   return union(o);
}</t>
<t tx="2014pythonE.20140420143435.2034">// title: Polyhedron()
// author: OpenSCAD.org, adapted by Rene K. Mueller

function main() {
   return polyhedron({ 
         points: [
               [0, -10, 60], [0, 10, 60], [0, 10, 0], [0, -10, 0], [60, -10, 60], [60, 10, 60], 
               [10, -10, 50], [10, 10, 50], [10, 10, 30], [10, -10, 30], [30, -10, 50], [30, 10, 50]
               ], 
         triangles: [
                  [0,3,2],  [0,2,1],  [4,0,5],  [5,0,1],  [5,2,4],  [4,2,3],
                  [6,8,9],  [6,7,8],  [6,10,11],[6,11,7], [10,8,11],
                  [10,9,8], [3,0,9],  [9,0,6],  [10,6, 0],[0,4,10],
                  [3,9,10], [3,10,4], [1,7,11], [1,11,5], [1,8,7],  
                  [2,8,1],  [8,2,11], [5,11,2]
                  ]
      });
}
</t>
<t tx="2014pythonE.20140420143435.2035">// title: Primitives
// author: Rene K. Mueller
// license: MIT License

function main() {
   var o = [
      cube(),
      cube({size: [1,2,3]}),
      cube({round:true}),
      cube({size: [1,2,3], round:true}),
      sphere(),
      sphere({fn:8}),
      cylinder({r: 1, h: 10}),
      cylinder({r: 1, h: 10, round: true}),
      cylinder({r1: 3, r2: 0, h: 10}),
      cylinder({start: [0,0,0], end: [3,3,10], r: 1}),
      torus({ri: 0.5, ro: 2}),
      torus({ri: 0.1, ro: 2})
   ];
   for(var i=0; i&lt;o.length; i++) {
      o[i] = o[i].translate([(i%4-2)*6,Math.floor(i/4-2)*6,0]);
   }
   return o;
}
</t>
<t tx="2014pythonE.20140420143435.2036">// title: Rectangular_extrude()
// author: Rene K. Mueller
// license: MIT License

function main() {
   return [
      // openscade like
      rectangular_extrude([ [0,0], [10,0], [5,10], [0,10] ], { closed: true} ),
      rectangular_extrude([ [0,0], [10,0], [5,10], [0,10] ], {w: 1, h: 3, fn: 1, closed: false}).translate([0,15,0]),

      // object-oriented
      new CSG.Path2D([ [10,10], [-10,10], [-20,0], [-10,-10], [10,-10] ], /*closed=*/true).
         rectangularExtrude(/*w=*/1, /*h=*/3, /*res=*/10, /*round=*/true).translate([0,-15,0])
   ];
}
</t>
<t tx="2014pythonE.20140420143435.2037">// title: Rotate_extrude()
// author: Rene K. Mueller
// license: MIT License

function main() {
   return [
      // openscad-like
      rotate_extrude(translate([4,0,0],circle({r: 1, fn: 30, center: true}))),
      rotate_extrude({fn: 5},
         translate([4,0,0],circle({r: 1, fn: 30, center: true}))).translate([0,10,0]),
      rotate_extrude({fn: 30},
         translate([4,0,0],circle({r: 1, fn: 5, center: true}))).translate([0,20,0]),

      // openjscad-openscad mixed
      rotate_extrude({fn: 4}, square({size: [1,1], center: true}).translate([4,0,0]) ).translate([-10,0,0]),
      rotate_extrude({fn: 4}, square({size: [1,3], center: true}).translate([4,0,0]) ).translate([-20,0,0]),
      rotate_extrude({fn: 3}, square({size: [2,0.5], center: true}).translate([4,0,0]) ).translate([-20,10,0]),
      rotate_extrude({fn: 5}, square({size: [1,1], center: true}).translate([4,0,0]) ).translate([-20,20,0]),
      
      rotate_extrude(polygon({points:[[0,0],[2,1],[1,2],[1,3],[3,4],[0,5]]})).translate([10,0,0]),
      rotate_extrude({fn:4},polygon({points:[[0,0],[2,1],[1,2],[1,3],[3,4],[0,5]]})).translate([18,0,0])
   ];
}
</t>
<t tx="2014pythonE.20140420143435.2038">// title: Rounded Cube

function getParameterDefinitions() {
  return [
    { name: 'width', type: 'float', default: 10, caption: "Width:" },
    { name: 'height', type: 'float', default: 14, caption: "Height:" },
    { name: 'depth', type: 'float', default: 7, caption: "Depth:" },
    { name: 'rounded', type: 'choice', caption: 'Round the corners', values: [0, 1], captions: ["No", "Yes"], default: 1 },
  ];
}

function main(params) {
  var result;
  if(params.rounded == 1) {
    result = CSG.roundedCube({radius: [params.width, params.height, params.depth], roundradius: 2, resolution: 8});
  } else {
    result = CSG.cube({radius: [params.width, params.height, params.depth]});
  }
  return result;
}</t>
<t tx="2014pythonE.20140420143435.2039">// title: Torus()
// author: Rene K. Mueller
// license: MIT License

function main() {
   return [
      torus(),
      torus({ ri:0.5, fni: 8}).translate([0,10,0]),
   
      torus({ fni:4 }).translate([-10,0,0]),
      torus({ fni:4,roti:45 }).translate([-10,10,0]),
      torus({ fni:4,fno:4,roti:45 }).translate([-10,20,0]),
      torus({ fni:4,fno:5,roti:45 }).translate([-10,30,0]),

      torus({ fno:8 }).translate([10,0,0]),
      torus({ fno:4 }).translate([20,0,0]),
      torus({ fno:3 }).translate([30,0,0])
   ];
}
</t>
<t tx="2014pythonE.20140420143435.2040">// title: Transparency
// author: Rene K. Mueller
// description: showing transparent objects

function main() {
   var o = [];
   for(var i=7; i&gt;=0; i--) {     // reverse order for seeing through all cylinders (see http://www.opengl.org/wiki/Transparency_Sorting)
      o.push(cylinder({r:3,h:20}).
         setColor( 
            hsl2rgb(i/8,1,0.5).  // hsl to rgb, creating rainbow [r,g,b]
            concat(1/8+i/8)      // and add to alpha to make it [r,g,b,a]
         ).translate([(i-3)*7.5,0,0])
      );
   }
   o.push(color("red",cube(5)).translate([-4,-10,0]));
   o.push(color("red",0.5,cube(5)).translate([4,-10,0]));
   return o;
}
</t>
<t tx="2014pythonE.20140420143435.2041">// title: Transparency 2
// author: Rene K. Mueller
// description: showing transparent objects

function main() {
   return [
      difference(
         sphere(2),
         union(
            cylinder({h: 6, center: true}),
            cylinder({h: 6, center: true}).rotateY(90),
            cylinder({h: 6, center: true}).rotateX(90)
         )
      ).scale(10),
      union(
         cylinder({h: 6, center: true}),
         cylinder({h: 6, center: true}).rotateY(90),
         cylinder({h: 6, center: true}).rotateX(90)
      ).scale(10).setColor(1,1,0,0.5)
   ];
}</t>
<t tx="2014pythonE.20140420143435.2042">// title: Umbilical Torus generator
// author: Bruce Mueller 
// date: 2013/03/30 
// license: Creative Commons CC BY-SA
// description: adapted for OpenJSCAD.org by Rene K. Mueller 2013/03/30

// inc = incremental segments
// r = radius of circle
// t = 'radius' of triangle -distance from center to vertex
// a = angle of rotation of triangle
// b = angle rotation around center of circle

function tri(r,t,a,b) { return [(r + t*sin(a))*cos(b), (r+ t*sin(a))*sin(b), t*cos(a)]; }

// module to generate a rotated triangle slice, inc degrees wide
// (could not implement this in the for loop below)

function wedge(r,t,i,inc) {
	var a1 = tri(r,t,i/3,i);
	var b1 = tri(r,t,120+i/3,i);
	var c1 = tri(r,t,240+i/3,i);
	j = i+inc;
	var a2 = tri(r,t,j/3,j);
	var b2 = tri(r,t,120+j/3,j);
	var c2 = tri(r,t,240+j/3,j);
	
	return polyhedron({
		points: [a1,b1,c1,a2,b2,c2],
		triangles: [ [0,1,2], [5,4,3], 
			[3,4,0], [1,0,4],
			[3,0,2], [3,2,5],
			[5,2,4], [4,2,1] ] });
}


// created a conjoined set of triangular wedges around the circle


function main() {
   var inc = 10;
   var o = [];

   for(var i=0; i&lt;360; i+=inc) {
      o.push(wedge(2,1,i,inc));
   }
   return union(o).scale(10);        // would be more effectice &amp; suitable to create just one polyhedron
}</t>
<t tx="2014pythonE.20140420143435.2043">


var w = new Array();


function roundedBox(width, height, depth, radius){

	  var size=new CSG.Vector3D(width, height, depth);
	  var r1 = new CSG.Vector3D(2*radius, 0, 0);
	  var r2 = new CSG.Vector3D(0,2*radius,0);
	  var size_r1 = size.minus(r1);
	  var size_r2 = size.minus(r2)
	  var rb = new Array();
	  rb.push(cube({size: [size_r1.x,size_r1.y,size_r1.z], center:true}));
	  rb.push(cube({size: [size_r2.x,size_r2.y,size_r2.z], center:true}));
	  rb.push(cylinder({r:radius, h:size.z, center:true}).translate([ radius-size.x/2,-radius+size.y/2,0]));
	  rb.push(cylinder({r:radius, h:size.z, center:true}).translate([ -radius+size.x/2,-radius+size.y/2,0]));
	  rb.push(cylinder({r:radius, h:size.z, center:true}).translate([ radius-size.x/2,radius-size.y/2,0]));
	  rb.push(cylinder({r:radius, h:size.z, center:true}).translate([ -radius+size.x/2,radius-size.y/2,0]));
	  return union(rb);
}

function eye(radius,rotation) {
   
	var s1 = sphere({r:radius}).setColor(1,1,1);
	var s2 = sphere({r:radius*0.1}).setColor("black").translate([0,-radius,0]);
	
    return difference(s1, s2).rotateX(rotation);

}

function mouth(width,height,angle){
	
	//var mbox = cube({size:[width, height, height/2.0], round: true});

	var mbox = roundedBox(width,height,height/2.0,height/5.0);
	return mbox.setColor(0,0,1).rotateX(90+angle);
	
}

function arm(width,height){
    var a2 = union(
			cylinder({r:width,h:height}),
			sphere({r:width}).translate([0,0,height])
		).rotateY(90);
	return union(
		cylinder({r:width,h:height}),
	    sphere({r:width}).translate([0,0,height]),
		a2.translate([0,0,height])
	).rotateY(-90);
}




function body(width_top, width_bottom,height,depth_top, depth_bottom,arm_width ,arm_length){
	var poly = polyhedron({points:[ [-width_bottom/2.0, -depth_bottom/2.0, 0], 
					   [width_bottom/2.0, -depth_bottom/2.0, 0],
                         [width_top/2.0,  -depth_top/2.0, height], 
                         [-width_top/2.0,  -depth_top/2.0, height],
					  [-width_bottom/2.0, depth_bottom/2.0, 0], 				
                         [width_bottom/2.0, depth_bottom/2.0, 0], 
                         [width_top/2.0,  depth_top/2.0, height], 
                         [-width_top/2.0,  depth_top/2.0, height],],
	           triangles: [ [3,2,0], [2,1,0], // front
                             [4,6,7], [4,5,6], // back
                             [0,5,4], [0,1,5], // bottom
                             [7,3,4], [3,0,4], // left
                             [6,2,3],  [7,6,3], // top
                             [2,6,1], [5,1,6] // right
                             ]});
							 poly.setColor(0,1,0);
	return union(
				poly,
				roundedBox(width_top, width_top/3, depth_top, depth_top/5 ).rotateX(90).translate([0,0,height]),
				//cube({ size: [width_top, width_top/3, depth_top], round:true}).rotateX(90).translate([-width_top/2.0,depth_top/2.0,height*0.95]),
				arm(arm_width,arm_length).translate([-width_bottom/2.0 + (width_bottom-width_top) ,0, height / 1.5]),
				arm(arm_width,arm_length).translate([-width_bottom/2.0 + (width_bottom-width_top) ,0, height / 2.5]).rotateX(180).rotateY(180)
			).setColor(0,1,0);
}


function getParameterDefinitions(){
	return [

		{name: 'body_height', type: 'float', initial: 48.0, caption: "Height of the companion"},
		{name: 'body_width_top',type: 'float', initial: 20.0, caption: "Width of the head"},
		{name: 'body_width_bottom',type: 'float', initial: 23.0, caption: "Width of the base"},
		{name: 'body_depth_top',type: 'float', initial: 10.0, caption: "Depth of the head"},
		{name: 'body_depth_bottom',type: 'float', initial: 16.0, caption: "Width of the base"},
		{name: 'body_arm_width',type: 'float', initial: 3.0, caption: "Size of the arm"},
		{name: 'body_arm_length',type: 'float', initial: 13.0, caption: "Length of the arm segments"},
		{name: 'eye_radius',type: 'float', initial: 5.0, caption: "Radius of the eyeball"},
		{name: 'eye_position',type: 'float', initial: 0.80, caption: "Position of the eyeball %"},
		{name: 'eye_rotation',type: 'float', initial: -10.0, caption: "Rotation of the eyeball (top-down)"},
		{name: 'mouth_position',type: 'float', initial: 0.50, caption: "Mouth position %"},
		{name: 'mouth_width',type: 'float', initial: 14.0, caption: "Width of the mouth"},
		{name: 'mouth_height',type: 'float', initial: 5.0, caption: "Height of the mouth"},
		{name: 'body_rotation', type: 'float', initial: 0, caption: "Body rotation"},
		
		
];
}


function main(params){
	
	var body_height= params.body_height; //48.0;
	var body_width_top= params.body_width_top;// 20.0;
	var body_width_bottom=params.body_width_bottom;//23.0;
	var body_depth_top=params.body_depth_top;//10.0;
	var body_depth_bottom=params.body_depth_bottom;//16.0;
	var body_arm_width=params.body_arm_width;//3.0;
	var body_arm_length=params.body_arm_length;//13.0;
	var eye_radius=params.eye_radius;//5.0;
	var eye_position=params.eye_position;//0.80;
	var eye_rotation=params.eye_rotation;//-10;
	var mouth_position=params.mouth_position;//0.50;
	var mouth_width=params.mouth_width;//14.0;
	var mouth_height=params.mouth_height;//5;
	var body_rotation=params.body_rotation;
	
	
	w.push(body(body_width_top, body_width_bottom,body_height, body_depth_top, body_depth_bottom, body_arm_width,body_arm_length ));
	w.push(eye(eye_radius,eye_rotation).translate([0,-body_width_top/4.0,body_height*eye_position])) ;
	w.push(mouth(mouth_width,mouth_height,-3*mouth_position ).translate([0, -body_depth_bottom/2.5, body_height*mouth_position]));
	return union(w).rotateZ(params.body_rotation);
}</t>
<t tx="2014pythonE.20140424170033.3315">We need a new mechanism to identify page, right now we use heading to identify different page content, this will end up with no duplicated page heading allowed.

If we gave each page a unique number, and save these numbers in a seperated file to incorporate with content.htm, may we solve the no duplicated page heading allowed problem?

Or should we seperate the edit mode and read mode, under edit mode heading order is used to identify the page, and after editing pure html will be generated for user and search engine reading.

Page template can be imposed into action during the site html generation period.</t>
<t tx="2014pythonE.20140424170033.3316">def unique(items):
    found = set([])
    keep = []
    count = {}
    for item in items:
        if item not in found:
            count[item] = 0
            found.add(item)
            keep.append(item)
        else:
            count[item] += 1
            keep.append(str(item)+"_"+str(count[item]))
    return keep
</t>
<t tx="2014spring.20140530082747.2192">@cherrypy.expose
def image_list(self, item_per_page=5, page=1, keyword=None, *args, **kwargs):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    # cherrypy.session['admin'] = 1
    # cherrypy.session.get('admin')
    files = os.listdir(download_root_dir+"images/")
    total_rows = len(files)
    totalpage = math.ceil(total_rows/int(item_per_page))
    starti = int(item_per_page) * (int(page) - 1) + 1
    endi = starti + int(item_per_page) - 1
    outstring = "&lt;form method='post' action='image_delete_file'&gt;"
    notlast = False
    if total_rows &gt; 0:
        outstring += "&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "image_list?&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "image_list?&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
            if index&gt;= 0 and index&lt; totalpage:
                page_now = index + 1 
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "image_list?&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "

        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "image_list?&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "image_list?&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
            outstring += imagelist_access_list(files, starti, endi)+"&lt;br /&gt;"
        else:
            outstring += "&lt;br /&gt;&lt;br /&gt;"
            outstring += imagelist_access_list(files, starti, total_rows)+"&lt;br /&gt;"
        
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "image_list?&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "image_list?&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
        #for ($j=$page-$range;$j&lt;$page+$range;$j++)
            if index &gt;=0 and index &lt; totalpage:
                page_now = index + 1
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "image_list?&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "
        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "image_list?&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "image_list?&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;"
    else:
        outstring += "no data!"
    outstring += "&lt;br /&gt;&lt;br /&gt;&lt;input type='submit' value='delete'&gt;&lt;input type='reset' value='reset'&gt;&lt;/form&gt;"

    head, level, page = parse_content()
    directory = render_menu(head, level, page)

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Image List&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="2014spring.20140530082747.2194">def imagelist_access_list(files, starti, endi):
    # different extension files, associated links were provided
    # popup window to view images, video or STL files, other files can be downloaded directly
    # files are all the data to list, from starti to endi
    # add file size
    outstring = ""
    for index in range(int(starti)-1, int(endi)):
        fileName, fileExtension = os.path.splitext(files[index])
        fileExtension = fileExtension.lower()
        fileSize = sizeof_fmt(os.path.getsize(download_root_dir+"images/"+files[index]))
        # images files
        if fileExtension == ".png" or fileExtension == ".jpg" or fileExtension == ".gif":
            outstring += '&lt;input type="checkbox" name="filename" value="'+files[index]+'"&gt;&lt;a href="javascript:;" onClick="window.open(\'/images/'+ \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;'+files[index]+'&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'

    return outstring
</t>
<t tx="2014spring.20140530082747.2196">@cherrypy.expose
def image_delete_file(self, filename=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    if filename == None:
        outstring = "no file selected!"
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Delete Error&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
    outstring = "delete all these files?&lt;br /&gt;&lt;br /&gt;"
    outstring += "&lt;form method='post' action='image_doDelete'&gt;"
    # only one file is selected
    if isinstance(filename, str):
        outstring += filename+"&lt;input type='hidden' name='filename' value='"+filename+"'&gt;&lt;br /&gt;"
    else:
        # multiple files selected
        for index in range(len(filename)):
            outstring += filename[index]+"&lt;input type='hidden' name='filename' value='"+filename[index]+"'&gt;&lt;br /&gt;"
    outstring += "&lt;br /&gt;&lt;input type='submit' value='delete'&gt;&lt;/form&gt;"

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Download List&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="2014spring.20140530082747.2198">@cherrypy.expose
def image_doDelete(self, filename=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    # delete files
    outstring = "all these files will be deleted:&lt;br /&gt;&lt;br /&gt;"
    # only select one file
    if isinstance(filename, str):
        try:
            os.remove(download_root_dir+"images/"+filename)
            outstring += filename+" deleted!"
        except:
            outstring += filename+"Error, can not delete files!&lt;br /&gt;"
    else:
        # multiple files selected
        for index in range(len(filename)):
            try:
                os.remove(download_root_dir+"images/"+filename[index])
                outstring += filename[index]+" deleted!&lt;br /&gt;"
            except:
                outstring += filename[index]+"Error, can not delete files!&lt;br /&gt;"

    head, level, page = parse_content()
    directory = render_menu(head, level, page)

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Image List&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="2014spring.20140605210826.1877">2014.06.06 以並列重複標題的方式來解決問題
而重複標題頁面的編輯則自動跳轉到所有頁面編輯畫面, 讓使用者決定要如何處理.

有無可能, 使用者可以透過 page_order 單獨編輯特定的重複標題頁面?

We need custom error pages!

2014.06.10 處理 edit_page 儲存空白 content.htm 時之後的 parse 錯誤

2014.07.06 擬解決 /brython 查詢關鍵字使用流程所產生的錯誤

2014.09.08 頁面標題有 + 特殊符號時產生錯誤</t>
<t tx="2015.20141008201544.1881">can we integrate with PyGroup, after user login with Gmail account, user can maintain their own content.htm and config</t>
<t tx="amd.20150501162657.1">&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import header

qs_lang,language = header.show('../')

# other translations

trans = {
    'report_bugs':{'en':'Please report bugs in the ',
                   'es':'Poner los bugs en el ',
                   'fr':"Signalez les bugs dans l'"},
    'test_page':{'en':'Tests page','es':'P&amp;aacute;gina de pruebas','fr':'Page de tests'},
    'run':{'en':'run','es':'ejecutar','fr':'ex?cuter'},
    'clear':{'en':'clear','es':'borrar','fr':'effacer'}
}

for key in trans:
    if key in doc:
        doc[key].html = trans[key].get(language,trans[key]['en'])

# link to test page
tplink = doc['test_page']
if qs_lang:
    tplink.href += '?lang=%s' %qs_lang

def set_debug(ev):
    if ev.target.checked:
        __BRYTHON__.debug = 1
    else:
        __BRYTHON__.debug = 0

__BRYTHON__.debug = int(doc['set_debug'].checked)

# bindings
doc['run_js'].bind('click', window.run_js)
doc['set_debug'].bind('change',set_debug)

# next functions are defined in editor.py
doc['show_js'].bind('click', editor.show_js)
doc['run'].bind('click',run)
doc['show_console'].bind('click',show_console)

# erase "main" div
def clear_main(ev):
    doc['main'].text = ''

main_content = 'Zone with id="main" ; use it to test interaction with DOM elements'

# add "main" div
def add_main(ev):
    global main_content
    try:
        # if "main" div already exists, save content and erase container
        main_content = doc["main"].html
        doc["main_container"].html = ""
        doc["add_main"].text = 'Show "main" div'
    except KeyError:
        t = html.TABLE()
        row = html.TR()
        b = html.BUTTON('Clear')
        b.bind('click', clear_main)
        row &lt;= html.TD(b)+html.TD(html.DIV(Id="main"))
        t &lt;= row
        doc["main_container"] &lt;= t
        doc["main"].html = main_content
        doc["add_main"].text = 'Hide "main" div'

doc["add_main"].bind('click', add_main)

&lt;/script&gt;

&lt;script&gt;
function run_js(){
    var cons = document.getElementById("console")
    var jscode = cons.value
    var t0 = (new Date()).getTime()
    eval(jscode)
    var t1 = (new Date()).getTime()
    console.log("Javascript code run in "+(t1-t0)+" ms")
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython({debug:1, cache:'version'})"&gt;

&lt;table id="banner" cellpadding=0 cellspacing=0&gt;
&lt;tr id="banner_row"&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;div id="main_container"&gt;&lt;/div&gt;

&lt;div style="text-align:center"&gt;Brython version: &lt;span id="version"&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;/center&gt;

&lt;div id="container"&gt;
&lt;div id="left-div"&gt;
&lt;div style="padding: 3px 3px 3px 3px;"&gt;
&lt;button id="add_main"&gt;Add &lt;b&gt;&amp;lt;div id=main&amp;gt;&lt;/b&gt;&lt;/button&gt;

&lt;/div&gt;
  &lt;div id="editor" style="width:100%;"&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="right-div"&gt;
&lt;div style="padding: 3px 3px 3px 3px;"&gt;
  &lt;div style="float:left"&gt;
    &lt;button id="run"&gt; ▶ Run&lt;/button&gt;
    &lt;button id="run_js"&gt; ▶ Run Javascript&lt;/button&gt;
    Debug&lt;input type="checkbox" id="set_debug" checked&gt;
  &lt;/div&gt;

  &lt;div style="float:right"&gt;
    &lt;button id="show_console"&gt;Python&lt;/button&gt;
    &lt;button id="show_js"&gt;Javascript&lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="console"&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;/div&gt;</t>
<t tx="amd.20150702232137.1">/brython 可以執行但是 load program 出現 "module has no attribute setValue() 錯誤
可能是 editor.py 必須配合修改

/calc 可以執行

更改 UTF-8 identifier 過程與先前版本有些差異, 但修改後, 使用中文字符好像沒有問題

Chromium 瀏覽器無 WebGL 支援</t>
<t tx="cmsxh.20131226100304.3660"></t>
<t tx="cmsxh.20131226100304.3661">#
# -*- coding: utf-8 -*-
'''
Copyright © 2014 Chiaming Yen

CMSimply is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

CMSimply is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with CMSimply. If not, see &lt;http://www.gnu.org/licenses/&gt;.

***********************************************************************
'''

@language python
@tabwidth -4

&lt;&lt;declarations&gt;&gt;
@others
root = CMSimply()
root.download = Download()

# setup static, images and downloads directories
application_conf = {
        '/static':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': _curdir+"/static"},
        '/images':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/images"},
        '/downloads':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/downloads"},
        '/brython_programs':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/brython_programs"},
        '/calc_programs':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/calc_programs"},
        '/':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': _curdir+"/static/openjscad"}
    }

# if inOpenshift ('OPENSHIFT_REPO_DIR' exists in environment variables) or not inOpenshift
# it looks like on OpenShift, main application can not use the following line.
#if __name__ == '__main__':
if inOpenshift:
    # operate in OpenShift
    application = cherrypy.Application(root, config = application_conf)
else:
    # operate in localhost
    cherrypy.quickstart(root, config = application_conf)
</t>
<t tx="cmsxh.20131226100304.3662">import cherrypy
import re
import os
import math
import hashlib
from cherrypy.lib.static import serve_file
# use quote_plus() to generate URL
import urllib.parse
# use cgi.escape() to resemble php htmlspecialchars()
# use cgi.escape() or html.escape to generate data for textarea tag, otherwise Editor can not deal with some Javascript code.
import cgi

# get the current directory of the file
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
import sys
sys.path.append(_curdir)

if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    inOpenshift = True
else:
    inOpenshift = False

if inOpenshift:
    # while program is executed in OpenShift
    download_root_dir = os.environ['OPENSHIFT_DATA_DIR']
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
else:
    # while program is executed in localhost
    download_root_dir = _curdir + "/local_data/"
    data_dir = _curdir + "/local_data/"


</t>
<t tx="cmsxh.20131226100304.3663">def downloadlist_access_list(files, starti, endi):
    # different extension files, associated links were provided
    # popup window to view images, video or STL files, other files can be downloaded directly
    # files are all the data to list, from starti to endi
    # add file size
    outstring = ""
    for index in range(int(starti)-1, int(endi)):
        fileName, fileExtension = os.path.splitext(files[index])
        fileExtension = fileExtension.lower()
        fileSize = sizeof_fmt(os.path.getsize(download_root_dir+"downloads/"+files[index]))
        # images files
        if fileExtension == ".png" or fileExtension == ".jpg" or fileExtension == ".gif":
            outstring += '&lt;input type="checkbox" name="filename" value="'+files[index]+'"&gt;&lt;a href="javascript:;" onClick="window.open(\'/downloads/'+ \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;'+files[index]+'&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'
        # stl files
        elif fileExtension == ".stl":
            outstring += '&lt;input type="checkbox" name="filename" value="'+files[index]+'"&gt;&lt;a href="javascript:;" onClick="window.open(\'/static/viewstl.html?src=/downloads/'+ \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;'+files[index]+'&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'
        # flv files
        elif fileExtension == ".flv":
            outstring += '&lt;input type="checkbox" name="filename" value="'+files[index]+'"&gt;&lt;a href="javascript:;" onClick="window.open(\'/flvplayer?filepath=/downloads/'+ \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;'+files[index]+'&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'
        # direct download files
        else:
            outstring += "&lt;input type='checkbox' name='filename' value='"+files[index]+"'&gt;&lt;a href='/download/?filepath="+download_root_dir.replace('\\', '/')+ \
            "downloads/"+files[index]+"'&gt;"+files[index]+"&lt;/a&gt; ("+str(fileSize)+")&lt;br /&gt;"
    return outstring
</t>
<t tx="cmsxh.20131226100304.3664"># set_admin_css for administrator
def set_admin_css():
    outstring = '''&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;title&gt;CMSimply - Simple Cloud CMS in Python 3&lt;/title&gt; \
&lt;link rel="stylesheet" type="text/css" href="/static/cmsimply.css"&gt;
'''+syntaxhighlight()

    outstring += '''
&lt;script src="/static/jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
$(function(){
    $("ul.topmenu&gt; li:has(ul) &gt; a").append('&lt;div class="arrow-right"&gt;&lt;/div&gt;');
    $("ul.topmenu &gt; li ul li:has(ul) &gt; a").append('&lt;div class="arrow-right"&gt;&lt;/div&gt;');
});
&lt;/script&gt;
'''
    # SSL for OpenShift operation
    if inOpenshift:
        outstring += '''
&lt;script type="text/javascript"&gt;
if ((location.href.search(/http:/) != -1) &amp;&amp; (location.href.search(/login/) != -1)) \
window.location= 'https://' + location.host + location.pathname + location.search;
&lt;/script&gt;
'''
    site_title, password = parse_config()
    outstring += '''
&lt;/head&gt;&lt;header&gt;&lt;h1&gt;'''+site_title+'''&lt;/h1&gt; \
&lt;confmenu&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="sitemap"&gt;SiteMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="edit_page"&gt;Edit All&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="'''+cherrypy.url(qs=cherrypy.request.query_string)+'''&amp;edit=1"&gt;Edit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="edit_config"&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="search_form"&gt;Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="imageuploadform"&gt;Image Upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="fileuploadform"&gt;File Upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="download_list"&gt;File List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="logout"&gt;Logout&lt;/a&gt;&lt;/li&gt;
'''
    outstring += '''
&lt;/ul&gt;
&lt;/confmenu&gt;&lt;/header&gt;
'''
    return outstring
</t>
<t tx="cmsxh.20131226100304.3665">def set_footer():
    # Extra consideration for cherrypy.url(qs=cherrypy.request.query_string) return no data
    return "&lt;footer&gt; \
        &lt;a href='edit_page'&gt;Edit All&lt;/a&gt;| \
        &lt;a href='"+cherrypy.url(qs=cherrypy.request.query_string)+"&amp;edit=1'&gt;Edit&lt;/a&gt;| \
        &lt;a href='edit_config'&gt;Config&lt;/a&gt; \
        &lt;a href='login'&gt;login&lt;/a&gt;| \
        &lt;a href='logout'&gt;logout&lt;/a&gt; \
        &lt;br /&gt;Powered by &lt;a href='http://cmsimple.cycu.org'&gt;CMSimply&lt;/a&gt; \
        &lt;/footer&gt; \
        &lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="cmsxh.20131226100304.3666">def file_get_contents(filename):
    # open file in utf-8 and return file content
    with open(filename, encoding="utf-8") as file:
        return file.read()
</t>
<t tx="cmsxh.20131226100304.3667"># use head title to search page content
'''
# search_content(head, page, search)
# 從 head 與 page 數列中, 以 search 關鍵字進行查詢
# 原先傳回與 search 關鍵字頁面對應的頁面內容
# 現在則傳回多重的頁面次序與頁面內容數列
find = lambda searchList, elem: [[i for i, x in enumerate(searchList) if x == e] for e in elem]
head = ["標題一","標題二","標題三","標題一","標題四","標題五"]
search_result = find(head,["標題一"])[0]
page_order = []
page_content = []
for i in range(len(search_result)):
    # 印出次序
    page_order.append(search_result[i])
    # 標題為 head[search_result[i]]
    #  頁面內容則為 page[search_result[i]]
    page_content.append(page[search_result[i]])
    # 從 page[次序] 印出頁面內容
# 準備傳回 page_order 與 page_content 等兩個數列
'''
def search_content(head, page, search):
    ''' 舊內容
    return page[head.index(search)]
    '''
    find = lambda searchList, elem: [[i for i, x in enumerate(searchList) if x == e] for e in elem]
    search_result = find(head,[search])[0]
    page_order = []
    page_content = []
    for i in range(len(search_result)):
        # 印出次序
        page_order.append(search_result[i])
        # 標題為 head[search_result[i]]
        #  頁面內容則為 page[search_result[i]]
        page_content.append(page[search_result[i]])
        # 從 page[次序] 印出頁面內容
    # 準備傳回 page_order 與 page_content 等兩個數列
    return page_order, page_content
</t>
<t tx="cmsxh.20131226100304.3668">def parse_content():
    # if no content.htm, generate a head 1 and content 1 file
    if not os.path.isfile(data_dir+"content.htm"):
        # create content.htm if there is no content.htm
        File = open(data_dir+"content.htm", "w", encoding="utf-8")
        File.write("&lt;h1&gt;head 1&lt;/h1&gt;content 1")
        File.close()
    subject = file_get_contents(data_dir+"content.htm")
    # deal with content without content
    if subject == "":
        # create content.htm if there is no content.htm
        File = open(data_dir+"content.htm", "w", encoding="utf-8")
        File.write("&lt;h1&gt;head 1&lt;/h1&gt;content 1")
        File.close()
    # deal with content has content but no heading
    # replace subject content with special seperate string to avoid error 
    subject = re.sub('#@CMSIMPLY_SPLIT@#', '井@CMSIMPLY_SPLIT@井', subject)
    content_sep = '#@CMSIMPLY_SPLIT@#'
    head_level = 3
    # remove all attribute inside h1, h2 and h3 tags
    subject = re.sub('&lt;(h1|h2|h3)[^&gt;]*&gt;', r'&lt;\1&gt;', subject, flags=re.I)
    content = re.split('&lt;/body&gt;', subject)
    result = re.sub('&lt;h[1-'+str(head_level)+']&gt;', content_sep, content[0])
    # remove the first element contains html and body tags
    data = result.split(content_sep)[1:]
    head_list = []
    level_list = []
    page_list = []
    order = 1
    for index in range(len(data)):
        #page_data = re.sub('&lt;/h[1-'+str(head_level)+']&gt;', content_sep, data[index])
        page_data = re.sub('&lt;/h', content_sep, data[index])
        head = page_data.split(content_sep)[0]
        order += 1
        head_list.append(head)
        # put level data into level variable
        level = page_data.split(content_sep)[1][0]
        level_list.append(level)
        # remove  1&gt;,  2&gt; or 3&gt;
        page = page_data.split(content_sep)[1][2:]
        page_list.append(page)
    # send head to unique function to avoid duplicate heading
    #head_list = unique(head_list)
    return head_list, level_list, page_list
</t>
<t tx="cmsxh.20131226100304.3669">def render_menu(head, level, page, sitemap=0):
    directory = ""
    current_level = level[0]
    if sitemap:
        directory += "&lt;ul&gt;"
    else:
        directory += "&lt;ul id='css3menu1' class='topmenu'&gt;"
    for index in range(len(head)):
        if level[index] &gt; current_level:
            directory += "&lt;ul&gt;"
            directory += "&lt;li&gt;&lt;a href='get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
        elif level[index] == current_level:
            if level[index] == 1:
                if sitemap:
                    directory += "&lt;li&gt;&lt;a href='get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
                else:
                    directory += "&lt;li class='topmenu'&gt;&lt;a href='get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
            else:
                directory += "&lt;li&gt;&lt;a href='get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
        else:
            directory += "&lt;/li&gt;"*(int(current_level) - int(level[index]))
            directory += "&lt;/ul&gt;"*(int(current_level) - int(level[index]))
            if level[index] == 1:
                if sitemap:
                    directory += "&lt;li&gt;&lt;a href='get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
                else:
                    directory += "&lt;li class='topmenu'&gt;&lt;a href='/get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
            else:
                directory += "&lt;li&gt;&lt;a href='get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
        current_level = level[index]
    directory += "&lt;/li&gt;&lt;/ul&gt;"
    return directory
</t>
<t tx="cmsxh.20131226100304.3670">def filebrowser():
    return '''
&lt;script type="text/javascript"&gt;
function wrFilebrowser (field_name, url, type, win) {
poppedUpWin = win;
inputField = field_name;
if (type == "file") {type = "downloads"};
var cmsURL = "/file_selector";    

if (cmsURL.indexOf("?") &lt; 0) {
    cmsURL = cmsURL + "?type="+ type ;
}
else {
    cmsURL = cmsURL + "&amp;type="+type ;
}

tinyMCE.activeEditor.windowManager.open(
    {
        file  : cmsURL,
        width : 800,
        height : 600,
        resizable : "yes",
        inline : "yes",
        close_previous : "no",
        popup_css : false,
        scrollbars : "yes"
      },
      {
        window : win,
        input : field_name
      }
);
return false;
}
'''
</t>
<t tx="cmsxh.20131226100304.3671">def syntaxhighlight():
    return '''
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shCore.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushJScript.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushJava.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushPython.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushSql.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushXml.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushPhp.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushCpp.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushCss.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushCSharp.js"&gt;&lt;/script&gt;
&lt;link type="text/css" rel="stylesheet" href="/static/syntaxhighlighter/css/shCoreDefault.css"/&gt;
&lt;script type="text/javascript"&gt;SyntaxHighlighter.all();&lt;/script&gt;
'''
</t>
<t tx="cmsxh.20131226100304.3672">def editorhead():
    return '''
&lt;script language="javascript" type="text/javascript" src="/static/tinymce3/tiny_mce/tiny_mce.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/tinymce3/init.js"&gt;&lt;/script&gt;
'''
</t>
<t tx="cmsxh.20131226100304.3673">def tinymceinit():
    return '''
&lt;script language="javascript" type="text/javascript"&gt;
function tinyMCE_initialize0() {
    tinyMCE_instantiateByClasses('simply-editor', {
// General options

theme : "advanced",
width : "800",
height : "600",
element_format : "html",
language : "en",
plugins : "autolink,autosave,pagebreak,style,layer,table,save,advimage,advlink,advhr,emotions,iespell,"
        + "insertdatetime,preview,media,searchreplace,print,contextmenu,paste,directionality,fullscreen,"
        + "noneditable,visualchars,nonbreaking,xhtmlxtras,template,wordcount,media,lists,syntaxhl",

// Theme options
theme_advanced_buttons1 : "save,|,fullscreen,code,formatselect,fontselect,fontsizeselect,styleselect,syntaxhl",
theme_advanced_buttons2 : "bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,cut,copy,paste,pastetext,pasteword,|,bullist,numlist,outdent,indent,blockquote",
theme_advanced_buttons3 : "undo,redo,|,link,unlink,anchor,image,media,cleanup,|,hr,removeformat,visualaid,|,forecolor,backcolor,|,search,replace,|,charmap",
theme_advanced_buttons4 : "emotions,sub,sup,|,tablecontrols,insertdate,inserttime,help",
theme_advanced_toolbar_location : "top",
theme_advanced_toolbar_align : "left",
theme_advanced_statusbar_location : "bottom",
theme_advanced_resizing : true,
theme_advanced_blockformats : "h1,h2,h3,p,div,h4,h5,h6,blockquote,dt,dd,code",
theme_advanced_font_sizes : "8px=8px, 10px=10px,12px=12px, 14px=14px, 16px=16px, 18px=18px,20px=20px,24px=24px,36px=36px",

content_css : "/static/cmsimply.css",
//link and image list
external_image_list_url: "/static/tinymce3/cms_image_list.js",
external_link_list_url: "/static/tinymce3/cms_link_list.js",

// Extra
plugin_insertdate_dateFormat: "%d-%m-%Y",
plugin_insertdate_timeFormat: "%H:%M:%S",
inline_styles : true,
apply_source_formatting : true,
relative_urls : true,
convert_urls: false,
entity_encoding : "raw",

file_browser_callback: "wrFilebrowser" ,
fullscreen_new_window : false ,
fullscreen_settings : {
theme_advanced_buttons1: "save,|,fullscreen,code,|,formatselect,fontselect,fontsizeselect,styleselect,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,cut,copy,paste,pastetext,pasteword,|,bullist,numlist,outdent,indent,blockquote,|,undo,redo",
theme_advanced_buttons2 : "link,unlink,anchor,image,media,cleanup,|,hr,removeformat,visualaid,|,forecolor,backcolor,|,search,replace,|,charmap,emotions,|,sub,sup,tablecontrols,insertdate,inserttime,|,help",
theme_advanced_buttons3 : "",
theme_advanced_buttons4 : ""
}
});
}
&lt;/script&gt;
'''
</t>
<t tx="cmsxh.20131226100304.3674">def editorfoot():
    return '''&lt;body id="body"  onload="tinyMCE_initialize0();"&gt;'''
</t>
<t tx="cmsxh.20131226100304.3675">def tinymce_editor(menu_input=None, editor_content=None, page_order=None):
    files = os.listdir(download_root_dir+"downloads/")
    link_list = ""
    image_list = ""
    for index in range(len(files)):
        file_url = "download/?filepath="+download_root_dir.replace('\\', '/')+"downloads/"+files[index]
        link_list += "['"+files[index]+"', '"+file_url+"']"
        if index != len(files)-1:
            link_list += ","
    # deal with image link
    images = os.listdir(download_root_dir+"images/")
    for index in range(len(images)):
        image_url = "/images/"+images[index]
        image_list += "['"+images[index]+"', '"+image_url+"']"
        if index != len(images)-1:
            image_list += ","
    sitecontent =file_get_contents(data_dir+"content.htm")
    editor = set_admin_css()+editorhead()+filebrowser()+'''
var myImageList = new Array('''+image_list+''');
var myLinkList = new Array('''+link_list+''');
&lt;/script&gt;'''+tinymceinit()+'''&lt;/head&gt;'''+editorfoot()
    # edit all pages
    if page_order == None:
        outstring = editor + "&lt;div class='container'&gt;&lt;nav&gt;"+ \
            menu_input+"&lt;/nav&gt;&lt;section&gt;&lt;form method='post' action='savePage'&gt; \
     &lt;textarea class='simply-editor' name='page_content' cols='50' rows='15'&gt;"+editor_content+"&lt;/textarea&gt; \
     &lt;input type='submit' value='save'&gt;&lt;/form&gt;&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;"
    else:
        # add viewpage button wilie single page editing
        head, level, page = parse_content()
        outstring = editor + "&lt;div class='container'&gt;&lt;nav&gt;"+ \
            menu_input+"&lt;/nav&gt;&lt;section&gt;&lt;form method='post' action='ssavePage'&gt; \
     &lt;textarea class='simply-editor' name='page_content' cols='50' rows='15'&gt;"+editor_content+"&lt;/textarea&gt; \
&lt;input type='hidden' name='page_order' value='"+str(page_order)+"'&gt; \
     &lt;input type='submit' value='save'&gt;"
        outstring += '''&lt;input type=button onClick="location.href='get_page?heading='''+head[page_order]+ \
            ''''" value='viewpage'&gt;&lt;/form&gt;&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;'''
    return outstring
</t>
<t tx="cmsxh.20131226100304.3676">def parse_config():
    if not os.path.isfile(data_dir+"config"):
        # create config file if there is no config file
        file = open(data_dir+"config", "w", encoding="utf-8")
        # default password is admin
        password="admin"
        hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
        file.write("siteTitle:CMSimply - Simple Cloud CMS in Python 3\npassword:"+hashed_password)
        file.close()
    config = file_get_contents(data_dir+"config")
    config_data = config.split("\n")
    site_title = config_data[0].split(":")[1]
    password = config_data[1].split(":")[1]
    return site_title, password
</t>
<t tx="cmsxh.20131226100304.3677">def file_selector_script():
    return '''
&lt;script type="text/javascript" src="/static/tinymce3/tiny_mce/tiny_mce_popup.js"&gt;&lt;/script&gt;
&lt;script language="javascript" type="text/javascript"&gt;

var FileBrowserDialogue = {
    
    init : function () {
        // Nothing to do
    },

   
    submit : function (url) {
        var URL = url;
        var win = tinyMCEPopup.getWindowArg("window");
        var input = win.document.getElementById(tinyMCEPopup.getWindowArg("input"));
        win.document.getElementById(tinyMCEPopup.getWindowArg("input")).value = URL;

        input.value = URL;
        if (input.onchange) input.onchange();

        tinyMCEPopup.close();
    }
}

tinyMCEPopup.onInit.add(FileBrowserDialogue.init, FileBrowserDialogue);

function setLink(link){

    FileBrowserDialogue.submit(link);
    return true;
}
&lt;/script&gt;
'''
</t>
<t tx="cmsxh.20131226100304.3678">def file_lister(directory, type=None, page=1, item_per_page=10):
    files = os.listdir(download_root_dir+directory)
    total_rows = len(files)
    totalpage = math.ceil(total_rows/int(item_per_page))
    starti = int(item_per_page) * (int(page) - 1) + 1
    endi = starti + int(item_per_page) - 1
    outstring = file_selector_script()
    notlast = False
    if total_rows &gt; 0:
        outstring += "&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
        #for ($j=$page-$range;$j&lt;$page+$range;$j++)
            if index&gt;= 0 and index&lt; totalpage:
                page_now = index + 1 
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "file_selector?type="+type+"&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "

        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
            if type == "downloads":
                outstring += downloadselect_access_list(files, starti, endi)+"&lt;br /&gt;"
            else:
                outstring += imageselect_access_list(files, starti, endi)+"&lt;br /&gt;"
        else:
            outstring += "&lt;br /&gt;&lt;br /&gt;"
            if type == "downloads":
                outstring += downloadselect_access_list(files, starti, total_rows)+"&lt;br /&gt;"
            else:
                outstring += imageselect_access_list(files, starti, total_rows)+"&lt;br /&gt;"
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
        #for ($j=$page-$range;$j&lt;$page+$range;$j++)
            if index &gt;=0 and index &lt; totalpage:
                page_now = index + 1
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "file_selector?type="+type+"&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "
        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;"
    else:
        outstring += "no data!"

    if type == "downloads":
        return outstring+"&lt;br /&gt;&lt;br /&gt;&lt;a href='fileuploadform'&gt;file upload&lt;/a&gt;"
    else:
        return outstring+"&lt;br /&gt;&lt;br /&gt;&lt;a href='imageuploadform'&gt;image upload&lt;/a&gt;"
</t>
<t tx="cmsxh.20131226100304.3679">def downloadselect_access_list(files, starti, endi):
    outstring = ""
    for index in range(int(starti)-1, int(endi)):
        fileName, fileExtension = os.path.splitext(files[index])
        fileSize = os.path.getsize(download_root_dir+"/downloads/"+files[index])
        outstring += '''&lt;input type="checkbox" name="filename" value="'''+files[index]+'''"&gt;&lt;a href="#" onclick='window.setLink("/download/?filepath='''+ \
        download_root_dir.replace('\\', '/')+'''/downloads/'''+files[index]+'''",0); return false;'&gt;'''+ \
        files[index]+'''&lt;/a&gt; ('''+str(sizeof_fmt(fileSize))+''')&lt;br /&gt;'''
    return outstring
</t>
<t tx="cmsxh.20131226100304.3680">def imageselect_access_list(files, starti, endi):
    outstring = '''&lt;head&gt;
&lt;style&gt;
a.xhfbfile {padding: 0 2px 0 0; line-height: 1em;}
a.xhfbfile img{border: none; margin: 6px;}
a.xhfbfile span{display: none;}
a.xhfbfile:hover span{
    display: block;
    position: relative;
    left: 150px;
    border: #aaa 1px solid;
    padding: 2px;
    background-color: #ddd;
}
a.xhfbfile:hover{
    background-color: #ccc;
    opacity: .9;
    cursor:pointer;
}
&lt;/style&gt;
&lt;/head&gt;
'''
    for index in range(int(starti)-1, int(endi)):
        fileName, fileExtension = os.path.splitext(files[index])
        fileSize = os.path.getsize(download_root_dir+"/images/"+files[index])
        outstring += '''&lt;a class="xhfbfile" href="#" onclick='window.setLink("/download/?filepath='''+ \
        download_root_dir.replace('\\', '/')+'''/images/'''+files[index]+'''",0); return false;'&gt;'''+ \
        files[index]+'''&lt;span style="position: absolute; z-index: 4;"&gt;&lt;br /&gt;
        &lt;img src="/download/?filepath='''+ \
        download_root_dir.replace('\\', '/')+'''/images/'''+files[index]+'''" width="150px"/&gt;&lt;/span&gt;&lt;/a&gt; ('''+str(sizeof_fmt(fileSize))+''')&lt;br /&gt;'''
    return outstring
</t>
<t tx="cmsxh.20131226100304.3681">def sizeof_fmt(num):
    for x in ['bytes','kb','mb','gb']:
        if num &lt; 1024.0:
            return "%3.1f %s" % (num, x)
        num /= 1024.0
    return "%3.1f %s" % (num, 'tb')
</t>
<t tx="cmsxh.20131226100304.3682">class CMSimply(object):
    _cp_config = {
    # if there is no utf-8 encoding, no Chinese input available
    'tools.encode.encoding': 'utf-8',
    'tools.sessions.on' : True,
    'tools.sessions.storage_type' : 'file',
    #'tools.sessions.locking' : 'explicit',
    'tools.sessions.storage_path' : data_dir+'/tmp',
    # session timeout is 60 minutes
    'tools.sessions.timeout' : 60,
    # poll rate for expired session cleanup in minutes
    'tools.sessions.clean_freq': 30
    }
    
    @others
</t>
<t tx="cmsxh.20131226100304.3683">@cherrypy.expose
def index(self, heading=None, *args, **kwargs):
    head, level, page = parse_content()
    # fix first Chinese heading error
    raise cherrypy.HTTPRedirect("get_page?heading="+urllib.parse.quote_plus(head[0]))
    # the following will never execute
    directory = render_menu(head, level, page)
    if heading == None:
        heading = head[0]
    # 因為同一 heading 可能有多頁, 因此不可使用 head.index(heading) 搜尋 page_order
    page_order_list, page_content_list = search_content(head, page, heading)
    return_content = ""
    for i in range(len(page_order_list)):
        #page_order = head.index(heading)
        page_order = page_order_list[page_order_list[i]]
        if page_order == 0:
            last_page = ""
        else:
            last_page = head[page_order-1]+" &lt;&lt; &lt;a href='get_page?heading="+head[page_order-1]+"'&gt;Previous&lt;/a&gt;"
        if page_order == len(head) - 1:
            # no next page
            next_page = ""
        else:
            next_page = "&lt;a href='get_page?heading="+head[page_order+1]+"'&gt;Next&lt;/a&gt; &gt;&gt; "+ head[page_order+1]
        return_content += last_page+" "+next_page+"&lt;br /&gt;&lt;h1&gt;"+heading+"&lt;/h1&gt;"+page_content_list[page_order_list[i]]+"&lt;br /&gt;"+last_page+" "+next_page

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;"+return_content+"&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"


</t>
<t tx="cmsxh.20131226100304.3684"># default method, if there is no corresponding method, cherrypy will redirect to default method
# need *args and **kwargs as input variables for all possible URL links
@cherrypy.expose
def default(self, attr='default', *args, **kwargs):
    raise cherrypy.HTTPRedirect("/")
</t>
<t tx="cmsxh.20131226100304.3685">@cherrypy.expose
def login(self):
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    if not self.isAdmin():
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
    directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Login&lt;/h1&gt;&lt;form method='post' action='checkLogin'&gt; \
    Password:&lt;input type='password' name='password'&gt; \
    &lt;input type='submit' value='login'&gt;&lt;/form&gt; \
    &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
    else:
        raise cherrypy.HTTPRedirect("edit_page")
</t>
<t tx="cmsxh.20131226100304.3686">@cherrypy.expose
def logout(self):
    cherrypy.session.delete()
    raise cherrypy.HTTPRedirect("/")
</t>
<t tx="cmsxh.20131226100304.3687">@cherrypy.expose
def checkLogin(self, password=None):
    site_title, saved_password = parse_config()
    hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
    if hashed_password == saved_password:
        cherrypy.session['admin'] = 1
        raise cherrypy.HTTPRedirect("edit_page")
    raise cherrypy.HTTPRedirect("/")
</t>
<t tx="cmsxh.20131226100304.3688"># seperate page need heading and edit variables, if edit=1, system will enter edit mode
# single page edit will use ssavePage to save content, it means seperate save page
@cherrypy.expose
def get_page(self, heading=None, edit=0, *args, **kwargs):
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    '''
    try:
        pagecontent = search_content(head, page, heading)
        page_order = head.index(heading)
    except:
        heading = head[0]
        pagecontent = page[0]
        page_order = 0
    if page_order == 0:
        # no last page
        last_page = ""
    else:
        last_page = head[page_order-1] + " &lt;&lt; &lt;a href='get_page?heading="+head[page_order-1]+"'&gt;Previous&lt;/a&gt;"
    if page_order == len(head) - 1:
        # no next page
        next_page = ""
    else:
        next_page = "&lt;a href='get_page?heading="+head[page_order+1]+"'&gt;Next&lt;/a&gt; &gt;&gt; "+ head[page_order+1]
    '''
    if heading == None:
        heading = head[0]
    # 因為同一 heading 可能有多頁, 因此不可使用 head.index(heading) 搜尋 page_order
    page_order_list, page_content_list = search_content(head, page, heading)
    return_content = ""
    pagedata = ""
    outstring = ""
    outstring_duplicate = ""
    pagedata_duplicate = ""
    outstring_list = []
    for i in range(len(page_order_list)):
        #page_order = head.index(heading)
        page_order = page_order_list[i]
        if page_order == 0:
            last_page = ""
        else:
            last_page = head[page_order-1]+" &lt;&lt; &lt;a href='get_page?heading="+head[page_order-1]+"'&gt;Previous&lt;/a&gt;"
        if page_order == len(head) - 1:
            # no next page
            next_page = ""
        else:
            next_page = "&lt;a href='get_page?heading="+head[page_order+1]+"'&gt;Next&lt;/a&gt; &gt;&gt; "+ head[page_order+1]
        if len(page_order_list) &gt; 1:
            return_content += last_page+" "+next_page+"&lt;br /&gt;&lt;h1&gt;"+heading+"&lt;/h1&gt;"+page_content_list[i]+"&lt;br /&gt;"+last_page+" "+next_page+"&lt;br /&gt;&lt;hr&gt;"
            pagedata_duplicate = "&lt;h"+level[page_order]+"&gt;"+heading+"&lt;/h"+level[page_order]+"&gt;"+page_content_list[i]
            outstring_list.append(last_page+" "+next_page+"&lt;br /&gt;"+ tinymce_editor(directory, cgi.escape(pagedata_duplicate), page_order))
        else:
            return_content += last_page+" "+next_page+"&lt;br /&gt;&lt;h1&gt;"+heading+"&lt;/h1&gt;"+page_content_list[i]+"&lt;br /&gt;"+last_page+" "+next_page
            
        pagedata += "&lt;h"+level[page_order]+"&gt;"+heading+"&lt;/h"+level[page_order]+"&gt;"+page_content_list[i]
        outstring += last_page+" "+next_page+"&lt;br /&gt;"+ tinymce_editor(directory, cgi.escape(pagedata), page_order)
    
    # edit=0 for viewpage
    if edit == 0:
        '''
        if heading == None:
            return page[0]
        else:
            return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
            directory+"&lt;/nav&gt;&lt;section&gt;"+last_page+" "+next_page+"&lt;br /&gt;&lt;h1&gt;"+heading+"&lt;/h1&gt;"+pagecontent+"&lt;br /&gt;"+last_page+" "+next_page+"&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
        '''
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;"+return_content+"&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
    # enter edit mode
    else:
        # check if administrator
        if not self.isAdmin():
            raise cherrypy.HTTPRedirect("login")
        else:
            if len(page_order_list) &gt; 1:
                # 若碰到重複頁面頁印, 且要求編即, 則導向 edit_page
                #raise cherrypy.HTTPRedirect("edit_page")
                for i in range(len(page_order_list)):
                    outstring_duplicate += outstring_list[i]+"&lt;br /&gt;&lt;hr&gt;"
                return outstring_duplicate
            else:
            #pagedata = "&lt;h"+level[page_order]+"&gt;"+heading+"&lt;/h"+level[page_order]+"&gt;"+search_content(head, page, heading)
            #outstring = last_page+" "+next_page+"&lt;br /&gt;"+ tinymce_editor(directory, cgi.escape(pagedata), page_order)
                return outstring
</t>
<t tx="cmsxh.20131226100304.3689">def isAdmin(self):
    if cherrypy.session.get('admin') == 1:
            return True
    else:
        return False
</t>
<t tx="cmsxh.20131226100304.3690"># edit all page content
@cherrypy.expose
def edit_page(self):
    # check if administrator
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    else:
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        pagedata =file_get_contents(data_dir+"content.htm")
        outstring = tinymce_editor(directory, cgi.escape(pagedata))
        return outstring
</t>
<t tx="cmsxh.20131226100304.3691">@cherrypy.expose
def savePage(self, page_content=None):
    # check if administrator
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    if page_content == None:
        return self.error_log("no content to save!")
    # we need to check if page heading is duplicated
    file = open(data_dir+"content.htm", "w", encoding="utf-8")
    # in Windows client operator, to avoid textarea add extra \n
    page_content = page_content.replace("\n","")
    file.write(page_content)
    file.close()
    '''
    # need to parse_content() to eliminate duplicate heading
    head, level, page = parse_content()
    file = open(data_dir+"content.htm", "w", encoding="utf-8")
    for index in range(len(head)):
        file.write("&lt;h"+str(level[index])+"&gt;"+str(head[index])+"&lt;/h"+str(level[index])+"&gt;"+str(page[index]))
    file.close()
    '''
    raise cherrypy.HTTPRedirect("edit_page")
</t>
<t tx="cmsxh.20131226100304.3692"># seperate save page
@cherrypy.expose
def ssavePage(self, page_content=None, page_order=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    if page_content == None:
        return self.error_log("no content to save!")
    page_content = page_content.replace("\n","")
    head, level, page = parse_content()
    original_head_title = head[int(page_order)]
    file = open(data_dir+"content.htm", "w", encoding="utf-8")
    for index in range(len(head)):
        if index == int(page_order):
            file.write(page_content)
        else:
            file.write("&lt;h"+str(level[index])+"&gt;"+str(head[index])+"&lt;/h"+str(level[index])+"&gt;"+str(page[index]))
    file.close()

    # if head[int(page_order)] still existed and equal original_head_title, go back to origin edit status, otherwise go to "/"
    # here the content is modified, we need to parse the new page_content again
    head, level, page = parse_content()
    # for debug
    # print(original_head_title, head[int(page_order)])
    if original_head_title == head[int(page_order)]:
        #edit_url = "get_page?heading="+urllib.parse.quote_plus(head[int(page_order)])+"&amp;edit=1"
        edit_url = "get_page?heading="+urllib.parse.quote_plus(original_head_title)+"&amp;edit=1"
        raise cherrypy.HTTPRedirect(edit_url)
    else:
        raise cherrypy.HTTPRedirect("/")
</t>
<t tx="cmsxh.20131226100304.3694">@cherrypy.expose
def fileuploadform(self):
    if self.isAdmin():
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;file upload&lt;/h1&gt;"+'''
\\-4.&lt;script src="/static/jquery.js" type="text/javascript"&gt;&lt;/script&gt;
\\-4.&lt;script src="/static/axuploader.js" type="text/javascript"&gt;&lt;/script&gt;
\\-4.&lt;script&gt;
\\-4.$(document).ready(function(){
\\-4.$('.prova').axuploader({url:'fileaxupload', allowExt:['jpg','png','gif','7z','pdf','zip','flv','stl','swf'],
\\-4.finish:function(x,files)
    {
        alert('All files have been uploaded: '+files);
    },
\\-4.enable:true,
\\-4.remotePath:function(){
\\-2.return 'downloads/';
\\-4.}
\\-4.});
\\-4.});
\\-4.&lt;/script&gt;
\\-4.&lt;div class="prova"&gt;&lt;/div&gt;
\\-4.&lt;input type="button" onclick="$('.prova').axuploader('disable')" value="asd" /&gt;
\\-4.&lt;input type="button" onclick="$('.prova').axuploader('enable')" value="ok" /&gt;
\\-4.&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;
\\-4.'''
    else:
        raise cherrypy.HTTPRedirect("login")
</t>
<t tx="cmsxh.20131226100304.3695">@cherrypy.expose
def fileaxupload(self, *args, **kwargs):
    # need to consider if the uploaded filename already existed.
    # right now all existed files will be replaced with the new files
    if self.isAdmin():
        filename = kwargs["ax-file-name"]
        flag = kwargs["start"]
        if flag == "0":
            file = open(download_root_dir+"downloads/"+filename, "wb")
        else:
            file = open(download_root_dir+"downloads/"+filename, "ab")
        file.write(cherrypy.request.body.read())
        file.close()
        return "files uploaded!"
    else:
        raise cherrypy.HTTPRedirect("login")
</t>
<t tx="cmsxh.20131226100304.3696">@cherrypy.expose
def imageuploadform(self):
    if self.isAdmin():
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;image upload&lt;/h1&gt;"+'''
\\-4.&lt;script src="/static/jquery.js" type="text/javascript"&gt;&lt;/script&gt;
\\-4.&lt;script src="/static/axuploader.js" type="text/javascript"&gt;&lt;/script&gt;
\\-4.&lt;script&gt;
\\-4.$(document).ready(function(){
\\-4.$('.prova').axuploader({url:'/imageaxupload', allowExt:['jpg','png','gif'],
\\-4.finish:function(x,files)
    {
        alert('All files have been uploaded: '+files);
    },
\\-4.enable:true,
\\-4.remotePath:function(){
\\-2.return 'images/';
\\-4.}
\\-4.});
\\-4.});
\\-4.&lt;/script&gt;
\\-4.&lt;div class="prova"&gt;&lt;/div&gt;
\\-4.&lt;input type="button" onclick="$('.prova').axuploader('disable')" value="asd" /&gt;
\\-4.&lt;input type="button" onclick="$('.prova').axuploader('enable')" value="ok" /&gt;
\\-4.'''
    else:
        raise cherrypy.HTTPRedirect("login")
</t>
<t tx="cmsxh.20131226100304.3697">@cherrypy.expose
def imageaxupload(self, *args, **kwargs):
    if self.isAdmin():
        filename = kwargs["ax-file-name"]
        flag = kwargs["start"]
        if flag == 0:
            file = open(download_root_dir+"images/"+filename, "wb")
        else:
            file = open(download_root_dir+"images/"+filename, "ab")
        file.write(cherrypy.request.body.read())
        file.close()
        return "image files uploaded!"
    else:
        raise cherrypy.HTTPRedirect("login")
</t>
<t tx="cmsxh.20131226100304.3698">@cherrypy.expose
def file_selector(self, type=None, page=1, item_per_page=10, keyword=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    else:
        if type == "downloads":
            #return downloads_file_selector()
            return file_lister("downloads", type, page, item_per_page)
        elif type == "image":
            #return images_file_selector()
            return file_lister("images", type, page, item_per_page)
</t>
<t tx="cmsxh.20131226100304.3699">@cherrypy.expose
def download_list(self, item_per_page=5, page=1, keyword=None, *args, **kwargs):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    # cherrypy.session['admin'] = 1
    # cherrypy.session.get('admin')
    files = os.listdir(download_root_dir+"downloads/")
    total_rows = len(files)
    totalpage = math.ceil(total_rows/int(item_per_page))
    starti = int(item_per_page) * (int(page) - 1) + 1
    endi = starti + int(item_per_page) - 1
    outstring = "&lt;form method='post' action='delete_file'&gt;"
    notlast = False
    if total_rows &gt; 0:
        outstring += "&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "download_list?&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "download_list?&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
            if index&gt;= 0 and index&lt; totalpage:
                page_now = index + 1 
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "download_list?&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "

        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "download_list?&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "download_list?&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
            outstring += downloadlist_access_list(files, starti, endi)+"&lt;br /&gt;"
        else:
            outstring += "&lt;br /&gt;&lt;br /&gt;"
            outstring += downloadlist_access_list(files, starti, total_rows)+"&lt;br /&gt;"
        
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "download_list?&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "download_list?&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
        #for ($j=$page-$range;$j&lt;$page+$range;$j++)
            if index &gt;=0 and index &lt; totalpage:
                page_now = index + 1
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "download_list?&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "
        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "download_list?&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "download_list?&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;"
    else:
        outstring += "no data!"
    outstring += "&lt;br /&gt;&lt;br /&gt;&lt;input type='submit' value='delete'&gt;&lt;input type='reset' value='reset'&gt;&lt;/form&gt;"

    head, level, page = parse_content()
    directory = render_menu(head, level, page)

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Download List&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="cmsxh.20131226100304.3700">@cherrypy.expose
def creo_getvolume(self, *args, **kwargs):
    return '''
\\-4.&lt;script src="/static/weblink/pfcUtils.js"&gt;
\\-4.&lt;/script&gt;&lt;script  src="/static/weblink/pfcParameterExamples.js"&gt;&lt;/script&gt;&lt;script  src="/static/weblink/pfcComponentFeatExamples.js"&gt;
\\-3.document.writeln ("Error loading script!");
\\-4.&lt;/script&gt;&lt;script language="JavaScript"&gt;
if (!pfcIsWindows())
    netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
\\-2.var session = pfcGetProESession ();
\\-4.// for volume
\\-2.var solid = session.CurrentModel;
try
    {
        createParametersFromArguments ();
        solid.Regenerate(void null);   
        properties = solid.GetMassProperty(void null);
        alert("part volume:"+properties.Volume);
    }
catch (err)
    {
        alert ("Exception occurred: "+pfcGetExceptionType (err));
   }
\\-4.&lt;/script&gt;
\\-4.'''
</t>
<t tx="cmsxh.20131226100304.3701">@cherrypy.expose
def anglebracket(self, *args, **kwargs):
    return '''
\\-4.&lt;script src="/static/weblink/pfcUtils.js"&gt;
\\-4.&lt;/script&gt;&lt;script src="/static/weblink/wl_header.js"&gt;
\\-4.document.writeln ("Error loading Pro/Web.Link header!");
\\-4.&lt;/script&gt;&lt;script language="JavaScript"&gt;
\\-4.if (!pfcIsWindows()) netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
\\-4.// if the third input is false, it means use session, but will not be displayed
\\-4.// ret is the model open return
\\-3.var ret = document.pwl.pwlMdlOpen("angle_bracket_creo.prt", "c:/tmp", false);
\\-4.if (!ret.Status) {
alert("pwlMdlOpen failed (" + ret.ErrorCode + ")");
\\-4.}
var session = pfcGetProESession();
var window = session.OpenFile(pfcCreate("pfcModelDescriptor").CreateFromFileName("angle_bracket_creo.prt"));
var solid = session.GetModel("angle_bracket_creo.prt",pfcCreate("pfcModelType").MDL_PART);
var d1,d2,myf,myn,i,j,volume,count,d1Value,d2Value;
d1 = solid.GetParam("len1");
//d2 = solid.GetParam("width");
//myf=20;
//myn=20;
volume=0;
count=0;
try
{
        //createParametersFromArguments ();
        for(i=0;i&lt;=3;i++)
        {
            //for(j=0;j&lt;=2;j++)
            //{
                myf=180+i;
                //myn=100+i*10;
     d1Value = pfcCreate ("MpfcModelItem").CreateDoubleParamValue(myf);
     d2Value = pfcCreate ("MpfcModelItem").CreateDoubleParamValue(myn);
                d1.Value = d1Value;
                //d2.Value = d2Value;
                solid.Regenerate(void null);
                properties = solid.GetMassProperty(void null);
                //volume = volume + properties.Volume;
\\-4.volume = properties.Volume;
                count = count + 1;
\\-4.alert("execute no: "+count+", part volume:"+volume);
\\-4.var newfile = document.pwl.pwlMdlSaveAs("angle_bracket_creo.prt", "c:/tmp", "cadp_w12_py_"+count+".prt");
\\-4.if (!newfile.Status) {
alert("pwlMdlSaveAs failed (" + newfile.ErrorCode + ")");
\\-4.//}
            }
        }
        //alert("totally execute:"+count+"times, part volume:"+volume);
        //alert("part volume:"+properties.Volume);
        //alert("part volume to integer:"+Math.round(properties.Volume));
    }
catch(err)
    {
        alert ("Exception occurred: "+pfcGetExceptionType (err));
    }
\\-4.&lt;/script&gt;
\\-4.'''
</t>
<t tx="cmsxh.20131226100304.3702">@cherrypy.expose
def search_form(self):
    if self.isAdmin():
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
    directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Search&lt;/h1&gt;&lt;form method='post' action='doSearch'&gt; \
    keywords:&lt;input type='text' name='keyword'&gt; \
    &lt;input type='submit' value='search'&gt;&lt;/form&gt; \
    &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
    else:
        raise cherrypy.HTTPRedirect("login")
</t>
<t tx="cmsxh.20131226100304.3703">@cherrypy.expose
def doSearch(self, keyword=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    else:
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        match = ""
        for index in range(len(head)):
            if (keyword != "" or None) and (keyword.lower() in page[index].lower() or \
            keyword.lower() in head[index].lower()): \
                match += "&lt;a href='get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;&lt;br /&gt;"
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Search Result&lt;/h1&gt;keyword: "+ \
        keyword.lower()+"&lt;br /&gt;&lt;br /&gt;in the following pages:&lt;br /&gt;&lt;br /&gt;"+ \
        match+" \
     &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="cmsxh.20131226100304.3704">def set_css(self):
    outstring = '''&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;title&gt;CMSimply - Simple Cloud CMS in Python 3&lt;/title&gt; \
&lt;link rel="stylesheet" type="text/css" href="/static/cmsimply.css"&gt;
'''+syntaxhighlight()

    outstring += '''
&lt;script src="/static/jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
$(function(){
    $("ul.topmenu&gt; li:has(ul) &gt; a").append('&lt;div class="arrow-right"&gt;&lt;/div&gt;');
    $("ul.topmenu &gt; li ul li:has(ul) &gt; a").append('&lt;div class="arrow-right"&gt;&lt;/div&gt;');
});
&lt;/script&gt;
'''
    if inOpenshift:
        outstring += '''
&lt;script type="text/javascript"&gt;
if ((location.href.search(/http:/) != -1) &amp;&amp; (location.href.search(/login/) != -1)) \
window.location= 'https://' + location.host + location.pathname + location.search;
&lt;/script&gt;
'''
    site_title, password = parse_config()
    outstring += '''
&lt;/head&gt;&lt;header&gt;&lt;h1&gt;'''+site_title+'''&lt;/h1&gt; \
&lt;confmenu&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="sitemap"&gt;Site Map&lt;/a&gt;&lt;/li&gt;
'''
    if self.isAdmin():
        outstring += '''
&lt;li&gt;&lt;a href="edit_page"&gt;Edit All&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="'''+cherrypy.url(qs=cherrypy.request.query_string)+'''&amp;edit=1"&gt;Edit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="edit_config"&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="search_form"&gt;Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="imageuploadform"&gt;image upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="fileuploadform"&gt;file upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="download_list"&gt;file list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="logout"&gt;logout&lt;/a&gt;&lt;/li&gt;
'''
    else:
        outstring += '''
&lt;li&gt;&lt;a href="login"&gt;login&lt;/a&gt;&lt;/li&gt;
'''
    outstring += '''
&lt;/ul&gt;
&lt;/confmenu&gt;&lt;/header&gt;
'''
    return outstring
</t>
<t tx="cmsxh.20131226100304.3705">@cherrypy.expose
def edit_config(self):
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    if not self.isAdmin():
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
    directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Login&lt;/h1&gt;&lt;form method='post' action='checkLogin'&gt; \
    Password:&lt;input type='password' name='password'&gt; \
    &lt;input type='submit' value='login'&gt;&lt;/form&gt; \
    &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
    else:
        site_title, password = parse_config()
        # edit config file
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
    directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Edit Config&lt;/h1&gt;&lt;form method='post' action='saveConfig'&gt; \
    Site Title:&lt;input type='text' name='site_title' value='"+site_title+"' size='50'&gt;&lt;br /&gt; \
    Password:&lt;input type='text' name='password' value='"+password+"' size='50'&gt;&lt;br /&gt; \
 &lt;input type='hidden' name='password2' value='"+password+"'&gt; \
    &lt;input type='submit' value='send'&gt;&lt;/form&gt; \
    &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="cmsxh.20131226100304.3706">@cherrypy.expose
def saveConfig(self, site_title=None, password=None, password2=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    if site_title == None or password == None:
        return self.error_log("no content to save!")
    old_site_title, old_password = parse_config()
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    if site_title == None or password == None or password2 != old_password or password == '':
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Error!&lt;/h1&gt;&lt;a href='/'&gt;Home&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;"
    else:
        if password == password2 and password == old_password:
            hashed_password = old_password
        else:
            hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
        file = open(data_dir+"config", "w", encoding="utf-8")
        file.write("siteTitle:"+site_title+"\npassword:"+hashed_password)
        file.close()
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;config file saved&lt;/h1&gt;&lt;a href='/'&gt;Home&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="cmsxh.20131226100304.3707"># use to check directory variable data
@cherrypy.expose
def listdir(self):
    return download_root_dir +","+data_dir
</t>
<t tx="cmsxh.20131226100304.3708">@cherrypy.expose
def sitemap(self):
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    sitemap = render_menu(head, level, page, sitemap=1)

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
    directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Site Map&lt;/h1&gt;"+sitemap+"&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="cmsxh.20131226100304.3709">class Download:
    @others
</t>
<t tx="cmsxh.20131226100304.3710">@cherrypy.expose
def index(self, filepath):
    return serve_file(filepath, "application/x-download", "attachment")
</t>
<t tx="cmsxh.20131226100304.3770">Ultrasimple Content Management System

V. 0.14 - add uploaded files deletion
V. 0.15 - ready for git remote add to bitbucket
V. 0.16 - change language to English</t>
<t tx="cmsxh.20131226100304.3820"></t>
<t tx="cmsxh.20131226100304.5349"></t>
<t tx="cmsxh.20131226100304.5350">QSplitter::handle {
    background-color: #CAE1FF; /* lightSteelBlue1 */
}

QStackedWidget {
    /* background-color:lightpink; */
    border-color: red;
    padding: 0px;
    /* border-width: 0px; */
    /* background-color: yellow; */
}

QSplitter {
    border-color: white;
    background-color: white;
    border-style: solid;
}

QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    /* 標題字型大小設定 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    /* 沒有特別對應字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* log font 大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* 內文字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;
    /* 下方的 Minibuffer 標題字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    /* 沒有直接對應字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}</t>
<t tx="cmsxh.20131226100304.5351">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="cmsxh.20131226100304.5424">Hope to provide a way for multiple files selection and delete

To delete files, double confirmation is needed

Procedure:

1. add html form for download_list method, one seleciton for each file, as well as providing to send to delete confirmation method.

2. confirmation method list all the to be deleted files, and ask for delete confirmation, is yes for deletion, all the listed files will be delete.

3. for safety of data management, all deleted files should be moved to the garbage files to timed final deletion.
</t>
<t tx="cmsxh.20131226100304.5425">The file format allowed for upload:

1. general files, including 7z, zip and pdf files.

2. graphics files, including png, jpg, gif files.

3. video files, including flv files.

4. audio files, including mp3 files.

5. parts files, including stl, Creo part and assembly, Solvespace files, Solid Edge files.</t>
<t tx="cmsxh.20131226100304.5426">textile library are used to generated sitemap and tree menu unordeded list.

Due to the efficiency problem, textile is not used anymore, custom "render_menu" method is used.</t>
<t tx="cmsxh.20131226100304.5427">@cherrypy.expose
def delete_file(self, filename=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    if filename == None:
        outstring = "no file selected!"
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Delete Error&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
    outstring = "delete all these files?&lt;br /&gt;&lt;br /&gt;"
    outstring += "&lt;form method='post' action='doDelete'&gt;"
    # only one file is selected
    if isinstance(filename, str):
        outstring += filename+"&lt;input type='hidden' name='filename' value='"+filename+"'&gt;&lt;br /&gt;"
    else:
        # multiple files selected
        for index in range(len(filename)):
            outstring += filename[index]+"&lt;input type='hidden' name='filename' value='"+filename[index]+"'&gt;&lt;br /&gt;"
    outstring += "&lt;br /&gt;&lt;input type='submit' value='delete'&gt;&lt;/form&gt;"

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Download List&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="cmsxh.20131226100304.5428">@cherrypy.expose
def doDelete(self, filename=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    # delete files
    outstring = "all these files will be deleted:&lt;br /&gt;&lt;br /&gt;"
    # only select one file
    if isinstance(filename, str):
        try:
            os.remove(download_root_dir+"downloads/"+filename)
            outstring += filename+" deleted!"
        except:
            outstring += filename+"Error, can not delete files!&lt;br /&gt;"
    else:
        # multiple files selected
        for index in range(len(filename)):
            try:
                os.remove(download_root_dir+"downloads/"+filename[index])
                outstring += filename[index]+" deleted!&lt;br /&gt;"
            except:
                outstring += filename[index]+"Error, can not delete files!&lt;br /&gt;"

    head, level, page = parse_content()
    directory = render_menu(head, level, page)

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Download List&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="cmsxh.20131230000041.1602">@cherrypy.expose
def error_log(self, info="Error"):
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
    directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;ERROR&lt;/h1&gt;"+info+"&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="cmsxh.20140101145643.1604">Copyright © 2014 Chiaming Yen

CMSimply is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

CMSimply is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with CMSimply. If not, see &lt;http://www.gnu.org/licenses/&gt;.</t>
<t tx="cmsxh.20140101145643.3406">@cherrypy.expose
def flvplayer(self, filepath=None):
    outstring = '''
&lt;object type="application/x-shockwave-flash" data="/static/player_flv_multi.swf" width="320" height="240"&gt;
     &lt;param name="movie" value="player_flv_multi.swf" /&gt;
     &lt;param name="allowFullScreen" value="true" /&gt;
     &lt;param name="FlashVars" value="flv='''+filepath+'''&amp;amp;width=320&amp;amp;height=240&amp;amp;showstop=1&amp;amp;showvolume=1&amp;amp;showtime=1
     &amp;amp;startimage=/static/startimage_en.jpg&amp;amp;showfullscreen=1&amp;amp;bgcolor1=189ca8&amp;amp;bgcolor2=085c68
     &amp;amp;playercolor=085c68" /&gt;
&lt;/object&gt;
'''
    return outstring
</t>
<t tx="cmsxh.20140108172857.1763">def sizeof_fmt(num):
    for x in ['bytes','KB','MB','GB']:
        if num &lt; 1024.0:
            return "%3.1f%s" % (num, x)
        num /= 1024.0
    return "%3.1f%s" % (num, 'TB')
</t>
<t tx="cmsxh.20140108172857.2428">version on public-cmsimply.rhcloud.com
</t>
<t tx="cmsxh.20140211204322.1703">def __init__(self):
    # hope to create downloads and images directories　
    if not os.path.isdir(download_root_dir+"downloads"):
        try:
            os.makedirs(download_root_dir+"downloads")
        except:
            print("mkdir error")
    if not os.path.isdir(download_root_dir+"images"):
        try:
            os.makedirs(download_root_dir+"images")
        except:
            print("mkdir error")
    if not os.path.isdir(download_root_dir+"tmp"):
        try:
            os.makedirs(download_root_dir+"tmp")
        except:
            print("mkdir error")
    if not os.path.isdir(data_dir+"brython_programs"):
        try:
            os.makedirs(data_dir+"brython_programs")
        except:
            print("mkdir error")
    if not os.path.isdir(data_dir+"calc_programs"):
        try:
            os.makedirs(data_dir+"calc_programs")
        except:
            print("mkdir error")

</t>
<t tx="cmsxh.20140212132226.1610">1. in SSL mode no arrow for menu - modified to use local jquery.js file

2. Brython editor can not save a 700-line program - it is the mailformated URI problem not the timeout problem.

3. upload file will write on top of the duplicated file, in stead of create a new file. (a bug need to fix)

4. duplicated page title problem need to deal with.



</t>
<t tx="cmsxh.20140212132226.1611">add images directory file list

when administrator press list image file button, system will check if thumb images are exist or not, the list will show thum image file and press to view original image file.

We may also want to delete image files.</t>
<t tx="cmsxh.20140212132226.1612">see if we need to delete all the tmp session files after logout</t>
</tnodes>
</leo_file>
