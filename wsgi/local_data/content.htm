<h1>Github 倉儲</h1>
<p>下載 <a href="https://copy.com/YlcBUYGS0RGM">2014PythonE 可攜程式環境</a></p>
<p>2014cda</p>
<p><a href="https://github.com/coursemdetw/2014cda">https://github.com/coursemdetw/2014cda</a></p>
<p>雲端網站: <a href="https://2014cda-mdenfu.rhcloud.com">https://2014cda-mdenfu.rhcloud.com</a></p>
<p>2014cdb</p>
<p><a href="https://github.com/coursemdetw/2014cdb">https://github.com/coursemdetw/2014cdb</a></p>
<p>雲端網站: <a href="https://2014cdb-mdenfu.rhcloud.com">https://2014cdb-mdenfu.rhcloud.com</a></p>
<p>2014c2</p>
<p><a href="https://github.com/coursemdetw/2014c2">https://github.com/coursemdetw/2014c2</a></p>
<p>雲端網站: <a href="https://2014c2-mdenfu.rhcloud.com">https://2014c2-mdenfu.rhcloud.com</a></p>
<p> </p><h1>Vimeo 影片</h1>
<p><a href="http://vimeo.com/user24079973">http://vimeo.com/user24079973</a></p>
<h1>第八週考試</h1>
<p><a href="/inputform">/inputform</a></p>
<p>將 pandoc 轉出的 html 改為 CMSimply 相容的格式:</p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">from bs4 import BeautifulSoup
 
def _remove_attrs(soup):
    for tag in soup.findAll(True): 
        tag.attrs = None
    return soup
 
 
def example():
    doc = '&lt;html&gt;&lt;head&gt;&lt;title&gt;test&lt;/title&gt;&lt;/head&gt;&lt;body id="foo" onload="whatever"&gt;&lt;p class="whatever"&gt;junk&lt;/p&gt;&lt;div style="background: yellow;" id="foo" class="blah"&gt;blah&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;'
    print('Before:\n%s' % doc)
    soup = BeautifulSoup(doc)
    clean_soup = _remove_attrs(soup)
    print('\nAfter:\n%s' % clean_soup)
 
example()</pre>
<p> 假如您的系統沒有<a href="download/?filepath=/var/lib/openshift/5364a49c5973ca5ea9000882/app-root/data//downloads/bs4.7z"> bs4 模組</a>.</p><h1>第九週考試</h1>
<p><a href="/rotate_inputform">/rotate_inputform</a></p>
<h1>第十二週任務</h1>
<p>Video: <a href="https://www.copy.com/s/UfXI6Lu1AM3R">https://www.copy.com/s/UfXI6Lu1AM3R</a></p>
<p>Vimeo: <a href="https://vimeo.com/94899908">https://vimeo.com/94899908</a></p>
<p>評分任務:</p>
<ol>
<li class="level1">
<div class="li">假設 y 座標向上為正, 且原點位於 800×800 畫布左下角, 請在<a class="urlextern" title="https://github.com/coursemdetw/2014c2" href="https://github.com/coursemdetw/2014c2" rel="nofollow">https://github.com/coursemdetw/2014c2</a> 協同程式開發專案中, 新增貴組的程式目錄與 <span class="u">init</span>.py 檔案, 並讓 <a class="urlextern" title="http://2014c2-mdenfu.rhcloud.com/c2g1/triangle" href="http://2014c2-mdenfu.rhcloud.com/c2g1/triangle" rel="nofollow">http://2014c2-mdenfu.rhcloud.com/c2g1/triangle</a> (各組以組別替換 1) 可以藍色 3 單位線畫出一個頂點位於 (100, 100), (150, 250) 與 (400, 400) 的空心三角形. (佔期末成績 5 分)</div>
</li>
<li class="level1">
<div class="li">請將 triangle 連結改為 triangle2 後, 可以在上述三角形中填入紅色.(佔期末成績 5 分)</div>
</li>
</ol>
<p><a href="/c2g1">c2g1</a></p>
<p><a href="/c2g2">c2g2</a></p>
<p><a href="/c2g3">c2g3</a></p>
<p><a href="/c2g4">c2g4</a></p>
<p><a href="/c2g5">c2g5</a></p>
<p><a href="/c2g6">c2g6</a></p>
<p><a href="/c2g7">c2g7</a></p>
<p><a href="/c2g8">c2g8</a></p>
<p><a href="/c2g9">c2g9</a></p>
<p><a href="/c2g10">c2g10</a></p>
<p><a href="/c2g11">c2g11</a></p>
<p><a href="/c2g12">c2g12</a></p>
<p><a href="/c2g13">c2g13</a></p>
<p><a href="/c2g14">c2g14</a></p>
<p><a href="/c2g15">c2g15</a></p>
<p><a href="/c2g16">c2g16</a></p>
<p><a href="/c2g17">c2g17</a></p>
<p><a href="/c2g18">c2g18</a></p>
<p><a href="/c2g19">c2g19</a></p>
<p><a href="/c2g20">c2g20</a></p>
<p><a href="/c2g21">c2g21</a></p>
<p><a href="/c2g22">c2g22</a></p>
<p><a href="/c2g23">c2g23</a></p>
<p> </p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">for i in range(1, 24):
    print("&lt;p&gt;&lt;a href=\"/c2g"+str(i)+"\"&gt;c2g"+str(i)+"&lt;/a&gt;&lt;/p&gt;")</pre>
<p> </p>
<p> </p><h1>第十三週任務</h1>
<p>任務1 (5 分): 請在分組程式中, 繪製一面可以讓使用者直接在雲端選擇大小與位置的日本國旗.</p>
<p>參考下列六個步驟:</p>
<p><a href="/c2g30/w13_1_1">/c2g30/w13_1_1</a></p>
<p><a href="/c2g30/w13_1_2">/c2g30/w13_1_2</a></p>
<p><a href="/c2g30/w13_1_3">/c2g30/w13_1_3</a></p>
<p><a href="/c2g30/w13_1_4">/c2g30/w13_1_4</a></p>
<p><a href="/c2g30/w13_1_5">/c2g30/w13_1_5</a></p>
<p><a href="/c2g30/w13_1_6">/c2g30/w13_1_6</a></p>
<p>以下為最後可以直接在雲端控制大小與位置的版本</p>
<p><a href="/c2g30/w13_1_7?x=10&amp;y=150&amp;w=250">/c2g30/w13_1_7?x=10&amp;y=150&amp;w=250</a></p>
<p>任務2 (10 分): 請在分組程式中, 繪製一面可以讓使用者直接在雲端選擇大小與位置的美國國旗.</p>
<p>任務2 分成兩個部分: 第一部分以文字及圖形說明要如何執行繪圖工作 (5 分), 第二部分則執行實際繪圖 (5 分).</p><h2>日本國旗參考程式</h2>
<p>以下採用六個步驟, 從畫一條線開始到完成國旗的繪製:</p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; "># w13_1_1 是第十三週第一題的第一個步驟
# 目的在畫布上畫一條直線
@cherrypy.expose
def w13_1_1(self, *args, **kwargs):
    outstring = '''
&lt;!DOCTYPE html&gt; 
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;script type="text/javascript" src="/static/Brython2.1.0-20140419-113919/brython.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython({debug:1, cache:'version'})"&gt;
&lt;canvas id="plotarea" width="800" height="800"&gt;&lt;/canvas&gt;
&lt;script type="text/python"&gt;
# 導入 doc
from browser import doc
import math

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")

# 以下可以利用 ctx 物件進行畫圖
# 先畫一條直線
ctx.beginPath()
# 設定線的寬度為 1 個單位
ctx.lineWidth = 1
# 將畫筆移動到 (100, 100) 座標點
ctx.moveTo(100, 100)
# 然後畫直線到 (150, 200) 座標點
ctx.lineTo(150, 200)
# 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
ctx.strokeStyle = "blue"
# 實際執行畫線
ctx.stroke()
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
'''
    return outstring
    
# w13_1_2 是第十三週第一題的第二個步驟
# 目的在畫布上畫四條直線, 然後當作國旗的外框
@cherrypy.expose
def w13_1_2(self, *args, **kwargs):
    outstring = '''
&lt;!DOCTYPE html&gt; 
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;script type="text/javascript" src="/static/Brython2.1.0-20140419-113919/brython.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython({debug:1, cache:'version'})"&gt;
&lt;canvas id="plotarea" width="800" height="800"&gt;&lt;/canvas&gt;
&lt;script type="text/python"&gt;
# 導入 doc
from browser import doc
import math

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")

# 以下可以利用 ctx 物件進行畫圖
# 因為要畫四條直線, 這裡要將畫直線改寫為函式
# 定義畫直線的函式, 以 (x1, y1) 為起點, 畫到 (x2, y2)
def draw_line(x1, y1, x2, y2):
    ctx.beginPath()
    # 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    # 將畫筆移動到 (x1, y1) 座標點
    ctx.moveTo(x1, y1)
    # 然後畫直線到 (x2, y2) 座標點
    ctx.lineTo(x2, y2)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    # 實際執行畫線
    ctx.stroke()
    
# 準備呼叫 draw_line() 四次以便畫出國旗外框四條線
# 假設從 (10, 10) 畫到 (410, 310) 的外框
# 先畫兩條水平線
draw_line(10, 10, 410, 10)
draw_line(10, 310, 410, 310)
# 再畫兩條垂直線
draw_line(10, 10, 10, 310)
draw_line(410, 10, 410, 310)
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
'''
    return outstring
    
# w13_1_3 是第十三週第一題的第三個步驟
# 目的在畫布上畫四條直線, 然後當作國旗的外框
# 而且在框正中心, 畫一個圓
@cherrypy.expose
def w13_1_3(self, *args, **kwargs):
    outstring = '''
&lt;!DOCTYPE html&gt; 
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;script type="text/javascript" src="/static/Brython2.1.0-20140419-113919/brython.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython({debug:1, cache:'version'})"&gt;
&lt;canvas id="plotarea" width="800" height="800"&gt;&lt;/canvas&gt;
&lt;script type="text/python"&gt;
# 導入 doc
from browser import doc
import math

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")

# 以下可以利用 ctx 物件進行畫圖
# 因為要畫四條直線, 這裡要將畫直線改寫為函式
# 定義畫直線的函式, 以 (x1, y1) 為起點, 畫到 (x2, y2)
def draw_line(x1, y1, x2, y2):
    ctx.beginPath()
    # 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    # 將畫筆移動到 (x1, y1) 座標點
    ctx.moveTo(x1, y1)
    # 然後畫直線到 (x2, y2) 座標點
    ctx.lineTo(x2, y2)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    # 實際執行畫線
    ctx.stroke()
    
# 準備呼叫 draw_line() 四次以便畫出國旗外框四條線
# 假設從 (10, 10) 畫到 (410, 310) 的外框
# 先畫兩條水平線
draw_line(10, 10, 410, 10)
draw_line(10, 310, 410, 310)
# 再畫兩條垂直線
draw_line(10, 10, 10, 310)
draw_line(410, 10, 410, 310)

# 以下要在框線中央畫一個圓, 設半徑為 80
ctx.beginPath()
# context.arc(x,y,r,sAngle,eAngle,counterclockwise)
# arc(圓心 x, 圓心 y, 起始角, 終點角, 是否逆時鐘轉)
circle_x = 10 + 400/2
circle_y = 10 + 300/2
ctx.arc(circle_x, circle_y, 80, 0, math.pi*2, true)
ctx.closePath()
# 設線顏色為紅色
ctx.strokeStyle = 'rgb(255, 0, 0)'
ctx.stroke()

# 填色設為紅色
#ctx.fillStyle = 'rgb(255, 0, 0)'
#ctx.fill()

&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
'''
    return outstring
    
# w13_1_4 是第十三週第一題的第四個步驟
# 目的在畫布上畫四條直線, 然後當作國旗的外框
# 而且在框正中心, 畫一個圓, 然後在圓中填入紅色
@cherrypy.expose
def w13_1_4(self, *args, **kwargs):
    outstring = '''
&lt;!DOCTYPE html&gt; 
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;script type="text/javascript" src="/static/Brython2.1.0-20140419-113919/brython.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython({debug:1, cache:'version'})"&gt;
&lt;canvas id="plotarea" width="800" height="800"&gt;&lt;/canvas&gt;
&lt;script type="text/python"&gt;
# 導入 doc
from browser import doc
import math

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")

# 以下可以利用 ctx 物件進行畫圖
# 因為要畫四條直線, 這裡要將畫直線改寫為函式
# 定義畫直線的函式, 以 (x1, y1) 為起點, 畫到 (x2, y2)
def draw_line(x1, y1, x2, y2):
    ctx.beginPath()
    # 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    # 將畫筆移動到 (x1, y1) 座標點
    ctx.moveTo(x1, y1)
    # 然後畫直線到 (x2, y2) 座標點
    ctx.lineTo(x2, y2)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    # 實際執行畫線
    ctx.stroke()
    
# 準備呼叫 draw_line() 四次以便畫出國旗外框四條線
# 假設從 (10, 10) 畫到 (410, 310) 的外框
# 先畫兩條水平線
draw_line(10, 10, 410, 10)
draw_line(10, 310, 410, 310)
# 再畫兩條垂直線
draw_line(10, 10, 10, 310)
draw_line(410, 10, 410, 310)

# 以下要在框線中央畫一個圓, 設半徑為 80
ctx.beginPath()
# context.arc(x,y,r,sAngle,eAngle,counterclockwise)
# arc(圓心 x, 圓心 y, 起始角, 終點角, 是否逆時鐘轉)
circle_x = 10 + 400/2
circle_y = 10 + 300/2
ctx.arc(circle_x, circle_y, 80, 0, math.pi*2, true)
ctx.closePath()
# 設線顏色為紅色
#ctx.strokeStyle = 'rgb(255, 0, 0)'
#ctx.stroke()

# 填色設為紅色
ctx.fillStyle = 'rgb(255, 0, 0)'
ctx.fill()

&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
'''
    return outstring

# w13_1_5 是第十三週第一題的第五個步驟
# 目的在畫布上畫四條直線, 然後當作國旗的外框
# 而且在框正中心, 畫一個圓, 然後在圓中填入紅色
# 將日本國旗以左上角點座標, 及高度作為單位, 寫為函式
@cherrypy.expose
def w13_1_5(self, *args, **kwargs):
    outstring = '''
&lt;!DOCTYPE html&gt; 
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;script type="text/javascript" src="/static/Brython2.1.0-20140419-113919/brython.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython({debug:1, cache:'version'})"&gt;
&lt;canvas id="plotarea" width="800" height="800"&gt;&lt;/canvas&gt;
&lt;script type="text/python"&gt;
# 導入 doc
from browser import doc
import math

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")

# 以下可以利用 ctx 物件進行畫圖
# 因為要畫四條直線, 這裡要將畫直線改寫為函式
# 定義畫直線的函式, 以 (x1, y1) 為起點, 畫到 (x2, y2)
def draw_line(x1, y1, x2, y2):
    global ctx
    ctx.beginPath()
    # 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    # 將畫筆移動到 (x1, y1) 座標點
    ctx.moveTo(x1, y1)
    # 然後畫直線到 (x2, y2) 座標點
    ctx.lineTo(x2, y2)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    # 實際執行畫線
    ctx.stroke()
    
# 將外框線寫成函式, 寬為高的 3/2 倍
# 因為 draw_frame 函式呼叫 draw_line() 因此要在其後定義
def draw_frame(x, y, w):
    # 準備呼叫 draw_line() 四次以便畫出國旗外框四條線
    # 假設從 (x, y) 畫到 (410, 310) 的外框
    # 先畫兩條水平線
    draw_line(x, y, w*3/2+x, y)
    draw_line(x, w+y, w*3/2+x, w+y)
    # 再畫兩條垂直線
    draw_line(x, y, x, w+y)
    draw_line(w*3/2+x, y, w*3/2+x, w+y)

def draw_circle(x, y, r, fill=None):
    global ctx
    ctx.beginPath()
    ctx.arc(x, y, r, 0, math.pi*2, true)
    ctx.closePath()
    if fill == None:
        ctx.fillStyle = 'rgb(255, 0, 0)'
        ctx.fill()
    else:
        ctx.strokeStyle = "rgb(255, 0, 0)"
        ctx.stroke()

# 呼叫 draw_frame()
width = 400
draw_frame(10, 10, width)
# 計算框的中心點座標
x_center = 10 + width*3/2/2
y_center = 10 + width/2
# 中間圓的直徑為寬的 3/5
radius = width*3/5/2
draw_circle(x_center, y_center, radius)
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
'''
    return outstring
    
# w13_1_6 是第十三週第一題的第六個步驟
# 目的在將日本國旗繪製寫成函式
@cherrypy.expose
def w13_1_6(self, *args, **kwargs):
    outstring = '''
&lt;!DOCTYPE html&gt; 
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;script type="text/javascript" src="/static/Brython2.1.0-20140419-113919/brython.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython({debug:1, cache:'version'})"&gt;
&lt;canvas id="plotarea" width="800" height="800"&gt;&lt;/canvas&gt;
&lt;script type="text/python"&gt;
# 導入 doc
from browser import doc
import math

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")

# 以下可以利用 ctx 物件進行畫圖
# 因為要畫四條直線, 這裡要將畫直線改寫為函式
# 定義畫直線的函式, 以 (x1, y1) 為起點, 畫到 (x2, y2)
def draw_line(x1, y1, x2, y2):
    global ctx
    ctx.beginPath()
    # 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    # 將畫筆移動到 (x1, y1) 座標點
    ctx.moveTo(x1, y1)
    # 然後畫直線到 (x2, y2) 座標點
    ctx.lineTo(x2, y2)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    # 實際執行畫線
    ctx.stroke()
    
# 將外框線寫成函式, 寬為高的 3/2 倍
# 因為 draw_frame 函式呼叫 draw_line() 因此要在其後定義
def draw_frame(x, y, w):
    # 準備呼叫 draw_line() 四次以便畫出國旗外框四條線
    # 假設從 (x, y) 畫到 (410, 310) 的外框
    # 先畫兩條水平線
    draw_line(x, y, w*3/2+x, y)
    draw_line(x, w+y, w*3/2+x, w+y)
    # 再畫兩條垂直線
    draw_line(x, y, x, w+y)
    draw_line(w*3/2+x, y, w*3/2+x, w+y)

def draw_circle(x, y, r, fill=None):
    global ctx
    ctx.beginPath()
    ctx.arc(x, y, r, 0, math.pi*2, true)
    ctx.closePath()
    if fill == None:
        ctx.fillStyle = 'rgb(255, 0, 0)'
        ctx.fill()
    else:
        ctx.strokeStyle = "rgb(255, 0, 0)"
        ctx.stroke()

def japan_flag(x, y, w):
    width = w
    draw_frame(x, y, width)
    # 計算框的中心點座標
    x_center = x + width*3/2/2
    y_center = y + width/2
    # 中間圓的直徑為寬的 3/5
    radius = width*3/5/2
    draw_circle(x_center, y_center, radius)

# 呼叫 japan_flag, 以 60 為單位, 用迴圈繪圖
width = 60
# x 方向增量與  y 方向增量
xinc = width*3/2 + 15
yinc = width + 15
for i in range(5):
    for j in range(5):
        japan_flag(10+i*xinc, 10+j*yinc, width)
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
'''
    return outstring</pre>
<p>最後一個步驟就是將繪圖寫成函式外, 還可以從雲端讓使用者控制國旗的位置與大小:</p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; "># w13_1_7 是第十三週第一題的第七個步驟
# 目的在 CherryPy 設置操控變數, 讓使用者可以透過 URL 操控繪圖內容
@cherrypy.expose
def w13_1_7(self, x=10, y=10, w=300, *args, **kwargs):
    outstring = '''
&lt;!DOCTYPE html&gt; 
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;script type="text/javascript" src="/static/Brython2.1.0-20140419-113919/brython.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython({debug:1, cache:'version'})"&gt;
&lt;canvas id="plotarea" width="800" height="800"&gt;&lt;/canvas&gt;
&lt;script type="text/python"&gt;
# 導入 doc
from browser import doc
import math

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")

# 以下可以利用 ctx 物件進行畫圖
# 因為要畫四條直線, 這裡要將畫直線改寫為函式
# 定義畫直線的函式, 以 (x1, y1) 為起點, 畫到 (x2, y2)
def draw_line(x1, y1, x2, y2):
    global ctx
    ctx.beginPath()
    # 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    # 將畫筆移動到 (x1, y1) 座標點
    ctx.moveTo(x1, y1)
    # 然後畫直線到 (x2, y2) 座標點
    ctx.lineTo(x2, y2)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    # 實際執行畫線
    ctx.stroke()
    
# 將外框線寫成函式, 寬為高的 3/2 倍
# 因為 draw_frame 函式呼叫 draw_line() 因此要在其後定義
def draw_frame(x, y, w):
    # 準備呼叫 draw_line() 四次以便畫出國旗外框四條線
    # 假設從 (x, y) 畫到 (410, 310) 的外框
    # 先畫兩條水平線
    draw_line(x, y, w*3/2+x, y)
    draw_line(x, w+y, w*3/2+x, w+y)
    # 再畫兩條垂直線
    draw_line(x, y, x, w+y)
    draw_line(w*3/2+x, y, w*3/2+x, w+y)

def draw_circle(x, y, r, fill=None):
    global ctx
    ctx.beginPath()
    ctx.arc(x, y, r, 0, math.pi*2, true)
    ctx.closePath()
    if fill == None:
        ctx.fillStyle = 'rgb(255, 0, 0)'
        ctx.fill()
    else:
        ctx.strokeStyle = "rgb(255, 0, 0)"
        ctx.stroke()

def japan_flag(x, y, w):
    width = w
    draw_frame(x, y, width)
    # 計算框的中心點座標
    x_center = x + width*3/2/2
    y_center = y + width/2
    # 中間圓的直徑為寬的 3/5
    radius = width*3/5/2
    draw_circle(x_center, y_center, radius)

# 利用外部的 x, y, w 變數來控制國旗位置與大小
# 當所要求\的國旗超出畫布, 則採取畫最大幅的國旗因應
if '''+str(x)+'''+'''+str(int(w)*3/2)+'''&lt; canvas.width and \
    '''+str(y)+'''+'''+str(w)+'''&lt; canvas.width:
    japan_flag('''+str(x)+''', '''+str(y)+''', '''+str(w)+''')
else:
    # 畫出最大面的國旗
    japan_flag(10, 10, 790*2/3)
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
'''
    return outstring
</pre>
<p> </p><h1>第十四週任務</h1>
<p>Video:</p>
<p><a href="https://vimeo.com/96453747">https://vimeo.com/96453747</a></p>
<p><a href="https://copy.com/kcd4F2vg2Tu0">https://copy.com/kcd4F2vg2Tu0</a></p>
<p>假如已知利用機器人程式環境, 可以<a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=from%20browser%20import%20html%2C%20doc%0A%23%20use%20plotarea%20as%20canvas%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0A%23%20%E6%BA%96%E5%82%99%E5%9C%A8%20canvas%20%E4%B8%AD%E7%B9%AA%E5%9C%96%0Adef%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20color%3D%22red%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0Adef%20fill_rectangle(x1%2C%20y1%2C%20x2%2C%20y2%2C%20color%3D%22red%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x1%2C%20y2)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.lineTo(x2%2C%20y1)%0A%20%20%20%20ctx.lineTo(x1%2C%20y1)%0A%20%20%20%20ctx.fillStyle%20%3D%20color%0A%20%20%20%20ctx.fill()%0A%0Actx%20%3D%20canvas.getContext('2d')%0Asize%20%3D%2030%0Afor%20i%20in%20range(size%2B1)%3A%0A%20%20%20%20%23%20%E6%B0%B4%E5%B9%B3%E7%B7%9A%0A%20%20%20%20draw_line(100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20100%2Bi*10%2C%20%22black%22)%0A%20%20%20%20%23%20%E5%9E%82%E7%9B%B4%E7%B7%9A%0A%20%20%20%20draw_line(100%2Bi*10%2C%20100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20%22red%22)%0Afill_rectangle(0%2C%200%2C%20100%2C%20100)&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">繪製線段並著色</a>, 並且<a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=import%20math%0Afrom%20browser%20import%20html%2C%20doc%0A%23%20use%20plotarea%20as%20canvas%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0A%23%20%E6%BA%96%E5%82%99%E5%9C%A8%20canvas%20%E4%B8%AD%E7%B9%AA%E5%9C%96%0Adef%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20color%3D%22red%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0A%23%20x%2C%20y%20%E7%82%BA%E4%B8%AD%E5%BF%83%2C%20%20r%20%E7%82%BA%E5%8D%8A%E5%BE%91%2C%20angle%20%E6%97%8B%E8%BD%89%E8%A7%92%2C%20%20solid%20%E7%A9%BA%E5%BF%83%E6%88%96%E5%AF%A6%E5%BF%83%2C%20%20color%20%E9%A1%8F%E8%89%B2%0Adef%20star(x%2C%20y%2C%20r%2C%20angle%3D0%2C%20solid%3DFalse%2C%20color%3D%22%23f00%22)%3A%0A%20%20%20%20%23%20%E4%BB%A5%20x%2C%20y%20%E7%82%BA%E5%9C%93%E5%BF%83%2C%20%E8%A8%88%E7%AE%97%E4%BA%94%E5%80%8B%E5%A4%96%E9%BB%9E%0A%20%20%20%20deg%20%3D%20math.pi%2F180%0A%20%20%20%20%23%20%E5%9C%93%E5%BF%83%E5%88%B0%E6%B0%B4%E5%B9%B3%E7%B7%9A%E8%B7%9D%E9%9B%A2%0A%20%20%20%20a%20%3D%20r*math.cos(72*deg)%0A%20%20%20%20%23%20a%20%E9%A0%82%E9%BB%9E%E5%90%91%E5%8F%B3%E5%88%B0%E5%85%A7%E9%BB%9E%E8%B7%9D%E9%9B%A2%0A%20%20%20%20b%20%3D%20(r*math.cos(72*deg)%2Fmath.cos(36*deg))*math.sin(36*deg)%0A%20%20%20%20%23%20%E5%88%A9%E7%94%A8%E7%95%A2%E6%B0%8F%E5%AE%9A%E7%90%86%E6%B1%82%E5%85%A7%E9%BB%9E%E5%8D%8A%E5%BE%91%0A%20%20%20%20rin%20%3D%20math.sqrt(a**2%20%2B%20b**2)%0A%20%20%20%20%23%20%E6%9F%A5%E9%A9%97%20a%2C%20b%20%E8%88%87%20rin%0A%20%20%20%20%23print(a%2C%20b%2C%20rin)%0A%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20ctx.beginPath()%0A%20%20%20%20for%20i%20in%20range(5)%3A%0A%20%20%20%20%20%20%20%20xout%20%3D%20(x%20%2B%20r*math.sin((360%2F5)*deg*i%2Bangle*deg))%0A%20%20%20%20%20%20%20%20yout%20%3D%20(y%20%2B%20r*math.cos((360%2F5)*deg*i%2Bangle*deg))%0A%20%20%20%20%20%20%20%20%23%20%E5%A4%96%E9%BB%9E%E5%A2%9E%E9%87%8F%20%2B%201%0A%20%20%20%20%20%20%20%20xout2%20%3D%20x%20%2B%20r*math.sin((360%2F5)*deg*(i%2B1)%2Bangle*deg)%0A%20%20%20%20%20%20%20%20yout2%20%3D%20y%20%2B%20r*math.cos((360%2F5)*deg*(i%2B1)%2Bangle*deg)%0A%20%20%20%20%20%20%20%20xin%20%3D%20x%20%2B%20rin*math.sin((360%2F5)*deg*i%2B36*deg%2Bangle*deg)%0A%20%20%20%20%20%20%20%20yin%20%3D%20y%20%2B%20rin*math.cos((360%2F5)*deg*i%2B36*deg%2Bangle*deg)%0A%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E9%A9%97%E5%A4%96%E9%BB%9E%E8%88%87%E5%85%A7%E9%BB%9E%E5%BA%A7%E6%A8%99%0A%20%20%20%20%20%20%20%20%23print(xout%2C%20yout%2C%20xin%2C%20yin)%0A%20%20%20%20%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%A1%AB%E8%89%B2%0A%20%20%20%20%20%20%20%20%20%20%20%20if(i%3D%3D0)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.moveTo(xout%2C%20yout)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xin%2C%20yin)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xout2%2C%20yout2)%0A%20%20%20%20%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xin%2C%20yin)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xout2%2C%20yout2)%0A%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%A9%BA%E5%BF%83%0A%20%20%20%20%20%20%20%20%20%20%20%20draw_line(xout%2C%20yout%2C%20xin%2C%20yin%2C%20color)%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%95%AB%E7%A9%BA%E5%BF%83%E4%BA%94%E8%8A%92%E6%98%9F%2C%20%E7%84%A1%E9%97%9C%E7%95%AB%E7%B7%9A%E6%AC%A1%E5%BA%8F%2C%20%E8%8B%A5%E5%AF%A6%E5%BF%83%E5%89%87%E8%88%87%E7%95%AB%E7%B7%9A%E6%AC%A1%E5%BA%8F%E6%9C%89%E9%97%9C%0A%20%20%20%20%20%20%20%20%20%20%20%20draw_line(xout2%2C%20yout2%2C%20xin%2C%20yin%2C%20color)%0A%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20ctx.fillStyle%20%3D%20color%0A%20%20%20%20%20%20%20%20ctx.fill()%0A%0Actx%20%3D%20canvas.getContext('2d')%0A'''%0Asize%20%3D%2030%0Afor%20i%20in%20range(size%2B1)%3A%0A%20%20%20%20%23%20%E6%B0%B4%E5%B9%B3%E7%B7%9A%0A%20%20%20%20draw_line(100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20100%2Bi*10%2C%20%22black%22)%0A%20%20%20%20%23%20%E5%9E%82%E7%9B%B4%E7%B7%9A%0A%20%20%20%20draw_line(100%2Bi*10%2C%20100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20%22red%22)%0A'''%0Astar(100%2C%20100%2C%2030%2C%200%2C%20True%2C%20%22%23f00%22)%0A%23star(300%2C%20300%2C%2050%2C%200%2C%20False%2C%20%22%23000%22)%0Afor%20i%20in%20range(5)%3A%0A%20%20%20%20for%20j%20in%20range(5)%3A%0A%20%20%20%20%20%20%20%20star(200%2B65*i%2C%20200%2B65*j%2C%2030%2C%200%2C%20False%2C%20%22%23000%22)&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">繪製五芒星</a>, 而且可以<a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=import%20math%0Afrom%20browser%20import%20html%2C%20doc%0A%23%20use%20plotarea%20as%20canvas%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0A%23%20%E6%BA%96%E5%82%99%E5%9C%A8%20canvas%20%E4%B8%AD%E7%B9%AA%E5%9C%96%0Adef%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20color%3D%22red%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0A%23%20x%2C%20y%20%E7%82%BA%E4%B8%AD%E5%BF%83%2C%20%20r%20%E7%82%BA%E5%8D%8A%E5%BE%91%2C%20angle%20%E6%97%8B%E8%BD%89%E8%A7%92%2C%20%20solid%20%E7%A9%BA%E5%BF%83%E6%88%96%E5%AF%A6%E5%BF%83%2C%20%20color%20%E9%A1%8F%E8%89%B2%0Adef%20star(x%2C%20y%2C%20r%2C%20angle%3D0%2C%20solid%3DFalse%2C%20color%3D%22%23f00%22)%3A%0A%20%20%20%20%23%20%E4%BB%A5%20x%2C%20y%20%E7%82%BA%E5%9C%93%E5%BF%83%2C%20%E8%A8%88%E7%AE%97%E4%BA%94%E5%80%8B%E5%A4%96%E9%BB%9E%0A%20%20%20%20deg%20%3D%20math.pi%2F180%0A%20%20%20%20%23%20%E5%9C%93%E5%BF%83%E5%88%B0%E6%B0%B4%E5%B9%B3%E7%B7%9A%E8%B7%9D%E9%9B%A2%0A%20%20%20%20a%20%3D%20r*math.cos(72*deg)%0A%20%20%20%20%23%20a%20%E9%A0%82%E9%BB%9E%E5%90%91%E5%8F%B3%E5%88%B0%E5%85%A7%E9%BB%9E%E8%B7%9D%E9%9B%A2%0A%20%20%20%20b%20%3D%20(r*math.cos(72*deg)%2Fmath.cos(36*deg))*math.sin(36*deg)%0A%20%20%20%20%23%20%E5%88%A9%E7%94%A8%E7%95%A2%E6%B0%8F%E5%AE%9A%E7%90%86%E6%B1%82%E5%85%A7%E9%BB%9E%E5%8D%8A%E5%BE%91%0A%20%20%20%20rin%20%3D%20math.sqrt(a**2%20%2B%20b**2)%0A%20%20%20%20%23%20%E6%9F%A5%E9%A9%97%20a%2C%20b%20%E8%88%87%20rin%0A%20%20%20%20%23print(a%2C%20b%2C%20rin)%0A%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20ctx.beginPath()%0A%20%20%20%20for%20i%20in%20range(5)%3A%0A%20%20%20%20%20%20%20%20xout%20%3D%20(x%20%2B%20r*math.sin((360%2F5)*deg*i%2Bangle*deg))%0A%20%20%20%20%20%20%20%20yout%20%3D%20(y%20%2B%20r*math.cos((360%2F5)*deg*i%2Bangle*deg))%0A%20%20%20%20%20%20%20%20%23%20%E5%A4%96%E9%BB%9E%E5%A2%9E%E9%87%8F%20%2B%201%0A%20%20%20%20%20%20%20%20xout2%20%3D%20x%20%2B%20r*math.sin((360%2F5)*deg*(i%2B1)%2Bangle*deg)%0A%20%20%20%20%20%20%20%20yout2%20%3D%20y%20%2B%20r*math.cos((360%2F5)*deg*(i%2B1)%2Bangle*deg)%0A%20%20%20%20%20%20%20%20xin%20%3D%20x%20%2B%20rin*math.sin((360%2F5)*deg*i%2B36*deg%2Bangle*deg)%0A%20%20%20%20%20%20%20%20yin%20%3D%20y%20%2B%20rin*math.cos((360%2F5)*deg*i%2B36*deg%2Bangle*deg)%0A%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E9%A9%97%E5%A4%96%E9%BB%9E%E8%88%87%E5%85%A7%E9%BB%9E%E5%BA%A7%E6%A8%99%0A%20%20%20%20%20%20%20%20%23print(xout%2C%20yout%2C%20xin%2C%20yin)%0A%20%20%20%20%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%A1%AB%E8%89%B2%0A%20%20%20%20%20%20%20%20%20%20%20%20if(i%3D%3D0)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.moveTo(xout%2C%20yout)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xin%2C%20yin)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xout2%2C%20yout2)%0A%20%20%20%20%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xin%2C%20yin)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xout2%2C%20yout2)%0A%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%A9%BA%E5%BF%83%0A%20%20%20%20%20%20%20%20%20%20%20%20draw_line(xout%2C%20yout%2C%20xin%2C%20yin%2C%20color)%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%95%AB%E7%A9%BA%E5%BF%83%E4%BA%94%E8%8A%92%E6%98%9F%2C%20%E7%84%A1%E9%97%9C%E7%95%AB%E7%B7%9A%E6%AC%A1%E5%BA%8F%2C%20%E8%8B%A5%E5%AF%A6%E5%BF%83%E5%89%87%E8%88%87%E7%95%AB%E7%B7%9A%E6%AC%A1%E5%BA%8F%E6%9C%89%E9%97%9C%0A%20%20%20%20%20%20%20%20%20%20%20%20draw_line(xout2%2C%20yout2%2C%20xin%2C%20yin%2C%20color)%0A%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20ctx.fillStyle%20%3D%20color%0A%20%20%20%20%20%20%20%20ctx.fill()%0A%0Actx%20%3D%20canvas.getContext('2d')%0A'''%0Asize%20%3D%2030%0Afor%20i%20in%20range(size%2B1)%3A%0A%20%20%20%20%23%20%E6%B0%B4%E5%B9%B3%E7%B7%9A%0A%20%20%20%20draw_line(100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20100%2Bi*10%2C%20%22black%22)%0A%20%20%20%20%23%20%E5%9E%82%E7%9B%B4%E7%B7%9A%0A%20%20%20%20draw_line(100%2Bi*10%2C%20100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20%22red%22)%0A'''%0Astar(100%2C%20100%2C%2030%2C%200%2C%20True%2C%20%22%23f00%22)%0A%23star(300%2C%20300%2C%2050%2C%200%2C%20False%2C%20%22%23000%22)%0Afor%20i%20in%20range(5)%3A%0A%20%20%20%20for%20j%20in%20range(5)%3A%0A%20%20%20%20%20%20%20%20star(200%2B65*i%2C%20200%2B65*j%2C%2030%2C%200%2C%20False%2C%20%22%23000%22)%0A%0AdataURL%20%3D%20canvas.toDataURL()%0Adoc%5B'canvas_image'%5D.src%20%3D%20dataURL%0A&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">影像存檔</a><span>.</span></p>
<p><span>美國國旗定義: <a href="http://en.wikipedia.org/wiki/Flag_of_the_United_States#Specifications">http://en.wikipedia.org/wiki/Flag_of_the_United_States#Specifications</a></span></p>
<p>任務1 (5 分): 請設法在機器人程式環境中, 繪製一面充分利用畫布大小與適當位置的<a href="http://en.wikipedia.org/wiki/File:Vertical_United_States_Flag.svg">美國國旗</a>(請注意國旗方位與顏色定義).</p>
<p><img src="download/?filepath=/var/lib/openshift/5364a49c5973ca5ea9000882/app-root/data//images/c2_w14_task1.png" alt="" width="310" height="275"></p>
<p>任務2 (5 分): 請在機器人程式環境中, 依照任務一的相同格式, 同時在畫布左方放入一面美國國旗, 右方則放入一面中華民國國旗.</p>
<p><img src="download/?filepath=/var/lib/openshift/5364a49c5973ca5ea9000882/app-root/data//images/c2_w14_task2.png" alt="" width="310" height="275"></p>
<p>任務3 (5 分): 同任務一, 但是整面美國國旗要旋轉 45 度角.</p>
<p><img src="download/?filepath=/var/lib/openshift/5364a49c5973ca5ea9000882/app-root/data//images/c2_w14_task3.png" alt="" width="310" height="275"></p><h2>期末成績登錄</h2>
<p>資料已經備份</p>
<p> </p><h1>第十五週任務</h1>
<p>請進入<a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html">機器人程式環境</a></p>
<p>假如機器人只認識:</p>
<p>move() 前進一步</p>
<p>turn_left() 左轉</p>
<p>front_is_clear() 前方沒有障礙, 則傳回 True, 否則傳回 False</p>
<p>right_is_clear() 右方沒有障礙, 則傳回 True, 否則傳回 False</p>
<p>at_goal() 到達目的地, 則傳回 True, 否則傳回 False</p>
<p>請利用下列程式讓機器人練習跨欄動作:</p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; "># 利用三個左轉, 定義右轉
def turn_right():
    repeat(turn_left, 3)

# 利用左右轉與前進定義跨欄動作
def jump_over_hurdle():
    turn_left()
    move()
    move()
    turn_right()
    move()
    move()
    turn_right()
    move()
    move()
    turn_left()

# 呼叫跨欄與前進函式
jump_over_hurdle()
move()
jump_over_hurdle()</pre>
<p>第十五週任務一 (5 分):</p>
<p>請在機器人程式環境中, 寫一個程式, 可讓機器人順利通過障礙物 Hurdles1, 到達淺綠色的定位區.</p>
<p>完成後, 除利用 permalink 取得雲端程式連結, 將其顯示在各組的雲端網站外, 請將題目敘述與解題過程及心得放入各組的協同期末報告區中.</p>
<p>第十五週任務二 (5 分):</p>
<p>同任務一, 但是要跨越 Hurdles3.</p>
<p>第十五週任務三 (5 分):</p>
<p><span style="font-size: 10px;">請設法建立一個程式, 可以</span><span style="font-size: 24px; background-color: #ffffff; color: #ff0000;">同時</span><span style="font-size: 10px;">用來跨越 Hurdles1  與 Hurdles3.</span></p><h1>第十六週任務</h1>
<p>請進入<a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html">機器人程式環境</a></p>
<p>假如機器人只認識:</p>
<p>move() 前進一步</p>
<p>turn_left() 左轉</p>
<p>front_is_clear() 前方沒有障礙, 則傳回 True, 否則傳回 False</p>
<p>right_is_clear() 右方沒有障礙, 則傳回 True, 否則傳回 False</p>
<p>at_goal() 到達目的地, 則傳回 True, 否則傳回 False</p>
<p>請利用下列程式讓機器人練習跨欄動作:</p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; "># 利用三個左轉, 定義右轉
def turn_right():
    repeat(turn_left, 3)

# 利用左右轉與前進定義跨欄動作
def jump_over_hurdle():
    turn_left()
    move()
    move()
    turn_right()
    move()
    move()
    turn_right()
    move()
    move()
    turn_left()

# 呼叫跨欄與前進函式
jump_over_hurdle()
move()
jump_over_hurdle()</pre>
<p>第十六週任務一 (5 分):</p>
<p>請在機器人程式環境中, 寫一個程式, 可讓機器人順利通過障礙物 Hurdles4, 到達淺綠色的定位區.</p>
<p>完成後, 除利用 permalink 取得雲端程式連結, 將其顯示在各組的雲端網站外, 請將題目敘述與解題過程及心得放入各組的協同期末報告區中.</p>
<p>第十六週任務二 (10 分):</p>
<p>同任務一, 但是此一程式要能同時跨越 Hurdles1, 2, 與 3.</p>
<p>參考程式:</p>
<p>在未遍歷場地的情況下, 電腦鼠走迷宮的行進策略(<a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html">Reeborg</a> 走 Maze 1 ~ Maze 4).</p>
<p>一般<a href="http://robot.lhu.edu.tw/download/A-1rule.pdf">電腦鼠</a>(<a href="http://www.roombavac.com.tw/product/780.html">掃地機器人</a>, Amazon 的<a href="http://technews.tw/2014/01/20/amazon-patent-shipping-before-you-but-it/">預先出貨系統</a>, <a href="https://docs.google.com/viewer?url=patentimages.storage.googleapis.com/pdfs/US8615473.pdf">預出貨專利</a> (機器人走範圍及內容均未知的迷宮))都有類似的行進策略程式, 但真正能夠以最佳路徑抵達終點的關鍵, 除了軟體策略外, 差別在於行進動力的速度(Amazon 的無人運送小飛機或出貨的補給系統)與轉彎處的加減速搭配(最佳化動態系統與控制, 以 Amazon 而言就是各分部的庫存量系統分析與控管).</p>
<p>若以行進動力而言, 通常需要一組高效的動力馬達, 而動態系統則需要納入系統化分析與各式控制理論 (需要高效的分析晶片控制模組與控制原理), 例如: <a href="https://lockitron.com/">Lockitron</a>, 其優勢在於高效的 Wifi 晶片控制組(電子與資工), 機構組(機械設計與控制)以及背後的雲端資料控管暨行銷系統(資訊管理).</p>
<p>手扶左牆</p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">def turn_right():
    for i in range(3):
        turn_left()
def left_is_clear():
    turn_left()
    if front_is_clear():
        turn_right()
        return True
    else:
        turn_right()
        return False

while not at_goal():
    if not left_is_clear() and front_is_clear():
        move()
    elif left_is_clear():
        turn_left()
        move()
    else:
        turn_right()</pre>
<p>手扶右牆</p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">def turn_right():
    for i in range(3):
        turn_left()

while not at_goal():
    if not right_is_clear() and front_is_clear():
        move()
    elif right_is_clear():
        turn_right()
        move()
    else:
        turn_left()</pre>
<p> </p><h2>教材整理</h2>
<p>教材二與教材三資料整理</p>
<p>利用第十七週與第十八週從此二份教材中, 採全班協同的方式, 將適合納入本課程的資料放入各組的分工報告中 (Github 專案)</p>
<p>本任務佔期末成績 30 分</p>
<p>教材二: <a href="http://www.codedata.com.tw/python/python-tutorial-the-1st-class-1-preface">http://www.codedata.com.tw/python/python-tutorial-the-1st-class-1-preface</a></p>
<p>教材三: <a href="http://copy.com/FY7sBio0XgSk">http://copy.com/FY7sBio0XgSk</a></p>
<p>任務一 (10 分): 各組必須明確標示全班各組所納入的分工內容與章節配置.</p>
<p>任務二 (10 分): 各組根據任務一的分配, 將內容以本課程的近端與遠端 (Reeborg) 程式執行模式, 放入各組的協同文件中, 其中包含圖, 文, 以及放在 Vimeo 與 Copy.com 的示範 FLV 檔案連結.</p>
<p>任務三 (10 分): 確定各組能夠在協同文件專案中, 以 pandoc 完成 pdf 及 html 格式的資料, 並且設法利用<a href="http://wiki.mde.tw/doku.php?id=%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80:2014s_week8">第八週的程式</a>, 將全班所產生的 html 轉換為適合放入各組雲端 CMSimply 網站中的格式.</p>
<p><a href="download/?filepath=/var/lib/openshift/5364a49c5973ca5ea9000882/app-root/data//downloads/bs4.7z">bs7.7z 模組</a></p>
<p> </p>
<p> </p>
<p> </p><h2>機器人程式環境</h2>
<p>機器人動態模擬</p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">def square(step):
    for j in range(4):
        for i in range(step):
            move()
        turn_left()

for i in range(1, 11):        
    square(i)</pre>
<p>目前必須在 http 模式下運作</p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg">/static/reeborg</a><span style="font-size: 10px;"><br></span></p>
<p>以下<a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22robots%22%3A%5B%7B%22x%22%3A1%2C%22y%22%3A1%2C%22tokens%22%3A%22infinite%22%2C%22orientation%22%3A0%2C%22_prev_x%22%3A1%2C%22_prev_y%22%3A1%2C%22_prev_orientation%22%3A0%7D%5D%2C%22large_world%22%3Afalse%7D&amp;editor=def%20square(step)%3A%0A%20%20%20%20for%20j%20in%20range(4)%3A%0A%20%20%20%20%20%20%20%20for%20i%20in%20range(step)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20move()%0A%20%20%20%20%20%20%20%20turn_left()%0A%20%0Afor%20i%20in%20range(1%2C%2011)%3A%20%20%20%20%20%20%20%20%0A%20%20%20%20square(i)&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0A%0A">模擬程式連結</a> (頁面連結完成後, 以滑鼠按下左上方的執行鍵).</p>
<p>也可以在程式中<a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22robots%22%3A%5B%7B%22x%22%3A1%2C%22y%22%3A1%2C%22tokens%22%3A%22infinite%22%2C%22orientation%22%3A0%2C%22_prev_x%22%3A1%2C%22_prev_y%22%3A1%2C%22_prev_orientation%22%3A0%7D%5D%7D&amp;editor=def%20%E7%B9%9E%E6%AD%A3%E6%96%B9%E5%BD%A2(%E8%B5%B0%E5%B9%BE%E6%AD%A5)%3A%0A%20%20%20%20for%20j%20in%20range(4)%3A%0A%20%20%20%20%20%20%20%20for%20i%20in%20range(%E8%B5%B0%E5%B9%BE%E6%AD%A5)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20move()%0A%20%20%20%20%20%20%20%20turn_left()%0A%20%0Afor%20i%20in%20range(1%2C%2011)%3A%20%20%20%20%20%20%20%20%0A%20%20%20%20%E7%B9%9E%E6%AD%A3%E6%96%B9%E5%BD%A2(i)&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0A%0A">使用中文作為變數</a>.</p>
<p><iframe src="flvplayer?filepath=/downloads/reeborg_robot.flv" frameborder="0" width="500" height="375"></iframe></p>
<p>進入 Reeborg 李伯機器人的世界(李伯目前通曉 Python 3, JavaScript, CoffeeScript):</p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22robots%22%3A%5B%7B%22x%22%3A1%2C%22y%22%3A1%2C%22tokens%22%3A%22infinite%22%2C%22orientation%22%3A0%2C%22_prev_x%22%3A1%2C%22_prev_y%22%3A1%2C%22_prev_orientation%22%3A0%7D%5D%2C%22goal%22%3A%7B%22position%22%3A%7B%22x%22%3A3%2C%22y%22%3A1%7D%2C%22tokens%22%3A%7B%223%2C2%22%3A1%7D%7D%2C%22tokens%22%3A%7B%222%2C2%22%3A1%7D%2C%22walls%22%3A%7B%222%2C1%22%3A%5B%22east%22%5D%2C%222%2C2%22%3A%5B%22east%22%5D%2C%222%2C3%22%3A%5B%22north%22%5D%2C%221%2C3%22%3A%5B%22east%22%5D%2C%223%2C3%22%3A%5B%22north%22%2C%22east%22%5D%7D%7D&amp;editor=sound(%22on%22)%0Aimport%20my_lib%0Amove()%0Aturn_left()%0Amove()%0Apick_beeper()%0Amove()%0Aturn_right()%0Amove()%0Aturn_right()%0Amove()%0Aput_beeper()%0Amove()&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">聲音, 前進, 取 beeper, 放 beeper</a></p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=from%20browser%20import%20html%2C%20doc%0A%23%20use%20plotarea%20as%20canvas%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0A%23%20%E6%BA%96%E5%82%99%E5%9C%A8%20canvas%20%E4%B8%AD%E7%B9%AA%E5%9C%96%0Adef%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20color%3D%22red%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0A%0Actx%20%3D%20canvas.getContext('2d')%0Asize%20%3D%2030%0Afor%20i%20in%20range(size%2B1)%3A%0A%20%20%20%20%23%20%E6%B0%B4%E5%B9%B3%E7%B7%9A%0A%20%20%20%20draw_line(100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20100%2Bi*10%2C%20%22black%22)%0A%20%20%20%20%23%20%E5%9E%82%E7%9B%B4%E7%B7%9A%0A%20%20%20%20draw_line(100%2Bi*10%2C%20100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20%22red%22)&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">畫格線</a></p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=from%20browser%20import%20html%2C%20doc%0A%23%20use%20plotarea%20as%20canvas%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0A%23%20%E6%BA%96%E5%82%99%E5%9C%A8%20canvas%20%E4%B8%AD%E7%B9%AA%E5%9C%96%0Adef%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20color%3D%22red%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0Adef%20fill_rectangle(x1%2C%20y1%2C%20x2%2C%20y2%2C%20color%3D%22red%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x1%2C%20y2)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.lineTo(x2%2C%20y1)%0A%20%20%20%20ctx.lineTo(x1%2C%20y1)%0A%20%20%20%20ctx.fillStyle%20%3D%20color%0A%20%20%20%20ctx.fill()%0A%0Actx%20%3D%20canvas.getContext('2d')%0Asize%20%3D%2030%0Afor%20i%20in%20range(size%2B1)%3A%0A%20%20%20%20%23%20%E6%B0%B4%E5%B9%B3%E7%B7%9A%0A%20%20%20%20draw_line(100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20100%2Bi*10%2C%20%22black%22)%0A%20%20%20%20%23%20%E5%9E%82%E7%9B%B4%E7%B7%9A%0A%20%20%20%20draw_line(100%2Bi*10%2C%20100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20%22red%22)%0Afill_rectangle(0%2C%200%2C%20100%2C%20100)&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">畫格線, 多邊形填色</a></p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=import%20math%0Afrom%20browser%20import%20html%2C%20doc%0A%23%20use%20plotarea%20as%20canvas%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0A%23%20%E6%BA%96%E5%82%99%E5%9C%A8%20canvas%20%E4%B8%AD%E7%B9%AA%E5%9C%96%0Adef%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20color%3D%22red%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0A%23%20x%2C%20y%20%E7%82%BA%E4%B8%AD%E5%BF%83%2C%20%20r%20%E7%82%BA%E5%8D%8A%E5%BE%91%2C%20angle%20%E6%97%8B%E8%BD%89%E8%A7%92%2C%20%20solid%20%E7%A9%BA%E5%BF%83%E6%88%96%E5%AF%A6%E5%BF%83%2C%20%20color%20%E9%A1%8F%E8%89%B2%0Adef%20star(x%2C%20y%2C%20r%2C%20angle%3D0%2C%20solid%3DFalse%2C%20color%3D%22%23f00%22)%3A%0A%20%20%20%20%23%20%E4%BB%A5%20x%2C%20y%20%E7%82%BA%E5%9C%93%E5%BF%83%2C%20%E8%A8%88%E7%AE%97%E4%BA%94%E5%80%8B%E5%A4%96%E9%BB%9E%0A%20%20%20%20deg%20%3D%20math.pi%2F180%0A%20%20%20%20%23%20%E5%9C%93%E5%BF%83%E5%88%B0%E6%B0%B4%E5%B9%B3%E7%B7%9A%E8%B7%9D%E9%9B%A2%0A%20%20%20%20a%20%3D%20r*math.cos(72*deg)%0A%20%20%20%20%23%20a%20%E9%A0%82%E9%BB%9E%E5%90%91%E5%8F%B3%E5%88%B0%E5%85%A7%E9%BB%9E%E8%B7%9D%E9%9B%A2%0A%20%20%20%20b%20%3D%20(r*math.cos(72*deg)%2Fmath.cos(36*deg))*math.sin(36*deg)%0A%20%20%20%20%23%20%E5%88%A9%E7%94%A8%E7%95%A2%E6%B0%8F%E5%AE%9A%E7%90%86%E6%B1%82%E5%85%A7%E9%BB%9E%E5%8D%8A%E5%BE%91%0A%20%20%20%20rin%20%3D%20math.sqrt(a**2%20%2B%20b**2)%0A%20%20%20%20%23%20%E6%9F%A5%E9%A9%97%20a%2C%20b%20%E8%88%87%20rin%0A%20%20%20%20%23print(a%2C%20b%2C%20rin)%0A%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20ctx.beginPath()%0A%20%20%20%20for%20i%20in%20range(5)%3A%0A%20%20%20%20%20%20%20%20xout%20%3D%20(x%20%2B%20r*math.sin((360%2F5)*deg*i%2Bangle*deg))%0A%20%20%20%20%20%20%20%20yout%20%3D%20(y%20%2B%20r*math.cos((360%2F5)*deg*i%2Bangle*deg))%0A%20%20%20%20%20%20%20%20%23%20%E5%A4%96%E9%BB%9E%E5%A2%9E%E9%87%8F%20%2B%201%0A%20%20%20%20%20%20%20%20xout2%20%3D%20x%20%2B%20r*math.sin((360%2F5)*deg*(i%2B1)%2Bangle*deg)%0A%20%20%20%20%20%20%20%20yout2%20%3D%20y%20%2B%20r*math.cos((360%2F5)*deg*(i%2B1)%2Bangle*deg)%0A%20%20%20%20%20%20%20%20xin%20%3D%20x%20%2B%20rin*math.sin((360%2F5)*deg*i%2B36*deg%2Bangle*deg)%0A%20%20%20%20%20%20%20%20yin%20%3D%20y%20%2B%20rin*math.cos((360%2F5)*deg*i%2B36*deg%2Bangle*deg)%0A%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E9%A9%97%E5%A4%96%E9%BB%9E%E8%88%87%E5%85%A7%E9%BB%9E%E5%BA%A7%E6%A8%99%0A%20%20%20%20%20%20%20%20%23print(xout%2C%20yout%2C%20xin%2C%20yin)%0A%20%20%20%20%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%A1%AB%E8%89%B2%0A%20%20%20%20%20%20%20%20%20%20%20%20if(i%3D%3D0)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.moveTo(xout%2C%20yout)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xin%2C%20yin)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xout2%2C%20yout2)%0A%20%20%20%20%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xin%2C%20yin)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xout2%2C%20yout2)%0A%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%A9%BA%E5%BF%83%0A%20%20%20%20%20%20%20%20%20%20%20%20draw_line(xout%2C%20yout%2C%20xin%2C%20yin%2C%20color)%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%95%AB%E7%A9%BA%E5%BF%83%E4%BA%94%E8%8A%92%E6%98%9F%2C%20%E7%84%A1%E9%97%9C%E7%95%AB%E7%B7%9A%E6%AC%A1%E5%BA%8F%2C%20%E8%8B%A5%E5%AF%A6%E5%BF%83%E5%89%87%E8%88%87%E7%95%AB%E7%B7%9A%E6%AC%A1%E5%BA%8F%E6%9C%89%E9%97%9C%0A%20%20%20%20%20%20%20%20%20%20%20%20draw_line(xout2%2C%20yout2%2C%20xin%2C%20yin%2C%20color)%0A%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20ctx.fillStyle%20%3D%20color%0A%20%20%20%20%20%20%20%20ctx.fill()%0A%0Actx%20%3D%20canvas.getContext('2d')%0A'''%0Asize%20%3D%2030%0Afor%20i%20in%20range(size%2B1)%3A%0A%20%20%20%20%23%20%E6%B0%B4%E5%B9%B3%E7%B7%9A%0A%20%20%20%20draw_line(100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20100%2Bi*10%2C%20%22black%22)%0A%20%20%20%20%23%20%E5%9E%82%E7%9B%B4%E7%B7%9A%0A%20%20%20%20draw_line(100%2Bi*10%2C%20100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20%22red%22)%0A'''%0Astar(100%2C%20100%2C%2030%2C%200%2C%20True%2C%20%22%23f00%22)%0A%23star(300%2C%20300%2C%2050%2C%200%2C%20False%2C%20%22%23000%22)%0Afor%20i%20in%20range(5)%3A%0A%20%20%20%20for%20j%20in%20range(5)%3A%0A%20%20%20%20%20%20%20%20star(200%2B65*i%2C%20200%2B65*j%2C%2030%2C%200%2C%20False%2C%20%22%23000%22)&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">五芒星繪圖</a></p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=%23coding%3A%20utf-8%0Afrom%20math%20import%20*%0Aimport%20time%0A%23import%20random%0A%23%20%E6%BA%96%E5%82%99%E7%B9%AA%E5%9C%96%E7%95%AB%E5%B8%83%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0Actx%20%3D%20canvas.getContext(%222d%22)%0A%23%20%E5%AE%9A%E7%BE%A9%E5%BA%A7%E6%A8%99%E8%BD%89%E6%8F%9B(0%2C%200)%20%E5%88%B0%20(75%2C%2020)%0Adef%20change_ref_system(x%2C%20y)%3A%0A%20%20%20%20return%20(20%20%2B%20x%20*%208%2C%20420%20-%20y%20*%2020)%0A%23%20%E5%AE%9A%E7%BE%A9%E7%95%AB%E7%B7%9A%E5%87%BD%E5%BC%8F%0Adef%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20linethick%20%3D%203%2C%20color%20%3D%20%22black%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.lineWidth%20%3D%20linethick%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0A%23%20%E5%AE%9A%E7%BE%A9%E4%B8%80%E5%80%8B%E9%BB%9E%E9%A1%9E%E5%88%A5%0Aclass%20Point%3A%0A%20%20%20%20def%20__init__(self%2C%20x%2C%20y)%3A%0A%20%20%20%20%20%20%20%20self.x%20%3D%20x%0A%20%20%20%20%20%20%20%20self.y%20%3D%20y%0A%20%20%20%20def%20distanceTo(self%2C%20obj)%3A%0A%20%20%20%20%20%20%20%20if%20isinstance(obj%2C%20Point)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20sqrt(pow(obj.x%20-%20self.x%2C%202)%20%2B%20pow(obj.y-%20self.y%2C%202))%0A%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20raise%20TypeError(%22Invalid%20type%20in%20Point.distanceTo()%22)%0A%23%20%E5%AE%9A%E7%BE%A9%E4%B8%80%E5%80%8B%E7%B7%9A%E9%A1%9E%E5%88%A5%0Aclass%20Line%3A%0A%20%20%20%20def%20__init__(self%2C%20p1%2C%20p2)%3A%0A%20%20%20%20%20%20%20%20self.p1%20%3D%20p1%0A%20%20%20%20%20%20%20%20self.p2%20%3D%20p2%0A%20%20%20%20%20%20%20%20%23%20%E5%AE%9A%E7%BE%A9%E4%B8%80%E5%80%8B%20Line%20%E7%9A%84%E5%B1%AC%E6%80%A7%20length%0A%20%20%20%20%20%20%20%20self.length%20%3D%20self.p1.distanceTo(self.p2)%0A%20%20%20%20%20%20%20%20self.deg%20%3D%20pi%2F180%0A%20%20%20%20def%20rotate(self%2C%20angle)%3A%0A%20%20%20%20%20%20%20%20%23%20%E4%BB%A5%20p1%20%20%E7%82%BA%E6%97%8B%E8%BD%89%E4%B8%AD%E5%BF%83%E9%BB%9E%0A%20%20%20%20%20%20%20%20%23%20angle%20%E7%82%BA%E5%8F%B3%E6%89%8B%E5%89%87%E6%97%8B%E8%BD%89%E8%A7%92%E5%BA%A6%0A%20%20%20%20%20%20%20%20%23%20%E9%80%99%E8%A3%A1%E4%BB%A5%E5%B7%A6%E4%B8%8A%E8%A7%92%E7%82%BA%E5%8E%9F%E9%BB%9E%2C%20x%20%E5%90%91%E5%8F%B3%E7%82%BA%E6%AD%A3%2C%20y%20%E5%90%91%E4%B8%8B%E7%82%BA%E6%AD%A3%0A%20%20%20%20%20%20%20%20self.p2.x%20%3D%20self.p1.x%20%2B%20self.length*cos(angle*self.deg)%0A%20%20%20%20%20%20%20%20self.p2.y%20%3D%20self.p1.y%20-%20self.length*sin(angle*self.deg)%0A%23%20%E5%AE%9A%E7%BE%A9%E4%B8%80%E5%80%8B%E5%9B%9E%E5%91%BC%E7%B9%AA%E5%9C%96%E5%87%BD%E5%BC%8F%0Adataset%20%3D%20%5B%5D%0Adef%20graph()%3A%0A%20%20%20%20p1%20%3D%20Point(0%2C%200)%0A%20%20%20%20p2%20%3D%20Point(10%2C%200)%0A%20%20%20%20data%20%3D%20random.random()%20*%2020%0A%20%20%20%20doc%5B%22dataarea%22%5D%20%3C%3D%20'%25s%2C%20'%20%25%20str(data)%5B0%3A5%5D%0A%20%20%20%20dataset.append(data)%0A%20%20%20%20if%20len(dataset)%20%3D%3D%201%3A%0A%20%20%20%20%20%20%20%20x%2C%20y%20%3D%20change_ref_system(len(dataset)%2C%20data)%0A%20%20%20%20%20%20%20%20draw_line(x%2C%20y%2C%20x%2C%20y%2C%20linethick%3D3%2C%20color%3D%22blue%22)%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20x1%2C%20y1%20%3D%20change_ref_system(len(dataset)-1%2C%20dataset%5B-2%5D)%0A%20%20%20%20%20%20%20%20x2%2C%20y2%20%3D%20change_ref_system(len(dataset)%2C%20data)%0A%20%20%20%20%20%20%20%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20linethick%3D3%2C%20color%3D%22blue%22)%0A%20%20%20%20if%20len(dataset)%20%3E%3D%20100%3A%0A%20%20%20%20%20%20%20%20print(len(dataset))%0A%20%20%20%20%20%20%20%20time.clear_interval(work)%0Ap1%20%3D%20Point(0%2C%200)%0Ap2%20%3D%20Point(10%2C%200)%0Ap3%20%3D%20Point(6.5%2C%207.8)%0Aprint(%22%E9%BB%9E%20p1%20%E5%88%B0%E9%BB%9E%20p2%20%E7%9A%84%E8%B7%9D%E9%9B%A2%3A%22%2C%20p1.distanceTo(p2))%0Aline1%20%3D%20Line(p1%2C%20p2)%0Aprint(%22%E7%B7%9A%20line1%20%E7%9A%84%E9%95%B7%E5%BA%A6%3A%22%2C%20line1.length)%0A%23%20%E4%BB%A5%20p3%20%E7%82%BA%E5%9C%93%E5%BF%83%2C%20%E6%97%8B%E8%BD%89%2090%20%E5%BA%A6%0Aline1.rotate(90)%0A%23work%20%3D%20time.set_interval(graph%2C%20100)%0Aprint(%22%E6%97%8B%E8%BD%89%E5%BE%8C%2C%20line1%20%E7%9A%84%E9%95%B7%E5%BA%A6%3A%22%2C%20line1.length)%0Aprint(%22%E6%97%8B%E8%BD%89%E5%BE%8C%2C%20p1%20%E7%9A%84%E5%BA%A7%E6%A8%99%3A%22%2C%20line1.p1.x%2C%20%22%2C%22%2C%20line1.p1.y)%0Aprint(%22%E6%97%8B%E8%BD%89%E5%BE%8C%2C%20p2%20%E7%9A%84%E5%BA%A7%E6%A8%99%3A%22%2C%20line1.p2.x%2C%20%22%2C%22%2C%20%20line1.p2.y)%0Ax1%2C%20y1%20%3D%20change_ref_system(0%2C%200)%0Afor%20%E7%B4%A2%E5%BC%95%20in%20range(0%2C%2070%2C%204)%3A%0A%20%20%20%20x2%2C%20y2%20%3D%20change_ref_system(%E7%B4%A2%E5%BC%95%2C%2020)%0A%20%20%20%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20linethick%3D3%2C%20color%3D%22blue%22)%0Ax1%2C%20y1%20%3D%20change_ref_system(70%2C%200)%0Afor%20%E7%B4%A2%E5%BC%95%20in%20range(0%2C%2070%2C%204)%3A%0A%20%20%20%20x2%2C%20y2%20%3D%20change_ref_system(%E7%B4%A2%E5%BC%95%2C%2020)%0A%20%20%20%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20linethick%3D3%2C%20color%3D%22red%22)&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">繪圖 + 李伯寫程式執行記錄 (日記)</a></p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=from%20browser%20import%20html%2C%20doc%0A%23%20use%20background_canvas%20as%20canvas%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0A%23%20use%20canvas%20to%20create%202d%20graphics%20context%0Actx%20%3D%20canvas.getContext('2d')%0A%0A%23%20create%20draw_line%20function%0Adef%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20color%3D%22red%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0A%0A%23%20save%20the%20default%20state%0Actx.save()%0A%23%20enter%20into%20the%20new%20coordinate%20state%0AoffsetY%20%3D%20canvas.height%0Aprint(offsetY)%0Actx.translate(0%2C%20offsetY)%3B%0Actx.scale(1%2C%20-1)%3B%0Adraw_line(0%2C%200%2C%20100%2C%20100)%0A%0A%23%20restore%20to%20the%20default%20state%0Actx.restore()%0Actx.fillText(%22%E5%8F%AF%E4%BB%A5%E5%AF%AB%E4%B8%AD%E6%96%87%22%2C%20100%2C%20300)%0Adraw_line(100%2C%20100%2C%20300%2C%20offsetY)%0Actx.fillText(%22%E5%8F%AF%E4%BB%A5%E5%AF%AB%E4%B8%AD%E6%96%87%22%2C%20100%2C%20400)&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">畫布中寫中文, save 與 restore</a></p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=import%20math%0Afrom%20browser%20import%20doc%0Aimport%20browser.timer%0A%0Adef%20draw_circle(x%2C%20y%2C%20r%2C%20linethick%3D1%2C%20color%3D%22black%22)%3A%0A%20%20%20%20global%20ctx%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.lineWidth%20%3D%20linethick%0A%20%20%20%20ctx.arc(x%2C%20y%2C%20r%2C%200%2C%20math.pi*2%2C%20true)%0A%20%20%20%20ctx.closePath()%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0A%0Adef%20draw()%3A%0A%20%20%20%20global%20theta%2C%20ctx%2C%20canvas%2C%20x%2C%20y%2C%20r%2C%20dx%2C%20dy%0A%20%20%20%20%23%20clear%20canvas%20context%0A%20%20%20%20ctx.clearRect(0%2C%200%2C%20canvas.width%2C%20canvas.height)%0A%20%20%20%20%23%20draw%20circle%0A%20%20%20%20draw_circle(x%2C%20y%2C%2010)%0A%20%20%20%20%23%20calculate%20new%20x%2C%20y%20position%0A%20%20%20%20theta%20%3D%20theta%20%2B%20dx%0A%20%20%20%20x%20%3D%20200%20%2B%20r*math.cos(theta*math.pi%2F180)%0A%20%20%20%20y%20%3D%20200%20-%20r*math.sin(2*theta*math.pi%2F180)%0A%20%0A%20%0Ax%2C%20y%2C%20r%20%3D%20200%2C%20200%2C%2050%0A%23%20define%20canvas%20and%20context%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0Actx%20%3D%20canvas.getContext(%222d%22)%0A%23%20fourbar%20linkage%20inputs%0Atheta%20%3D%200%0Adegree%20%3D%20math.pi%2F180%0Adx%20%3D%202%0Ady%20%3D%204%0A%0Abrowser.timer.set_interval(draw%2C%2010)&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">動態模擬</a></p>
<p>將畫布中的影像存檔 (內定為 png 格式):</p>
<p>在畫布繪圖結束後, 加入以下兩行, 就可以在 canvas_image 處以滑鼠右鍵將<a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=import%20math%0Afrom%20browser%20import%20html%2C%20doc%0A%23%20use%20plotarea%20as%20canvas%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0A%23%20%E6%BA%96%E5%82%99%E5%9C%A8%20canvas%20%E4%B8%AD%E7%B9%AA%E5%9C%96%0Adef%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20color%3D%22red%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0A%23%20x%2C%20y%20%E7%82%BA%E4%B8%AD%E5%BF%83%2C%20%20r%20%E7%82%BA%E5%8D%8A%E5%BE%91%2C%20angle%20%E6%97%8B%E8%BD%89%E8%A7%92%2C%20%20solid%20%E7%A9%BA%E5%BF%83%E6%88%96%E5%AF%A6%E5%BF%83%2C%20%20color%20%E9%A1%8F%E8%89%B2%0Adef%20star(x%2C%20y%2C%20r%2C%20angle%3D0%2C%20solid%3DFalse%2C%20color%3D%22%23f00%22)%3A%0A%20%20%20%20%23%20%E4%BB%A5%20x%2C%20y%20%E7%82%BA%E5%9C%93%E5%BF%83%2C%20%E8%A8%88%E7%AE%97%E4%BA%94%E5%80%8B%E5%A4%96%E9%BB%9E%0A%20%20%20%20deg%20%3D%20math.pi%2F180%0A%20%20%20%20%23%20%E5%9C%93%E5%BF%83%E5%88%B0%E6%B0%B4%E5%B9%B3%E7%B7%9A%E8%B7%9D%E9%9B%A2%0A%20%20%20%20a%20%3D%20r*math.cos(72*deg)%0A%20%20%20%20%23%20a%20%E9%A0%82%E9%BB%9E%E5%90%91%E5%8F%B3%E5%88%B0%E5%85%A7%E9%BB%9E%E8%B7%9D%E9%9B%A2%0A%20%20%20%20b%20%3D%20(r*math.cos(72*deg)%2Fmath.cos(36*deg))*math.sin(36*deg)%0A%20%20%20%20%23%20%E5%88%A9%E7%94%A8%E7%95%A2%E6%B0%8F%E5%AE%9A%E7%90%86%E6%B1%82%E5%85%A7%E9%BB%9E%E5%8D%8A%E5%BE%91%0A%20%20%20%20rin%20%3D%20math.sqrt(a**2%20%2B%20b**2)%0A%20%20%20%20%23%20%E6%9F%A5%E9%A9%97%20a%2C%20b%20%E8%88%87%20rin%0A%20%20%20%20%23print(a%2C%20b%2C%20rin)%0A%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20ctx.beginPath()%0A%20%20%20%20for%20i%20in%20range(5)%3A%0A%20%20%20%20%20%20%20%20xout%20%3D%20(x%20%2B%20r*math.sin((360%2F5)*deg*i%2Bangle*deg))%0A%20%20%20%20%20%20%20%20yout%20%3D%20(y%20%2B%20r*math.cos((360%2F5)*deg*i%2Bangle*deg))%0A%20%20%20%20%20%20%20%20%23%20%E5%A4%96%E9%BB%9E%E5%A2%9E%E9%87%8F%20%2B%201%0A%20%20%20%20%20%20%20%20xout2%20%3D%20x%20%2B%20r*math.sin((360%2F5)*deg*(i%2B1)%2Bangle*deg)%0A%20%20%20%20%20%20%20%20yout2%20%3D%20y%20%2B%20r*math.cos((360%2F5)*deg*(i%2B1)%2Bangle*deg)%0A%20%20%20%20%20%20%20%20xin%20%3D%20x%20%2B%20rin*math.sin((360%2F5)*deg*i%2B36*deg%2Bangle*deg)%0A%20%20%20%20%20%20%20%20yin%20%3D%20y%20%2B%20rin*math.cos((360%2F5)*deg*i%2B36*deg%2Bangle*deg)%0A%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E9%A9%97%E5%A4%96%E9%BB%9E%E8%88%87%E5%85%A7%E9%BB%9E%E5%BA%A7%E6%A8%99%0A%20%20%20%20%20%20%20%20%23print(xout%2C%20yout%2C%20xin%2C%20yin)%0A%20%20%20%20%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%A1%AB%E8%89%B2%0A%20%20%20%20%20%20%20%20%20%20%20%20if(i%3D%3D0)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.moveTo(xout%2C%20yout)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xin%2C%20yin)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xout2%2C%20yout2)%0A%20%20%20%20%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xin%2C%20yin)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xout2%2C%20yout2)%0A%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%A9%BA%E5%BF%83%0A%20%20%20%20%20%20%20%20%20%20%20%20draw_line(xout%2C%20yout%2C%20xin%2C%20yin%2C%20color)%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%95%AB%E7%A9%BA%E5%BF%83%E4%BA%94%E8%8A%92%E6%98%9F%2C%20%E7%84%A1%E9%97%9C%E7%95%AB%E7%B7%9A%E6%AC%A1%E5%BA%8F%2C%20%E8%8B%A5%E5%AF%A6%E5%BF%83%E5%89%87%E8%88%87%E7%95%AB%E7%B7%9A%E6%AC%A1%E5%BA%8F%E6%9C%89%E9%97%9C%0A%20%20%20%20%20%20%20%20%20%20%20%20draw_line(xout2%2C%20yout2%2C%20xin%2C%20yin%2C%20color)%0A%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20ctx.fillStyle%20%3D%20color%0A%20%20%20%20%20%20%20%20ctx.fill()%0A%0Actx%20%3D%20canvas.getContext('2d')%0A'''%0Asize%20%3D%2030%0Afor%20i%20in%20range(size%2B1)%3A%0A%20%20%20%20%23%20%E6%B0%B4%E5%B9%B3%E7%B7%9A%0A%20%20%20%20draw_line(100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20100%2Bi*10%2C%20%22black%22)%0A%20%20%20%20%23%20%E5%9E%82%E7%9B%B4%E7%B7%9A%0A%20%20%20%20draw_line(100%2Bi*10%2C%20100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20%22red%22)%0A'''%0Astar(100%2C%20100%2C%2030%2C%200%2C%20True%2C%20%22%23f00%22)%0A%23star(300%2C%20300%2C%2050%2C%200%2C%20False%2C%20%22%23000%22)%0Afor%20i%20in%20range(5)%3A%0A%20%20%20%20for%20j%20in%20range(5)%3A%0A%20%20%20%20%20%20%20%20star(200%2B65*i%2C%20200%2B65*j%2C%2030%2C%200%2C%20False%2C%20%22%23000%22)%0A%0AdataURL%20%3D%20canvas.toDataURL()%0Adoc%5B'canvas_image'%5D.src%20%3D%20dataURL%0A&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">影像存檔</a>.</p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">dataURL = canvas.toDataURL()
doc['canvas_image'].src = dataURL</pre>
<p>canvas_image 為一個 30x30 的 html img 標註, 其資料 URL 指向畫布中所繪製的影像.</p><h2>reeborg 中文化</h2>
<p><a href="https://github.com/coursemdetw/reeborg_tw">https://github.com/coursemdetw/reeborg_tw</a></p>
<p>將此一動態模擬系統導入協同專案中</p>
<h1>第十七週任務</h1>
<p>請參考<a href="https://2014c2-mdenfu.rhcloud.com/cmsimply/get_page?heading=%E6%95%99%E6%9D%90%E6%95%B4%E7%90%86">第十六週的任務規劃</a></p><h1>第十八週任務</h1>
<p>請參考<a href="https://2014c2-mdenfu.rhcloud.com/cmsimply/get_page?heading=%E6%95%99%E6%9D%90%E6%95%B4%E7%90%86">第十六週的任務規劃</a></p>
<p>假如要在任何目錄下使用 pandoc_auto 按鈕產生 html 與 pdf</p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">@language python
import os
import re

def atoi(text):
    return int(text) if text.isdigit() else text

def natural_keys(text):
    '''
    alist.sort(key=natural_keys) sorts in human order
    http://nedbatchelder.com/blog/200712/human_sorting.html
    (See Toothy's implementation in the comments)
    '''
    return [ atoi(c) for c in re.split('(\d+)', text) ]
'''
c is the commander of the outline containing the script.
g is Leo's leo.core.leoGlobals module.
p is the presently selected position, the same as c.p.
'''
d = c.scanAllDirectives(p)
#g.es(d)
# d 為 commander 由目前所在目錄進行指令設定掃描
# d 資料格式為 dictionary
''' 
實際操作下, d 為 
{'tabwidth': -4, 'lineending': None, 'language': 'python', 'encoding': None, 'pluginsList': [], 'pagewidth': 70, 'wrap': True, 'path': 'D:\\github\\mdeCourse\\2013spring', 'delims': ('#', '', '')}
'''
# 在處理 pandoc 之前,  將協同人員上傳的 file1.txt 與 file2.txt 結合為 demo.txt
# 以下採用 os.walk 自動進入目錄取出目錄與檔案名稱後, 採自然排序
# 最後再利用 insert 將標題頁面放入數列最前頭
'''
# 這裡是原先使用的手動檔名排序數列, 好處為可以任意編排次序
filenames = ['title.txt', '2bg1/doc.txt', '2bg2/doc.txt', '2bg3/doc.txt', '2bg5/doc.txt', '2bg15/doc.txt', '2bg13/doc.txt', '2bg9/doc.txt']
'''
# 定義要合併檔案的共同目錄
directory = "./wsgi/doc/"
# 定義一個空數列
filenames = []
for (path, dirs, files) in os.walk(directory):
    for fname in files:
        # 利用 if 判斷式將外部的 title.txt 與其他檔案隔開不取
        if path != directory:
            filenames.append(path+"/"+fname)
# 依照 natural_keys 客製化排序, 使用上面的函式定義
filenames.sort(key=natural_keys)
# 利用 insert 以 0 為索引, 將 title.txt 放在數列最前頭
filenames.insert(0, directory+"title.txt")
# 以下將依據 filenames 數列中的檔案合併為 result.txt 之後再進行文書處理轉換
with open('./wsgi/pandoc/result.txt', 'w', encoding="utf-8") as outfile:
    for fname in filenames:
        #fname = directory+fname
        with open(fname, encoding="utf-8") as infile:
            for line in infile:
                outfile.write(line)
            outfile.write("\n\n")


# 將目錄指到 pandoc
mandir = d.get('path') + "/wsgi/pandoc"
g.es(mandir)
os.chdir(mandir)
# 先轉一份 html 
os.system("V:\\apps\\pandoc\\pandoc.exe -s result.txt -o result.html")

# 利用 pandoc 將 demo.txt 轉為 demo.tex, 在此決定是否要有 toc
os.system("V:\\apps\\pandoc\\pandoc.exe -s result.txt --toc -o result.tex")
# 中文設定必須要放在 begin document 之前
setup = ''' 
\\usepackage{xeCJK}    % 中英文字行分開設置 
\\usepackage[T1]{fontspec}    %設定字體用 
\\usepackage{graphicx} 
\\usepackage{fancyvrb} % for frame on Verbatim 
\\setCJKmainfont{新細明體}
'''
# 在 demo.tex 最前頭加上"中文設定"
file = open("result.tex", "r", encoding="utf-8")
lines = file.read().splitlines()
file.close()
file = open("result.tex", "w", encoding="utf-8")
for i in range(len(lines)):
    # 設法將中文設定放在文件開始之前, 以便蓋掉之前的設定
    if "\\begin{document}" in lines[i]:
        file.write(setup+lines[i]+"\n")
    else:
        file.write(lines[i]+"\n")
file.close()
target_name = "result"
filename = target_name+".tex"
os.system("V:\\apps\\portableLatex\\MiKTeX\\texmf\\miktex\\bin\\xelatex.exe -no-pdf -interaction=nonstopmode "+filename)
os.system("V:\\apps\\portableLatex\\MiKTeX\\texmf\\miktex\\bin\\xelatex.exe -no-pdf -interaction=nonstopmode "+filename)
filename = target_name+".xdv"
os.system("V:\\apps\\portableLatex\\MiKTeX\\texmf\\miktex\\bin\\xdvipdfmx.exe -vv -E "+filename)

filename = target_name+".pdf"
os.system(filename)</pre>
<p>將 pandoc 所產生的 html 轉為 CMSimply 格式相容:</p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">from bs4 import BeautifulSoup
 
def _remove_attrs(soup):
    for tag in soup.findAll(True): 
        tag.attrs = None
    return soup
 
filename = "result.html"
with open(filename, encoding="utf-8") as file:
    file_content = file.read()

soup = BeautifulSoup(file_content)
clean_soup = _remove_attrs(soup)

file = open(filename, "w", encoding="utf-8")
file.write(str(clean_soup))
file.close()</pre>
<p> </p><h1>分組程式</h1>
<p><a href="/c2g30/flag">中華民國國旗</a></p>
<p><a href="/c2g30/star">五芒星</a></p>
<p>在雲端機器人程式環境中繪圖</p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22robots%22%3A%5B%7B%22x%22%3A1%2C%22y%22%3A1%2C%22tokens%22%3A%22infinite%22%2C%22orientation%22%3A0%2C%22_prev_x%22%3A1%2C%22_prev_y%22%3A1%2C%22_prev_orientation%22%3A0%7D%5D%2C%22goal%22%3A%7B%22position%22%3A%7B%22x%22%3A3%2C%22y%22%3A1%7D%2C%22tokens%22%3A%7B%223%2C2%22%3A1%7D%7D%2C%22tokens%22%3A%7B%222%2C2%22%3A1%7D%2C%22walls%22%3A%7B%222%2C1%22%3A%5B%22east%22%5D%2C%222%2C2%22%3A%5B%22east%22%5D%2C%222%2C3%22%3A%5B%22north%22%5D%2C%221%2C3%22%3A%5B%22east%22%5D%2C%223%2C3%22%3A%5B%22north%22%2C%22east%22%5D%7D%7D&amp;editor=sound(%22on%22)%0Aimport%20my_lib%0Amove()%0Aturn_left()%0Amove()%0Apick_beeper()%0Amove()%0Aturn_right()%0Amove()%0Aturn_right()%0Amove()%0Aput_beeper()%0Amove()&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">聲音, 前進, 取 beeper, 放 beeper</a></p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=from%20browser%20import%20html%2C%20doc%0A%23%20use%20plotarea%20as%20canvas%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0A%23%20%E6%BA%96%E5%82%99%E5%9C%A8%20canvas%20%E4%B8%AD%E7%B9%AA%E5%9C%96%0Adef%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20color%3D%22red%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0A%0Actx%20%3D%20canvas.getContext('2d')%0Asize%20%3D%2030%0Afor%20i%20in%20range(size%2B1)%3A%0A%20%20%20%20%23%20%E6%B0%B4%E5%B9%B3%E7%B7%9A%0A%20%20%20%20draw_line(100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20100%2Bi*10%2C%20%22black%22)%0A%20%20%20%20%23%20%E5%9E%82%E7%9B%B4%E7%B7%9A%0A%20%20%20%20draw_line(100%2Bi*10%2C%20100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20%22red%22)&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">畫格線</a></p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=from%20browser%20import%20html%2C%20doc%0A%23%20use%20plotarea%20as%20canvas%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0A%23%20%E6%BA%96%E5%82%99%E5%9C%A8%20canvas%20%E4%B8%AD%E7%B9%AA%E5%9C%96%0Adef%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20color%3D%22red%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0Adef%20fill_rectangle(x1%2C%20y1%2C%20x2%2C%20y2%2C%20color%3D%22red%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x1%2C%20y2)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.lineTo(x2%2C%20y1)%0A%20%20%20%20ctx.lineTo(x1%2C%20y1)%0A%20%20%20%20ctx.fillStyle%20%3D%20color%0A%20%20%20%20ctx.fill()%0A%0Actx%20%3D%20canvas.getContext('2d')%0Asize%20%3D%2030%0Afor%20i%20in%20range(size%2B1)%3A%0A%20%20%20%20%23%20%E6%B0%B4%E5%B9%B3%E7%B7%9A%0A%20%20%20%20draw_line(100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20100%2Bi*10%2C%20%22black%22)%0A%20%20%20%20%23%20%E5%9E%82%E7%9B%B4%E7%B7%9A%0A%20%20%20%20draw_line(100%2Bi*10%2C%20100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20%22red%22)%0Afill_rectangle(0%2C%200%2C%20100%2C%20100)&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">畫格線, 多邊形填色</a></p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=import%20math%0Afrom%20browser%20import%20html%2C%20doc%0A%23%20use%20plotarea%20as%20canvas%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0A%23%20%E6%BA%96%E5%82%99%E5%9C%A8%20canvas%20%E4%B8%AD%E7%B9%AA%E5%9C%96%0Adef%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20color%3D%22red%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0A%23%20x%2C%20y%20%E7%82%BA%E4%B8%AD%E5%BF%83%2C%20%20r%20%E7%82%BA%E5%8D%8A%E5%BE%91%2C%20angle%20%E6%97%8B%E8%BD%89%E8%A7%92%2C%20%20solid%20%E7%A9%BA%E5%BF%83%E6%88%96%E5%AF%A6%E5%BF%83%2C%20%20color%20%E9%A1%8F%E8%89%B2%0Adef%20star(x%2C%20y%2C%20r%2C%20angle%3D0%2C%20solid%3DFalse%2C%20color%3D%22%23f00%22)%3A%0A%20%20%20%20%23%20%E4%BB%A5%20x%2C%20y%20%E7%82%BA%E5%9C%93%E5%BF%83%2C%20%E8%A8%88%E7%AE%97%E4%BA%94%E5%80%8B%E5%A4%96%E9%BB%9E%0A%20%20%20%20deg%20%3D%20math.pi%2F180%0A%20%20%20%20%23%20%E5%9C%93%E5%BF%83%E5%88%B0%E6%B0%B4%E5%B9%B3%E7%B7%9A%E8%B7%9D%E9%9B%A2%0A%20%20%20%20a%20%3D%20r*math.cos(72*deg)%0A%20%20%20%20%23%20a%20%E9%A0%82%E9%BB%9E%E5%90%91%E5%8F%B3%E5%88%B0%E5%85%A7%E9%BB%9E%E8%B7%9D%E9%9B%A2%0A%20%20%20%20b%20%3D%20(r*math.cos(72*deg)%2Fmath.cos(36*deg))*math.sin(36*deg)%0A%20%20%20%20%23%20%E5%88%A9%E7%94%A8%E7%95%A2%E6%B0%8F%E5%AE%9A%E7%90%86%E6%B1%82%E5%85%A7%E9%BB%9E%E5%8D%8A%E5%BE%91%0A%20%20%20%20rin%20%3D%20math.sqrt(a**2%20%2B%20b**2)%0A%20%20%20%20%23%20%E6%9F%A5%E9%A9%97%20a%2C%20b%20%E8%88%87%20rin%0A%20%20%20%20%23print(a%2C%20b%2C%20rin)%0A%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20ctx.beginPath()%0A%20%20%20%20for%20i%20in%20range(5)%3A%0A%20%20%20%20%20%20%20%20xout%20%3D%20(x%20%2B%20r*math.sin((360%2F5)*deg*i%2Bangle*deg))%0A%20%20%20%20%20%20%20%20yout%20%3D%20(y%20%2B%20r*math.cos((360%2F5)*deg*i%2Bangle*deg))%0A%20%20%20%20%20%20%20%20%23%20%E5%A4%96%E9%BB%9E%E5%A2%9E%E9%87%8F%20%2B%201%0A%20%20%20%20%20%20%20%20xout2%20%3D%20x%20%2B%20r*math.sin((360%2F5)*deg*(i%2B1)%2Bangle*deg)%0A%20%20%20%20%20%20%20%20yout2%20%3D%20y%20%2B%20r*math.cos((360%2F5)*deg*(i%2B1)%2Bangle*deg)%0A%20%20%20%20%20%20%20%20xin%20%3D%20x%20%2B%20rin*math.sin((360%2F5)*deg*i%2B36*deg%2Bangle*deg)%0A%20%20%20%20%20%20%20%20yin%20%3D%20y%20%2B%20rin*math.cos((360%2F5)*deg*i%2B36*deg%2Bangle*deg)%0A%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E9%A9%97%E5%A4%96%E9%BB%9E%E8%88%87%E5%85%A7%E9%BB%9E%E5%BA%A7%E6%A8%99%0A%20%20%20%20%20%20%20%20%23print(xout%2C%20yout%2C%20xin%2C%20yin)%0A%20%20%20%20%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%A1%AB%E8%89%B2%0A%20%20%20%20%20%20%20%20%20%20%20%20if(i%3D%3D0)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.moveTo(xout%2C%20yout)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xin%2C%20yin)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xout2%2C%20yout2)%0A%20%20%20%20%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xin%2C%20yin)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xout2%2C%20yout2)%0A%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%A9%BA%E5%BF%83%0A%20%20%20%20%20%20%20%20%20%20%20%20draw_line(xout%2C%20yout%2C%20xin%2C%20yin%2C%20color)%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%95%AB%E7%A9%BA%E5%BF%83%E4%BA%94%E8%8A%92%E6%98%9F%2C%20%E7%84%A1%E9%97%9C%E7%95%AB%E7%B7%9A%E6%AC%A1%E5%BA%8F%2C%20%E8%8B%A5%E5%AF%A6%E5%BF%83%E5%89%87%E8%88%87%E7%95%AB%E7%B7%9A%E6%AC%A1%E5%BA%8F%E6%9C%89%E9%97%9C%0A%20%20%20%20%20%20%20%20%20%20%20%20draw_line(xout2%2C%20yout2%2C%20xin%2C%20yin%2C%20color)%0A%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20ctx.fillStyle%20%3D%20color%0A%20%20%20%20%20%20%20%20ctx.fill()%0A%0Actx%20%3D%20canvas.getContext('2d')%0A'''%0Asize%20%3D%2030%0Afor%20i%20in%20range(size%2B1)%3A%0A%20%20%20%20%23%20%E6%B0%B4%E5%B9%B3%E7%B7%9A%0A%20%20%20%20draw_line(100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20100%2Bi*10%2C%20%22black%22)%0A%20%20%20%20%23%20%E5%9E%82%E7%9B%B4%E7%B7%9A%0A%20%20%20%20draw_line(100%2Bi*10%2C%20100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20%22red%22)%0A'''%0Astar(100%2C%20100%2C%2030%2C%200%2C%20True%2C%20%22%23f00%22)%0A%23star(300%2C%20300%2C%2050%2C%200%2C%20False%2C%20%22%23000%22)%0Afor%20i%20in%20range(5)%3A%0A%20%20%20%20for%20j%20in%20range(5)%3A%0A%20%20%20%20%20%20%20%20star(200%2B65*i%2C%20200%2B65*j%2C%2030%2C%200%2C%20False%2C%20%22%23000%22)&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">五芒星繪圖</a></p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=%23coding%3A%20utf-8%0Afrom%20math%20import%20*%0Aimport%20time%0A%23import%20random%0A%23%20%E6%BA%96%E5%82%99%E7%B9%AA%E5%9C%96%E7%95%AB%E5%B8%83%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0Actx%20%3D%20canvas.getContext(%222d%22)%0A%23%20%E5%AE%9A%E7%BE%A9%E5%BA%A7%E6%A8%99%E8%BD%89%E6%8F%9B(0%2C%200)%20%E5%88%B0%20(75%2C%2020)%0Adef%20change_ref_system(x%2C%20y)%3A%0A%20%20%20%20return%20(20%20%2B%20x%20*%208%2C%20420%20-%20y%20*%2020)%0A%23%20%E5%AE%9A%E7%BE%A9%E7%95%AB%E7%B7%9A%E5%87%BD%E5%BC%8F%0Adef%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20linethick%20%3D%203%2C%20color%20%3D%20%22black%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.lineWidth%20%3D%20linethick%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0A%23%20%E5%AE%9A%E7%BE%A9%E4%B8%80%E5%80%8B%E9%BB%9E%E9%A1%9E%E5%88%A5%0Aclass%20Point%3A%0A%20%20%20%20def%20__init__(self%2C%20x%2C%20y)%3A%0A%20%20%20%20%20%20%20%20self.x%20%3D%20x%0A%20%20%20%20%20%20%20%20self.y%20%3D%20y%0A%20%20%20%20def%20distanceTo(self%2C%20obj)%3A%0A%20%20%20%20%20%20%20%20if%20isinstance(obj%2C%20Point)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20sqrt(pow(obj.x%20-%20self.x%2C%202)%20%2B%20pow(obj.y-%20self.y%2C%202))%0A%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20raise%20TypeError(%22Invalid%20type%20in%20Point.distanceTo()%22)%0A%23%20%E5%AE%9A%E7%BE%A9%E4%B8%80%E5%80%8B%E7%B7%9A%E9%A1%9E%E5%88%A5%0Aclass%20Line%3A%0A%20%20%20%20def%20__init__(self%2C%20p1%2C%20p2)%3A%0A%20%20%20%20%20%20%20%20self.p1%20%3D%20p1%0A%20%20%20%20%20%20%20%20self.p2%20%3D%20p2%0A%20%20%20%20%20%20%20%20%23%20%E5%AE%9A%E7%BE%A9%E4%B8%80%E5%80%8B%20Line%20%E7%9A%84%E5%B1%AC%E6%80%A7%20length%0A%20%20%20%20%20%20%20%20self.length%20%3D%20self.p1.distanceTo(self.p2)%0A%20%20%20%20%20%20%20%20self.deg%20%3D%20pi%2F180%0A%20%20%20%20def%20rotate(self%2C%20angle)%3A%0A%20%20%20%20%20%20%20%20%23%20%E4%BB%A5%20p1%20%20%E7%82%BA%E6%97%8B%E8%BD%89%E4%B8%AD%E5%BF%83%E9%BB%9E%0A%20%20%20%20%20%20%20%20%23%20angle%20%E7%82%BA%E5%8F%B3%E6%89%8B%E5%89%87%E6%97%8B%E8%BD%89%E8%A7%92%E5%BA%A6%0A%20%20%20%20%20%20%20%20%23%20%E9%80%99%E8%A3%A1%E4%BB%A5%E5%B7%A6%E4%B8%8A%E8%A7%92%E7%82%BA%E5%8E%9F%E9%BB%9E%2C%20x%20%E5%90%91%E5%8F%B3%E7%82%BA%E6%AD%A3%2C%20y%20%E5%90%91%E4%B8%8B%E7%82%BA%E6%AD%A3%0A%20%20%20%20%20%20%20%20self.p2.x%20%3D%20self.p1.x%20%2B%20self.length*cos(angle*self.deg)%0A%20%20%20%20%20%20%20%20self.p2.y%20%3D%20self.p1.y%20-%20self.length*sin(angle*self.deg)%0A%23%20%E5%AE%9A%E7%BE%A9%E4%B8%80%E5%80%8B%E5%9B%9E%E5%91%BC%E7%B9%AA%E5%9C%96%E5%87%BD%E5%BC%8F%0Adataset%20%3D%20%5B%5D%0Adef%20graph()%3A%0A%20%20%20%20p1%20%3D%20Point(0%2C%200)%0A%20%20%20%20p2%20%3D%20Point(10%2C%200)%0A%20%20%20%20data%20%3D%20random.random()%20*%2020%0A%20%20%20%20doc%5B%22dataarea%22%5D%20%3C%3D%20'%25s%2C%20'%20%25%20str(data)%5B0%3A5%5D%0A%20%20%20%20dataset.append(data)%0A%20%20%20%20if%20len(dataset)%20%3D%3D%201%3A%0A%20%20%20%20%20%20%20%20x%2C%20y%20%3D%20change_ref_system(len(dataset)%2C%20data)%0A%20%20%20%20%20%20%20%20draw_line(x%2C%20y%2C%20x%2C%20y%2C%20linethick%3D3%2C%20color%3D%22blue%22)%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20x1%2C%20y1%20%3D%20change_ref_system(len(dataset)-1%2C%20dataset%5B-2%5D)%0A%20%20%20%20%20%20%20%20x2%2C%20y2%20%3D%20change_ref_system(len(dataset)%2C%20data)%0A%20%20%20%20%20%20%20%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20linethick%3D3%2C%20color%3D%22blue%22)%0A%20%20%20%20if%20len(dataset)%20%3E%3D%20100%3A%0A%20%20%20%20%20%20%20%20print(len(dataset))%0A%20%20%20%20%20%20%20%20time.clear_interval(work)%0Ap1%20%3D%20Point(0%2C%200)%0Ap2%20%3D%20Point(10%2C%200)%0Ap3%20%3D%20Point(6.5%2C%207.8)%0Aprint(%22%E9%BB%9E%20p1%20%E5%88%B0%E9%BB%9E%20p2%20%E7%9A%84%E8%B7%9D%E9%9B%A2%3A%22%2C%20p1.distanceTo(p2))%0Aline1%20%3D%20Line(p1%2C%20p2)%0Aprint(%22%E7%B7%9A%20line1%20%E7%9A%84%E9%95%B7%E5%BA%A6%3A%22%2C%20line1.length)%0A%23%20%E4%BB%A5%20p3%20%E7%82%BA%E5%9C%93%E5%BF%83%2C%20%E6%97%8B%E8%BD%89%2090%20%E5%BA%A6%0Aline1.rotate(90)%0A%23work%20%3D%20time.set_interval(graph%2C%20100)%0Aprint(%22%E6%97%8B%E8%BD%89%E5%BE%8C%2C%20line1%20%E7%9A%84%E9%95%B7%E5%BA%A6%3A%22%2C%20line1.length)%0Aprint(%22%E6%97%8B%E8%BD%89%E5%BE%8C%2C%20p1%20%E7%9A%84%E5%BA%A7%E6%A8%99%3A%22%2C%20line1.p1.x%2C%20%22%2C%22%2C%20line1.p1.y)%0Aprint(%22%E6%97%8B%E8%BD%89%E5%BE%8C%2C%20p2%20%E7%9A%84%E5%BA%A7%E6%A8%99%3A%22%2C%20line1.p2.x%2C%20%22%2C%22%2C%20%20line1.p2.y)%0Ax1%2C%20y1%20%3D%20change_ref_system(0%2C%200)%0Afor%20%E7%B4%A2%E5%BC%95%20in%20range(0%2C%2070%2C%204)%3A%0A%20%20%20%20x2%2C%20y2%20%3D%20change_ref_system(%E7%B4%A2%E5%BC%95%2C%2020)%0A%20%20%20%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20linethick%3D3%2C%20color%3D%22blue%22)%0Ax1%2C%20y1%20%3D%20change_ref_system(70%2C%200)%0Afor%20%E7%B4%A2%E5%BC%95%20in%20range(0%2C%2070%2C%204)%3A%0A%20%20%20%20x2%2C%20y2%20%3D%20change_ref_system(%E7%B4%A2%E5%BC%95%2C%2020)%0A%20%20%20%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20linethick%3D3%2C%20color%3D%22red%22)&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">繪圖 + 李伯寫程式執行記錄 (日記)</a></p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=import%20math%0Afrom%20browser%20import%20doc%0Aimport%20browser.timer%0A%0Adef%20draw_circle(x%2C%20y%2C%20r%2C%20linethick%3D1%2C%20color%3D%22black%22)%3A%0A%20%20%20%20global%20ctx%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.lineWidth%20%3D%20linethick%0A%20%20%20%20ctx.arc(x%2C%20y%2C%20r%2C%200%2C%20math.pi*2%2C%20true)%0A%20%20%20%20ctx.closePath()%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0A%0Adef%20draw()%3A%0A%20%20%20%20global%20theta%2C%20ctx%2C%20canvas%2C%20x%2C%20y%2C%20r%2C%20dx%2C%20dy%0A%20%20%20%20%23%20clear%20canvas%20context%0A%20%20%20%20ctx.clearRect(0%2C%200%2C%20canvas.width%2C%20canvas.height)%0A%20%20%20%20%23%20draw%20circle%0A%20%20%20%20draw_circle(x%2C%20y%2C%2010)%0A%20%20%20%20%23%20calculate%20new%20x%2C%20y%20position%0A%20%20%20%20theta%20%3D%20theta%20%2B%20dx%0A%20%20%20%20x%20%3D%20200%20%2B%20r*math.cos(theta*math.pi%2F180)%0A%20%20%20%20y%20%3D%20200%20-%20r*math.sin(2*theta*math.pi%2F180)%0A%20%0A%20%0Ax%2C%20y%2C%20r%20%3D%20200%2C%20200%2C%2050%0A%23%20define%20canvas%20and%20context%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0Actx%20%3D%20canvas.getContext(%222d%22)%0A%23%20fourbar%20linkage%20inputs%0Atheta%20%3D%200%0Adegree%20%3D%20math.pi%2F180%0Adx%20%3D%202%0Ady%20%3D%204%0A%0Abrowser.timer.set_interval(draw%2C%2010)&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">動態模擬</a></p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=import%20math%0Afrom%20browser%20import%20html%2C%20doc%0A%23%20use%20plotarea%20as%20canvas%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0A%23%20%E6%BA%96%E5%82%99%E5%9C%A8%20canvas%20%E4%B8%AD%E7%B9%AA%E5%9C%96%0Adef%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20color%3D%22red%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0A%23%20x%2C%20y%20%E7%82%BA%E4%B8%AD%E5%BF%83%2C%20%20r%20%E7%82%BA%E5%8D%8A%E5%BE%91%2C%20angle%20%E6%97%8B%E8%BD%89%E8%A7%92%2C%20%20solid%20%E7%A9%BA%E5%BF%83%E6%88%96%E5%AF%A6%E5%BF%83%2C%20%20color%20%E9%A1%8F%E8%89%B2%0Adef%20star(x%2C%20y%2C%20r%2C%20angle%3D0%2C%20solid%3DFalse%2C%20color%3D%22%23f00%22)%3A%0A%20%20%20%20%23%20%E4%BB%A5%20x%2C%20y%20%E7%82%BA%E5%9C%93%E5%BF%83%2C%20%E8%A8%88%E7%AE%97%E4%BA%94%E5%80%8B%E5%A4%96%E9%BB%9E%0A%20%20%20%20deg%20%3D%20math.pi%2F180%0A%20%20%20%20%23%20%E5%9C%93%E5%BF%83%E5%88%B0%E6%B0%B4%E5%B9%B3%E7%B7%9A%E8%B7%9D%E9%9B%A2%0A%20%20%20%20a%20%3D%20r*math.cos(72*deg)%0A%20%20%20%20%23%20a%20%E9%A0%82%E9%BB%9E%E5%90%91%E5%8F%B3%E5%88%B0%E5%85%A7%E9%BB%9E%E8%B7%9D%E9%9B%A2%0A%20%20%20%20b%20%3D%20(r*math.cos(72*deg)%2Fmath.cos(36*deg))*math.sin(36*deg)%0A%20%20%20%20%23%20%E5%88%A9%E7%94%A8%E7%95%A2%E6%B0%8F%E5%AE%9A%E7%90%86%E6%B1%82%E5%85%A7%E9%BB%9E%E5%8D%8A%E5%BE%91%0A%20%20%20%20rin%20%3D%20math.sqrt(a**2%20%2B%20b**2)%0A%20%20%20%20%23%20%E6%9F%A5%E9%A9%97%20a%2C%20b%20%E8%88%87%20rin%0A%20%20%20%20%23print(a%2C%20b%2C%20rin)%0A%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20ctx.beginPath()%0A%20%20%20%20for%20i%20in%20range(5)%3A%0A%20%20%20%20%20%20%20%20xout%20%3D%20(x%20%2B%20r*math.sin((360%2F5)*deg*i%2Bangle*deg))%0A%20%20%20%20%20%20%20%20yout%20%3D%20(y%20%2B%20r*math.cos((360%2F5)*deg*i%2Bangle*deg))%0A%20%20%20%20%20%20%20%20%23%20%E5%A4%96%E9%BB%9E%E5%A2%9E%E9%87%8F%20%2B%201%0A%20%20%20%20%20%20%20%20xout2%20%3D%20x%20%2B%20r*math.sin((360%2F5)*deg*(i%2B1)%2Bangle*deg)%0A%20%20%20%20%20%20%20%20yout2%20%3D%20y%20%2B%20r*math.cos((360%2F5)*deg*(i%2B1)%2Bangle*deg)%0A%20%20%20%20%20%20%20%20xin%20%3D%20x%20%2B%20rin*math.sin((360%2F5)*deg*i%2B36*deg%2Bangle*deg)%0A%20%20%20%20%20%20%20%20yin%20%3D%20y%20%2B%20rin*math.cos((360%2F5)*deg*i%2B36*deg%2Bangle*deg)%0A%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E9%A9%97%E5%A4%96%E9%BB%9E%E8%88%87%E5%85%A7%E9%BB%9E%E5%BA%A7%E6%A8%99%0A%20%20%20%20%20%20%20%20%23print(xout%2C%20yout%2C%20xin%2C%20yin)%0A%20%20%20%20%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%A1%AB%E8%89%B2%0A%20%20%20%20%20%20%20%20%20%20%20%20if(i%3D%3D0)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.moveTo(xout%2C%20yout)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xin%2C%20yin)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xout2%2C%20yout2)%0A%20%20%20%20%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xin%2C%20yin)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xout2%2C%20yout2)%0A%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%A9%BA%E5%BF%83%0A%20%20%20%20%20%20%20%20%20%20%20%20draw_line(xout%2C%20yout%2C%20xin%2C%20yin%2C%20color)%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%95%AB%E7%A9%BA%E5%BF%83%E4%BA%94%E8%8A%92%E6%98%9F%2C%20%E7%84%A1%E9%97%9C%E7%95%AB%E7%B7%9A%E6%AC%A1%E5%BA%8F%2C%20%E8%8B%A5%E5%AF%A6%E5%BF%83%E5%89%87%E8%88%87%E7%95%AB%E7%B7%9A%E6%AC%A1%E5%BA%8F%E6%9C%89%E9%97%9C%0A%20%20%20%20%20%20%20%20%20%20%20%20draw_line(xout2%2C%20yout2%2C%20xin%2C%20yin%2C%20color)%0A%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20ctx.fillStyle%20%3D%20color%0A%20%20%20%20%20%20%20%20ctx.fill()%0A%0Actx%20%3D%20canvas.getContext('2d')%0A'''%0Asize%20%3D%2030%0Afor%20i%20in%20range(size%2B1)%3A%0A%20%20%20%20%23%20%E6%B0%B4%E5%B9%B3%E7%B7%9A%0A%20%20%20%20draw_line(100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20100%2Bi*10%2C%20%22black%22)%0A%20%20%20%20%23%20%E5%9E%82%E7%9B%B4%E7%B7%9A%0A%20%20%20%20draw_line(100%2Bi*10%2C%20100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20%22red%22)%0A'''%0Astar(100%2C%20100%2C%2030%2C%200%2C%20True%2C%20%22%23f00%22)%0A%23star(300%2C%20300%2C%2050%2C%200%2C%20False%2C%20%22%23000%22)%0Afor%20i%20in%20range(5)%3A%0A%20%20%20%20for%20j%20in%20range(5)%3A%0A%20%20%20%20%20%20%20%20star(200%2B65*i%2C%20200%2B65*j%2C%2030%2C%200%2C%20False%2C%20%22%23000%22)%0A%0AdataURL%20%3D%20canvas.toDataURL()%0Adoc%5B'canvas_image'%5D.src%20%3D%20dataURL%0A&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">影像存檔</a></p><h2>中華民國國旗</h2>
<p><a href="/c2g30/flag">/c2g30/flag</a></p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">@cherrypy.expose
def flag(self, *args, **kwargs):
    '''
    原始程式來源: http://blog.roodo.com/esabear/archives/19215194.html
    改寫為 Brython 程式
    '''
    outstring = '''
&lt;!DOCTYPE html&gt; 
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;script type="text/javascript" src="/static/Brython2.1.0-20140419-113919/brython.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython({debug:1, cache:'version'})"&gt;
&lt;canvas id="plotarea" width="300" height="200"&gt;&lt;/canvas&gt;
&lt;script type="text/python"&gt;
# 導入 doc
from browser import doc
import math

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二到光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
# 查詢 canvas arc 如何定義
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, true)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, true)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
'''
    return outstring</pre>
<p> </p><h2>五芒星</h2>
<p><a href="/c2g30/star">/c2g30/star</a></p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">@cherrypy.expose
def star(self, *args, **kwargs):
    outstring = '''
&lt;!DOCTYPE html&gt; 
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;script type="text/javascript" src="/static/Brython2.1.0-20140419-113919/brython.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython({debug:1, cache:'version'})"&gt;
&lt;canvas id="plotarea" width="800" height="800"&gt;&lt;/canvas&gt;
&lt;script type="text/python"&gt;
# 導入 doc
from browser import doc
import math

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 800 光點
ctx.setTransform(1, 0, 0, -1, 0, 800)

# 定義畫線函式
def draw_line(x1, y1, x2, y2, linethick = 3, color = "black"):
    ctx.beginPath()
    ctx.lineWidth = linethick
    ctx.moveTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.strokeStyle = color
    ctx.stroke()

# x, y 為中心,  r 為半徑, angle 旋轉角,  solid 空心或實心,  color 顏色
def star(x, y, r, angle=0, solid=False, color="#f00"):
    # 以 x, y 為圓心, 計算五個外點
    deg = math.pi/180
    # 圓心到水平線距離
    a = r*math.cos(72*deg)
    # a 頂點向右到內點距離
    b = (r*math.cos(72*deg)/math.cos(36*deg))*math.sin(36*deg)
    # 利用畢氏定理求內點半徑
    rin = math.sqrt(a**2 + b**2)
    # 查驗 a, b 與 rin
    #print(a, b, rin)
    if(solid):
        ctx.beginPath()
    for i in range(5):
        xout = (x + r*math.sin((360/5)*deg*i+angle*deg))
        yout = (y + r*math.cos((360/5)*deg*i+angle*deg))
        # 外點增量 + 1
        xout2 = x + r*math.sin((360/5)*deg*(i+1)+angle*deg)
        yout2 = y + r*math.cos((360/5)*deg*(i+1)+angle*deg)
        xin = x + rin*math.sin((360/5)*deg*i+36*deg+angle*deg)
        yin = y + rin*math.cos((360/5)*deg*i+36*deg+angle*deg)
        # 查驗外點與內點座標
        #print(xout, yout, xin, yin)
        if(solid):
            # 填色
            if(i==0):
                ctx.moveTo(xout, yout)
                ctx.lineTo(xin, yin)
                ctx.lineTo(xout2, yout2)
            else:
                ctx.lineTo(xin, yin)
                ctx.lineTo(xout2, yout2)
        else:
            # 空心
            draw_line(xout, yout, xin, yin, color)
            # 畫空心五芒星, 無關畫線次序, 若實心則與畫線次序有關
            draw_line(xout2, yout2, xin, yin, color)
    if(solid):
        ctx.fillStyle = color
        ctx.fill()
star(600, 600, 100, 30, True, "#00f")
star(100, 100, 30, 0, True, "#f00")
#star(300, 300, 50, 0, False, "#000")
for i in range(5):
    for j in range(5):
        star(200+65*i, 200+65*j, 30, 0, False, "#000")
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
'''
    return outstring</pre>
<p> </p><h1>計算機程式</h1>
<p><a href="download/?filepath=/var/lib/openshift/5364a49c5973ca5ea9000882/app-root/data//downloads/PythonBook.pdf">PythonBook.pdf</a></p>
<p>簡單 Blog</p>
<p style="margin-left: 30px;"><a href="http://www.eoeandroid.com/blog-632207-20451.html">http://www.eoeandroid.com/blog-632207-20451.html</a></p>
<p>Blog in Django: <a href="https://github.com/Fantomas42/django-blog-zinnia">https://github.com/Fantomas42/django-blog-zinnia</a></p>
<p>另一個 why Python: <a href="http://blog.trinket.io/why-python/">http://blog.trinket.io/why-python/</a></p>
<p>interactive Python:</p>
<p style="margin-left: 30px;"><a href="https://trinket.io/">https://trinket.io/</a></p>
<p style="margin-left: 30px;"><a href="https://trinket.io/tour/an-hour-of-python">https://trinket.io/tour/an-hour-of-python</a></p>
<p style="margin-left: 30px;">trinket 採用 <a href="https://github.com/skulpt/skulpt">https://github.com/skulpt/skulpt</a></p>
<p><a href="http://kivy.org/">http://kivy.org</a></p>
<p><a href="https://github.com/oreillymedia/creating_apps_in_kivy">https://github.com/oreillymedia/creating_apps_in_kivy</a></p>
<p><a href="download/?filepath=/var/lib/openshift/5364a49c5973ca5ea9000882/app-root/data//downloads/Brython2.1.2-20140607-093129_yen.7z">Brython2.1.2-20140607-093129_yen.7z</a></p>
<p>利用 Leo Editor 將 .rst 納入 portablelatext 架構下, 可產生對應的中英文版本 pdf 與 html</p>
<p>以下版本<a href="http://bazaar.launchpad.net/~thinkcspy-rle-team/thinkcspy/thinkcspy3-rle/revision/486?start_revid=486">取自</a></p>
<p>參考網站: <a href="http://lqc.github.io/thinkcspy/">http://lqc.github.io/thinkcspy/</a> (對應的<a href="download/?filepath=/var/lib/openshift/5364a49c5973ca5ea9000882/app-root/data//downloads/thinkcspy3.pdf"> pdf 檔案</a>)</p>
<p><a href="download/?filepath=/var/lib/openshift/5364a49c5973ca5ea9000882/app-root/data//downloads/thinkcspython3.7z">thinkcspython3_rst.7z</a> (<a href="http://www.openfoundry.org/tw/papers-and-teaching-materials/cat_view/214-/209-/277-/240-python/241-how-to-think-like-a-computer-scientist-">繁體中文翻譯本</a>) (<a href="download/?filepath=/var/lib/openshift/5364a49c5973ca5ea9000882/app-root/data//downloads/taiwan_thinkcspython2.7z">中文譯本 html 與 xhtml.7z</a>)</p>
<p>中文版線上閱讀- <a href="http://www.openfoundry.org/tech-column/1527">http://www.openfoundry.org/tech-column/1527</a> (python 2)</p>
<p>參考中文版 python 3: <a href="https://dl.dropboxusercontent.com/u/33089565/ry2014_thinkcspy/html/index.html">https://dl.dropboxusercontent.com/u/33089565/ry2014_thinkcspy/html/index.html</a> (Python 3)</p>
<p><a href="download/?filepath=/var/lib/openshift/5364a49c5973ca5ea9000882/app-root/data//downloads/software_talk.7z">software_talk.7z (leo)</a></p>
<hr>
<p>該學習 Python 或 JavaScript (或 C, 或 C++ 或 Java 或 ...)</p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/docs/js_py_en/_build/html/">http://2014c2-mdenfu.rhcloud.com/static/reeborg/docs/js_py_en/_build/html/</a></p>
<p>Python 初學</p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/docs/begin_py_en/_build/html/">http://2014c2-mdenfu.rhcloud.com/static/reeborg/docs/begin_py_en/_build/html/</a></p>
<p>學習 Python 3: <a href="http://cscircles.cemc.uwaterloo.ca/">http://cscircles.cemc.uwaterloo.ca/</a></p>
<p><a href="http://nzacditt.org.nz/resources/programming-and-cs/level-1-programming-python">http://nzacditt.org.nz/resources/programming-and-cs/level-1-programming-python</a></p>
<p>物件導向</p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/docs/oop_py_en/_build/html/">http://2014c2-mdenfu.rhcloud.com/static/reeborg/docs/oop_py_en/_build/html/</a></p>
<p>參考資料:</p>
<p><a href="download/?filepath=/var/lib/openshift/5364a49c5973ca5ea9000882/app-root/data//downloads/Karel%20the%20Robot.pdf">Karel the robot.pdf</a></p>
<p>Java:</p>
<p><a href="download/?filepath=/var/lib/openshift/5364a49c5973ca5ea9000882/app-root/data//downloads/karel-the-robot-learns-java.pdf">karel-the-robot-learns-java.pdf</a></p>
<p><a href="http://introcs.cs.princeton.edu/java/home/">http://introcs.cs.princeton.edu/java/home/</a></p><p><a href="http://phonegap.com"></a></p>
<p> </p>
<h2>程式程式</h2><p><a href="http://www.latimes.com/business/la-fi-coding-craze-20140802-story.html#page=1">http://www.latimes.com/business/la-fi-coding-craze-20140802-story.html#page=1</a></p><p><span>"In the 21st century, it's just as important for every kid to get a basic understanding of what an algorithm is or how the Internet works or what does SSL stand for,"</span></p><p><span><span>By 2020, there are projected to be 1.4 million computer-related jobs, but only 400,000 students majoring in computer science, according to Code.org.</span></span></p><p><span><span><span>Broad computer-science skills that include technological awareness and analytical thinking are more important than narrow programming skills.</span></span></span></p><p><span><span><span><span>"Learning how to problem-solve using algorithms and how technology works and how it's built is going to last a century at least."</span></span></span></span></p><p><a href="http://www.itworld.com/application-management/427170/france-offer-programming-elementary-school"><span><span><span><span>法國小學教電腦程式</span></span></span></span></a></p><p><a href="http://www.nytimes.com/2014/03/24/world/europe/adding-coding-to-the-curriculum.html?_r=1"><span><span><span><span>英國也是</span></span></span></span></a></p><p><a href="http://www.smh.com.au/national/computer-science-reforms-to-test-teachers-skills-20140111-30nj4.html"><span><span><span><span>http://www.smh.com.au/national/computer-science-reforms-to-test-teachers-skills-20140111-30nj4.html</span></span></span></span></a></p><p><a href="http://www.koreaherald.com/view.php?ud=20140727000121"><span><span><span><span>韓國跟進</span></span></span></span></a></p><p><a href="http://www.projectara.com/"><span><span><span><span>http://www.projectara.com/</span></span></span></span></a></p><p><a href="https://www.youtube.com/watch?v=X5SDia1mMJA"><span><span><span><span>https://www.youtube.com/watch?v=X5SDia1mMJA</span></span></span></span></a></p><h2>一流大學採用 Python</h2>
<p>Python 程式碼消長影片: <a href="http://vimeo.com/1093745">http://vimeo.com/1093745</a></p>
<p><a href="http://cacm.acm.org/blogs/blog-cacm/176450-python-is-now-the-most-popular-introductory-teaching-language-at-top-us-universities/fulltext">http://cacm.acm.org/blogs/blog-cacm/176450-python-is-now-the-most-popular-introductory-teaching-language-at-top-us-universities/fulltext</a></p>
<p><a href="http://lifehacker.com/five-best-programming-languages-for-first-time-learners-1494256243/1497409477">http://lifehacker.com/five-best-programming-languages-for-first-time-learners-1494256243/1497409477</a></p>
<p><a href="http://techgeek.com.au/2013/11/18/python-popular-programming-language-think/">http://techgeek.com.au/2013/11/18/python-popular-programming-language-think/</a></p>
<p><a href="http://www.stat.washington.edu/~hoytak/blog/whypython.html">http://www.stat.washington.edu/~hoytak/blog/whypython.html</a></p>
<p><a href="http://www.pythonbytesize.com/">http://www.pythonbytesize.com/</a></p>
<p><a href="http://www.youtube.com/playlist?list=PL6lxxT7IdTxFKo9DguLxGM2dhgb8-u976">http://www.youtube.com/playlist?list=PL6lxxT7IdTxFKo9DguLxGM2dhgb8-u976</a></p>
<p><a href="http://w3techs.com/technologies/details/pl-python/all/all">http://w3techs.com/technologies/details/pl-python/all/all</a></p>
<p><a href="http://www.experfy.com/blog/python-data-science/">http://www.experfy.com/blog/python-data-science/</a></p>
<p><a href="http://reliscore.com/blog/why-every-programmer-should-learn-python-or-ruby/">http://reliscore.com/blog/why-every-programmer-should-learn-python-or-ruby/</a></p>
<p>開放程式碼行數統計: <a href="http://langpop.corger.nl/">http://langpop.corger.nl/</a></p>
<p><a href="https://sites.google.com/site/pydatalog/pypl/PyPL-PopularitY-of-Programming-Language">https://sites.google.com/site/pydatalog/pypl/PyPL-PopularitY-of-Programming-Language</a></p>
<p><a href="http://beust.com/weblog/2014/05/03/language-popularity-on-github/">http://beust.com/weblog/2014/05/03/language-popularity-on-github/</a></p><h2>PhoneGap</h2>
<p>比較: <a href="http://cocos2d.org/">http://cocos2d.org/</a></p>
<p>http://phonegap.com</p>
<p>https://www.openshift.com/blogs/day-10-phonegap-mobile-development-for-the-dummies</p>
<p>https://www.openshift.com/blogs/manage-your-apps-with-openshift-mobile</p><h2>Python Examples</h2>
<p><a href="http://www3.bpcc.edu/CIS102-975/Example%20Code/">http://www3.bpcc.edu/CIS102-975/Example%20Code/</a></p>
<p><a href="http://icpc.baylor.edu/worldfinals/problems">http://icpc.baylor.edu/worldfinals/problems</a></p>
<p>萬年曆: <a href="http://www.hao123.com/rili">http://www.hao123.com/rili</a></p>
<p><a href="download/?filepath=/var/lib/openshift/5364a49c5973ca5ea9000882/app-root/data//downloads/problems940404.pdf">problemset 1.pdf</a></p>
<p>天干=("甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸")</p>
<p>地支=("子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥")</p>
<p>時辰={0:"子時", 1:"丑時", 2:"丑時", 3:"寅時", 4:"寅時", 5:"卯時", 6:"卯時", 7:"辰時", 8:"辰時", 9:"巳時", 10:"巳時", 11:"午時" \<br> , 12:"午時", 13:"未時", 14:"未時", 15:"申時", 16:"申時", 17:"酉時", 18:"酉時", 19:"戌時", 20:"戌時", 21:"亥時", 22:"亥時", 23:"子時", 24:"子時"}</p>
<p>節氣=("小寒","大寒","立春","雨水","驚蟄","春分","清明",<br>"谷雨","立夏","小滿","芒種","夏至","小暑","大暑","立秋","處暑","白露","秋分",<br>"寒露","霜降","立冬","小雪","大雪","冬至")</p>
<p>日曆的基本原理</p>
<p>日曆是以天文學的三個不同的週期作為基礎的：<br>天：地球自轉一周。<br>月：月球圍繞地球運行一周。<br>年：地球圍繞太陽運行一周。</p>
<p>如果以天作為單位，天文學的一年的平均時間是 365.2421896698 - 0.00000615359 T - 7.29E-10 T^2 + 2.64E-10 T^3 天，其中 T 的表達式為 (JD - 2451545.0)/36525，JD 是 Julian 天數。<br>如果以天作為單位，天文學的一月的平均時間是 29.5305888531 + 0.00000021621 T - 3.64E-10 T^2 天，其中 T 的表達式為 (JD - 2451545.0)/36525，JD 是 Julian 天數。<br>世界各國的日曆都是以天作為最小單位，但是年和月的算法卻各不相同，一共有 三大種類：</p>
<p>陽曆：以天文年作為日曆的主要週期，例如：中國公曆。<br>陰曆：以天文月作為日曆的主要週期，例如：伊斯蘭日曆。<br>陰陽曆：以天文月和年作為日曆的主要週期，例如：中國農曆。</p>
<p>中國公曆規則</p>
<p>中國公曆也就是世界通用的 Gregorian 歷，它以年作為主要週期。為了和天文 年保持同步，公曆使用兩種不同天數的年：<br>常年：365 天。<br>閏年：366 天。</p>
<p>公曆年一般都是常年，只有少數年是閏年，由下面三條規則確定：<br>一：如果年的數目是 4 的倍數，就是閏年。<br>二：但是，如果年的數目是 100 的倍數，規則一就無效，仍是常年。<br>三：但是，如果年的數目是 400 的倍數，規則二就無效，仍是閏年。</p>
<p>根據規則一，公曆每 4 年就比天文年多 0.03124 天：<br>4 Gregorian years: 3 * 365 + 366 = 1461 days <br>4 tropical years: 4 * 365.2421896698 = 1460.9687586792 days<br>根據規則二，公曆每 100 年就比天文年少 0.21897 天：<br>100 Gregorian years: 76 * 365 + 24 * 366 = 36524 days <br>100 tropical years: 100 * 365.2421896698 = 36524.21896698 days<br>根據規則三，公曆每 400 年就比天文年多 0.12413 天：<br>400 Gregorian years: 305 * 365 + 95 * 366 = 146097 days <br>400 tropical years: 400 * 365.2421896698 = 146096.87586792 days<br>照此計算，公曆每 2500 年就比天文年多出 1 天。</p>
<p>公曆將一年份為十二個月。常年每月的天數分佈如下：<br>月份 1 2 3 4 5 6 7 8 9 10 11 12<br>天數 31 28 31 30 31 30 31 31 30 31 30 31</p>
<p>閏年的二月為 29 天。</p>
<p>公曆的月跟天文月毫無關係。</p>
<p>公曆還有一個跟年和月毫無關係的週期，叫作星期，每星期七天。公曆第一年的第 一天是星期一。<br>公曆 400 年共有 146097 天，正好是 7 的倍數，所以星期和年每 400 年循環一 次。</p>
<p>中國農曆規則</p>
<p>中國農曆是陰陽曆，同時跟天文月和天文年同步。</p>
<p>農曆月的天數是一個變數，有時是 29 天，有時是 30 天。</p>
<p>農曆每月的第一天是月亮全黑的日子。</p>
<p>農曆年由 24 個節氣來確定，節氣則由太陽的角度來確定。農曆的第一個節氣叫 雨水，定在太陽的角度為 330 度的日子。其餘的 23 個節氣分別定在太陽的角度 每變化 15 度的日子。下面的表格列出了 24 個節氣的名稱和定義：</p>
<p>命稱 角度 公曆日期 週期<br>立春 315 2月 4日<br>雨水 330 2月19日 29.8天<br>驚蟄 345 3月 6日<br>春分 0 3月21日 30.2天<br>清明 15 4月 5日<br>穀雨 30 4月20日 30.7天<br>立夏 45 5月 6日<br>夏滿 60 5月21日 31.2天<br>芒種 75 6月 6日<br>夏至 90 6月22日 31.4天<br>小暑 105 7月 7日<br>大暑 120 7月23日 31.4天<br>立秋 135 8月 8日<br>處暑 150 8月23日 31.1天<br>白露 165 9月 8日<br>秋分 180 9月23日 30.7天<br>寒露 195 10月 8日<br>霜降 210 10月24日 30.1天<br>立冬 225 11月 8日<br>小雪 240 11月22日 29.7天<br>大雪 255 12月 7日<br>冬至 270 12月22日 29.5天<br>小寒 285 1月 6日<br>大寒 300 1月20日 29.5天</p>
<p>24 個節氣中有 12 個是主節氣：雨水，春分，穀雨，夏滿，夏至，大暑，處暑， 秋分，霜降，小雪，冬至，大寒。</p>
<p>農曆年跟天文年相差較大。農曆常年有十二個農曆月，有 353，354，或者 355 天，比天文年少大約 11 天。為了跟天文年同步，每隔三個農曆常年左右，必需設 一閏年。閏年有十三個月，添加的這個月叫閏月。<br>農曆十二個月的名稱分別為：正月，二月，三月，四月，五月，六月，七月，八 月，九月，十月，冬月，臘月。<br>農曆閏年閏月的確定比較難，規則有兩條：</p>
<p>一：冬至必須落在農曆冬月。如果落不上，臘月之前就要添上一個月，成為閏 年。</p>
<p>二：如果是閏年，冬月後邊第一個不含主節氣的月份定為閏月。閏月使用前一 月份的名稱。</p>
<p>農曆年以 60 年為一週期，每年的名稱由 10 個天干的一個字和 12 個地支的一 個字排列而成。10 天干為：甲，乙，丙，丁，戊，己，庚，辛，壬，癸。12 地支 為：子，丑，寅，卯，辰，巳，午，未，申，酉，戌，亥。12 地支有 12 動物生肖 與其對應：鼠，牛，虎，兔，龍，蛇，馬，羊，猴，雞，狗，豬。</p>
<p>跟據歷史記載，農曆年已經經過了 78 個週期。今年，公曆 1999 年，是第 79 個週期的第 17 年，也就是農曆第 4696 年。</p>
<p>總結起來，中國農曆有下例 6 條規則：</p>
<p>一：月全黑規則 - 月全黑的日子是農曆月的第一天。農曆月週期由此而定。<br>二：24 節氣規則 - 24 節氣把天文年按太陽角度分成 24 等份，15 度一節氣。 這個規則確定了農曆和天文年的關係。<br>三：冬至規則 - 冬至必須落在農曆冬月。如果落不上，臘月之前就要添上一個 月，成為閏年。<br>四：閏月規則 - 如果是閏年，冬月後邊第一個不含主節氣的月份定為閏月。<br>五：60 年週期 - 農曆年以 60 年為一週期。<br>六：規則一和二的計算必須以中國南京紫金山天文台的觀察為準。</p>
<p><span>大部分的農民曆內容都可用電腦去運算排列，諸如：二十四節氣、播種、漁撈、日子的干支、納音五行、建除十二神、二十八星宿、八卦、紫白飛星、當日紀要、行事宜忌、每日沖煞與胎神占方、生肖運勢等等，都可以用電腦算出來。</span></p>
<p>【日曆的基本原理】</p>
<p>日曆是以天文學的三個不同的週期作為基礎的：</p>
<p>天：地球自轉一周。<br>月：月球圍繞地球運行一周。<br>年：地球圍繞太陽運行一周。<br>如果以天作為單位，天文學的一年的平均時間是365.2421896698-0.00000615359天數。</p>
<p>如果以天作為單位，天文學的一月的平均時間是29.5305888531+0.00000021621天數。</p>
<p>世界各國的日曆都是以天作為最小單位，但是年和月的算法卻各不相同，一共有三大種類：</p>
<p>陽曆：以天文年作為日曆的主要週期，例如：中國公曆。<br>陰曆：以天文月作為日曆的主要週期，例如：伊斯蘭日曆。<br>陰陽曆：以天文月和年作為日曆的主要週期，例如：中國農曆。<br>【中國公曆規則】</p>
<p>中國公曆也就是世界通用的 Gregorian 曆，它以年作為主要週期。為了和天文年保持同步，公曆使用兩種不同天數的年：</p>
<p>常年：365天。<br>閏年：366天。<br>公曆年一般都是常年，只有少數年是閏年，由下面三條規則確定：</p>
<p>一、如果年的數目是4的倍數，就是閏年。<br>二、但是，如果年的數目是100的倍數，規則一就無效，仍是常年。<br>三、但是，如果年的數目是400的倍數，規則二就無效，仍是閏年。<br>根據規則一，公曆每4年就比天文年多0.03124天：</p>
<p>4 Gregorian years:3*365+366=1461days</p>
<p>4 tropical years:4*365.2421896698=1460.9687586792 days</p>
<p>根據規則二，公曆每100年就比天文年少0.21897天：</p>
<p>100 Gregorian years:76*365+24*366=36524 days</p>
<p>100 tropical years:100*365.2421896698=36524.21896698 days</p>
<p>根據規則三，公曆每400年就比天文年多0.12413天：</p>
<p>400 Gregorian years:305*365+95*366=146097 days</p>
<p>400 tropical years:400*365.2421896698=146096.87586792 days</p>
<p>照此計算，公曆每2500年就比天文年多出1天。</p>
<p>公曆將一年份為十二個月。常年每月的天數分佈如下：</p>
<p><br>月份</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>4</p>
<p>5</p>
<p>6</p>
<p>7</p>
<p>8</p>
<p>9</p>
<p>10</p>
<p>11</p>
<p>12</p>
<p>天數</p>
<p>31</p>
<p>28</p>
<p>31</p>
<p>30</p>
<p>31</p>
<p>30</p>
<p>31</p>
<p>31</p>
<p>30</p>
<p>31</p>
<p>30</p>
<p>31</p>
<p>閏年的二月為29天。</p>
<p>公曆的月跟天文月毫無關係。</p>
<p>公曆還有一個跟年和月毫無關係的週期，叫作星期，每星期七天。公曆第一年的第一天是星期一。</p>
<p>公曆400年共有146097天，正好是7的倍數，所以星期和年每400年循環一次。</p>
<p>【中國農曆規則】</p>
<p>中國農曆是陰陽曆，同時跟天文月和天文年同步。</p>
<p>農曆月的天數是一個變數，有時是29天，有時是30天。</p>
<p>農曆每月的第一天是月亮全黑的日子。</p>
<p>農曆年由 24 個節氣來確定，節氣則由太陽的角度來確定。農曆的第一個節氣叫雨水，定在太陽的角度為330度的日子。其餘的23個節氣分別定在太陽的角度每變化15度的日子。下面的表格列出了24個節氣的名稱和定義：</p>
<p>名稱</p>
<p>角度</p>
<p>公曆日期</p>
<p>週期</p>
<p>----</p>
<p>立春</p>
<p>315</p>
<p>2月4日</p>
<p> </p>
<p>雨水</p>
<p>330</p>
<p>2月19日</p>
<p>29.8天</p>
<p>驚蟄</p>
<p>345</p>
<p>3月6日</p>
<p> </p>
<p>春分</p>
<p>0</p>
<p>3月21日</p>
<p>30.2天</p>
<p>清明</p>
<p>15</p>
<p>4月5日</p>
<p> </p>
<p>穀雨</p>
<p>30</p>
<p>4月20日</p>
<p>30.7天</p>
<p>立夏</p>
<p>45</p>
<p>5月6日</p>
<p> </p>
<p>夏滿</p>
<p>60</p>
<p>5月21日</p>
<p>31.2天</p>
<p>芒種</p>
<p>75</p>
<p>6月6日</p>
<p> </p>
<p>夏至</p>
<p>90</p>
<p>6月22日</p>
<p>31.4天</p>
<p>小暑</p>
<p>105</p>
<p>7月7日</p>
<p> </p>
<p>大暑</p>
<p>120</p>
<p>7月23日</p>
<p>31.4天</p>
<p>立秋</p>
<p>135</p>
<p>8月8日</p>
<p> </p>
<p>處暑</p>
<p>150</p>
<p>8月23日</p>
<p>31.1天</p>
<p>白露</p>
<p>165</p>
<p>9月8日</p>
<p> </p>
<p>秋分</p>
<p>180</p>
<p>9月23日</p>
<p>30.7天</p>
<p>寒露</p>
<p>195</p>
<p>10月8日</p>
<p> </p>
<p>霜降</p>
<p>210</p>
<p>10月24日</p>
<p>30.1天</p>
<p>立冬</p>
<p>225</p>
<p>11月8日</p>
<p> </p>
<p>小雪</p>
<p>240</p>
<p>11月22日</p>
<p>29.7天</p>
<p>大雪</p>
<p>255</p>
<p>12月7日</p>
<p> </p>
<p>冬至</p>
<p>270</p>
<p>12月22日</p>
<p>29.5天</p>
<p>小寒</p>
<p>285</p>
<p>1月6日</p>
<p> </p>
<p>大寒</p>
<p>300</p>
<p>1月20日</p>
<p>29.5天</p>
<p>24個節氣中有12個是主節氣：雨水、春分、穀雨、夏滿、夏至、大暑、處暑、秋分、霜降、小雪、冬至、大寒。</p>
<p>農曆年跟天文年相差較大。農曆常年有十二個農曆月，有353，354，或者355天，比天文年少大約11天。為了跟天文年同步，每隔三個農曆常年左右，必需設一閏年。閏年有十三個月，添加的這個月叫閏月。</p>
<p>農曆十二個月的名稱分別為：正月、二月、三月、四月、五月、六月、七月、八月、九月、十月、冬月、臘月。</p>
<p>農曆閏年閏月的確定比較難，規則有兩條：</p>
<p>一、冬至必須落在農曆冬月。如果落不上，臘月之前就要添上一個月，成為閏年。<br>二、如果是閏年，冬月後邊第一個不含主節氣的月份定為閏月。閏月使用前一月份的名稱。<br>農曆年以60年為一週期，每年的名稱由10個天干的一個字和12個地支的一個字排列而成。10天干為：甲，乙，丙，丁，戊，己，庚，辛，壬，癸。12地支為：子，丑，寅，卯，辰，巳，午，未，申，酉，戌，亥。12 地支有12動物生肖與其對應：鼠，牛，虎，兔，龍，蛇，馬，羊，猴，雞，狗，豬。</p>
<p>跟據歷史記載，農曆年已經經過了78個週期。公曆1999年，是第79個週期的第17年，也就是農曆第4696年。</p>
<p>總結起來，中國農曆有下例6條規則：</p>
<p>一、月全黑規則：月全黑的日子是農曆月的第一天，農曆月週期由此而定。<br>二、24節氣規則：24節氣把天文年按太陽角度分成24等份，15度一節氣。這個規則確定了農曆和天文年的關係。<br>三、冬至規則：冬至必須落在農曆冬月。如果落不上，臘月之前就要添上一個月，成為閏年。<br>四、閏月規則：如果是閏年，冬月後邊第一個不含主節氣的月份定為閏月。<br>五、60年週期：農曆年以60年為一週期。<br>六、規則一和二的計算必須以中國南京紫金山天文台的觀察為準。</p>
<p>【國曆閏年的方式為何？】</p>
<p>年的制訂是利用太陽的運動而來，一回歸年是指太陽在天上運行，連續兩次通過春分點的間隔時間，稱為一個回歸年（tropical year），實際長度為365.24219天，這是真正的一年長度。</p>
<p>國曆曆法上的一年長度則為365天，稱為一「曆年（calendar year）」，回歸年會曆年多出0.24219天（相當於5.8小時），如此一來，累積4年後為0.96876天，幾近一天，為修正之，故國曆曆法中有「閏年」制度，每四年會多2月29日一天。</p>
<p>然而，累積四年後多的0.96876天，與真正的一日尚差0.03124天，故如果不間斷地按四年一閏的方式修正，百年後將累積成365*100+25＝36525日，又比真正的一世紀日數365.24219*100＝36524.219多了一點點。</p>
<p>因此曆法學家便重新規定閏年的規則為：西元年份</p>
<p>1.逢4的倍數閏，例如：西元1992、1996年等，為4的倍數，故為閏年。</p>
<p>2.逢100的倍數不閏，例如：西元1700、1800、1900年，為100的倍數，當年不閏年。</p>
<p>3.逢400的倍數閏，例如：西元1600、2000、2400年，為400的倍數，有閏年。</p>
<p>4.逢4000的倍數不閏，例如：西元4000、8000年，不閏年。</p>
<p>西元1849年至2031年農曆閏年的月份有：閏二月、閏三月、閏四月、閏五月、閏六月、閏七月、閏八月、閏九月、閏十月。</p>
<p> </p>
<p>【陰陽合曆】</p>
<p>陰陽合曆是陽曆與陰曆並顧的曆法，月份以月球週期為準，年的長度以太陽年為準。為使月份與季節寒暑相配合，因此有閏月的設計，此為我國固有之曆法，相對於國曆一般習稱之為陰曆，後來因農民大都喜依此曆進行農事，故稱它為農曆。<br>我國古代所行的曆法是屬陰陽合曆，月份是配合月象的圓缺，而年要配合四季寒暑的變換，可是十二個陰曆月（朔望月）不過約354日左右，而一個回歸年卻有365.2422日，兩者相差11日左右，因此大約每三年須加一個閏月，精確地說十九年須加七個閏月，其計算方法：<br>19個回歸年＝365.2422日×19＝6939.6018日<br>12個朔望月×19＋7個朔望月＝29.53059日×235＝6939.6887日<br>其實「十九年七閏」並不是很精確的數字。先賢知道更精確的「391年144閏」術語沒有通行，因為人的一生也不過百歲；每一朝代頒令新曆法示天子權威時，也知道每百年又會改曆，原因就在古代觀天儀器和天文科學不如今日。換言之，古代無法觀測出精確的中節氣和月朔的時間，而定下"差不多"的「民用閏月法」。<br>它和精確的天文「曆理閏月法」不同之處在：「凡曆理之氣朔論小餘；頒之民用之氣朔只論日辰，不論小餘」。簡言之，當比較中節氣和月朔時間前後時，「民用」只比較日期，不比較時分；「曆理」則比較日期和時分。<br>由於農曆置閏的安排，主要是用以控制陰曆月在年中的位置，使它能配合一年四季寒暑的變化，因此閏月在年中出現的機會較多，靠近年頭年尾則較少。<br>下圖是西元1849年至2031年的資料統計圖，我們可以發現其中以閏五月次數最多，而沒有閏正月、閏十一月和閏十二月。由統計圖我們也可以發現，閏月的分佈並無規律性。</p>
<p>閏十月</p>
<p>1870</p>
<p>1984</p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p>閏九月</p>
<p>2014</p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p>閏八月</p>
<p>1851</p>
<p>1862</p>
<p>1900</p>
<p>1957</p>
<p>1976</p>
<p>1995</p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p>閏七月</p>
<p>1854</p>
<p>1881</p>
<p>1919</p>
<p>1938</p>
<p>1949</p>
<p>1968</p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p>閏六月</p>
<p>1873</p>
<p>1892</p>
<p>1911</p>
<p>1930</p>
<p>1941</p>
<p>1963</p>
<p>1979</p>
<p>1987</p>
<p>2017</p>
<p>2025</p>
<p>閏五月</p>
<p>1857</p>
<p>1865</p>
<p>1876</p>
<p>1884</p>
<p>1895</p>
<p>1903</p>
<p>1914</p>
<p>1922</p>
<p>1933</p>
<p>1952</p>
<p>1971</p>
<p>1990</p>
<p>1998</p>
<p>2009</p>
<p>2028</p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p>閏四月</p>
<p>1849</p>
<p>1868</p>
<p>1887</p>
<p>1906</p>
<p>1925</p>
<p>1944</p>
<p>1963</p>
<p>1974</p>
<p>1982</p>
<p>2001</p>
<p>2012</p>
<p>2020</p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p>閏三月</p>
<p>1860</p>
<p>1879</p>
<p>1898</p>
<p>1936</p>
<p>1955</p>
<p>1966</p>
<p>1993</p>
<p>2031</p>
<p> </p>
<p> </p>
<p>閏二月</p>
<p>1890</p>
<p>1909</p>
<p>1928</p>
<p>1947</p>
<p>2004</p>
<p>2023</p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p>閏月指的是陰曆中的一種現象，陰曆是按照月亮的圓缺即朔望月安排大月和小月。一個朔望月的長度是29.5306日，是月相盈虧的週期，陰曆規定，大月30天，小月29天，這樣一年12個月共354天，陰曆的月份沒有季節意義，這樣一年就與陽曆的一年相差11天，只需經過17年，陰陽曆日期就同季節發生倒置，譬如，某年新年是在瑞雪紛飛中度過，17年後，便要搖扇過新年了。使用這樣的曆法，自然是無法滿足農業生產的需要的，所以我國的陰曆自秦漢以來，一直和24節氣並行，用24節氣來指導農業生產。</p>
<p>二十四節氣又可分為“節氣”和“中氣”二組：古人把從小寒起每隔黃經300為一節氣；從冬至起每隔黃經300為一中氣，一年有12個節氣，12個中氣。12節氣把一年分為12個節月，每個節月各有一個節氣和一個中氣。節氣是節月的起點；中氣是節日的中點。我國傳統曆法對於日序和月序以及大月、小月、平年和閏年，不像一般曆法那樣採用長期安排的方法，而是強調逐年逐月的推算，國家設有專門的機構從事曆法的推算。</p>
<p>(一)以月相定日序。它逐一推算日月合朔的日期和時刻，每月的初一就是合朔的日期；根據先後二次合朔包含的日數，確定前月的大小。如果從這一合朔到下一次合朔的間隔是30天，那麼當月便是大月；如果只隔29天，便為小月。</p>
<p>(二)以中氣定月序。首先，以曆月中有無中氣區分曆月和閏月，我們知道一個回歸年有12個中氣，但卻包含365.2422÷29.5306＝2.3682個朔望月，經過幾番曆月輪轉之後，必有一個曆月沒有中氣。《漢書·律曆表》載：“朔不不得中，謂之閏月”。這個沒有中氣的月份便是閏月。它前一曆日為幾月即為閏幾月。例如，1984年的那次閏月出現在舊曆十月之後，因而叫它“閏十月”。閏月是推算出來的，在一年的月序中不固定，除農曆十一月、十二月、正月外，閏幾月都可能，十九年七閏。</p>
<p>綜上所述，閏年是陽曆中的一種現象，固定在二月，比平年加一天，29天；閏月是陰曆中的一個現象，閏一個月，那一年陰曆有13個月，那一年叫閏月年。所以閏月年會有29.5306×13=383.8978日，大約384天。</p>
<p><span> </span></p><h3>程式範例流程</h3>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">class 吃():
    def 吃飯去(self, 幾次):
        for i in range(幾次):
            print("吃飯去")

class 也吃(吃):
    def 吃飯去(self, 幾次):
        for i in range(幾次):
            print("第", i, "次吃飯去")

就要吃 = 吃()
就要吃.吃飯去(3)

來去吃 = 也吃()
來去吃.吃飯去(3)</pre>
<p><a href="brython?filename=eat1.py">brython?filename=eat1.py</a></p>
<p><iframe src="brython?filename=eat1.py" frameborder="0" width="800" height="600"></iframe></p><h3>教科書章節參考2</h3>
<p>前言<br>第一部分 關於電腦的思考<br>第0章 電腦科學研究<br>0.1 為什麼要研究電腦科學<br>0.1.1 電腦科學的重要性<br>0.1.2 電腦「科學」<br>0.1.3 通過編程學習電腦科學<br>0.2 編程的困難和使命<br>0.2.1 困難1：同時做兩件事<br>0.2.2 困難2：什麼是好程序<br>0.2.3 程序的使命<br>0.3 選擇一種電腦語言<br>0.3.1 各種電腦語言<br>0.3.2 為什麼選Python<br>0.3.3 Python是最好的程序語言嗎<br>0.4 什麼是計算<br>0.5 什麼是電腦<br>0.5.1 自然界中的計算<br>0.5.2 人類製造的電腦<br>0.6 現代電子電腦<br>0.6.1 就是開關<br>0.6.2 晶體管<br>0.7 從更高層面來了解現代電腦<br>0.8 數據表示<br>0.8.1 二進位數據<br>0.8.2 使用二進位<br>0.8.3 局限性<br>0.8.4 字元表示<br>0.8.5 其他數據表示<br>0.8.6 數字代表什麼<br>0.8.7 數據量<br>0.8.8 數據量有多大<br>0.9 後續章節概述<br>0.10 總結<br>第二部分 開始編程<br>第1章 入門<br>1.1 練習，練習，再練習<br>1.2 快速入門——計算圓周長的程序<br>1.3 互動式會話<br>1.4 程序組成部分<br>1.4.1 模塊<br>1.4.2 表達式和語句<br>1.4.3 空白<br>1.4.4 註釋<br>1.4.5 Python 的特殊元素：標記<br>1.4.6 對象命名<br>1.5 變數<br>1.6 對象和類型<br>1.6.1 數字</p>
<p>1.6.2 其他內置類型<br>1.6.3 對象類型：非變數類型<br>1.6.4 創建新值<br>1.7 運算符<br>1.7.1 整數運算符<br>1.7.2 浮點運算符<br>1.7.3 混合運算符<br>1.7.4 運算符順序和圓括弧<br>1.7.5 增強的賦值運算符：快捷方式<br>1.8 第一個模塊：math模塊<br>1.9 開發演算法<br>1.10 總結<br>1.11 視覺場景：海龜繪圖<br>習題<br>……<br>第2章 控制語句<br>第3章 演算法和程序開發<br>第三部分 組織：數據結構和函數<br>第4章 字元串<br>第5章 函數快速入門<br>第6章 列表和元組<br>第7章 深入了解函數<br>第8章 字典和集合<br>第9章 文件<br>第10章 程序開發進階<br>第四部分 類：自定義數據結構和演算法<br>第11章 類<br>第12章 類進階<br>第13章 使用類開發程序<br>第五部分 成為更好的程序員<br>第14章 異常和異常處理<br>第15章 測試<br>第16章 遞歸：另一種控制機制<br>附錄</p><h3>免費參考書</h3>
<p><a href="http://phys.csuchico.edu/ayars/312/Handouts/comp-phys-python.pdf">http://phys.csuchico.edu/ayars/312/Handouts/comp-phys-python.pdf</a></p>
<p><a href="https://www.ida.liu.se/~732A47/literature/PythonBook.pdf">https://www.ida.liu.se/~732A47/literature/PythonBook.pdf</a></p>
<p><a href="http://www.engr.ucsb.edu/~shell/che210d/python.pdf">http://www.engr.ucsb.edu/~shell/che210d/python.pdf</a></p><h3>教科書章節參考</h3>
<p>目　錄<br>　　<br>第1章　順序程式設計　1<br>1.1　用電腦解決問題的方法　1<br>1.2　程式設計方法　1<br>1.2.1　學會用框圖來描繪解決實際問題的步驟　2<br>1.2.2　把框圖轉換為程式　3<br>1.2.3　理解程式運行過程　3<br>1.2.4　掌握一些基本演算法　3<br>1.2.5　學習完整的解決問題的過程　3<br>1.3　程式設計的一般過程　4<br>1.4　順序程式設計問題　4<br>1.5　順序程式設計基礎知識　5<br>1.5.1　Python的物件模型　5<br>1.5.2　Python的變數和引用　6<br>1.5.3　數字　7<br>1.5.4　字串　7<br>1.5.5　操作符和運算式　8<br>1.5.6　常用內置函數　9<br>1.5.7　對象的刪除　12<br>1.5.8　輸入/輸出　12<br>1.5.9　模組的導入　13<br>1.6　順序程式設計基礎知識的應用　14<br>1.7　代碼塊的縮進　17<br>1.8　在Ubuntu作業系統中使用Python　17<br>1.8.1　交互程式設計視窗　18<br>1.8.2　在互動式視窗中執行Python來源程式　19<br>1.8.3　在作業系統的控制台上執行Python來源程式　19<br>1.8.4　在集成程式設計環境IDLE中編寫和執行程式　19<br>1.8.5　集成程式設計環境IDLE中的物件成員提示　20<br>1.9　在Windows作業系統中使用Python　21<br>1.10　使用幫助　21<br>本章小結　22<br>習題　23</p>
<p>第2章　使用序列　24<br>2.1　序列問題　24<br>2.2　序列基礎知識　28<br>2.3　列表　29<br>2.3.1　列表定義　29<br>2.3.2　列表的常用操作　29<br>2.3.3　清單常用函數　32<br>2.4　元組　33<br>2.4.1　元組的定義　33<br>2.4.2　元組的常用操作　33<br>2.4.3　元組和列表的區別和轉換　35<br>2.4.4　同時賦多個值　35<br>2.5　字典　35<br>2.5.1　字典定義　35<br>2.5.2　字典的常用操作　35<br>2.6　序列基礎知識的應用　37<br>本章小結　39<br>習題　40</p>
<p>第3章　選擇結構程式設計　41<br>3.1　選擇結構基本問題　41<br>3.2　選擇結構基礎知識及應用　41<br>3.2.1　運算式與運算式的值　42<br>3.2.2　複合運算式　45<br>3.2.3　選擇結構　46<br>本章小結　55<br>習題　56</p>
<p>第4章　迴圈結構程式設計　57<br>4.1　迴圈結構程式設計問題　57<br>4.2　迴圈結構概述　58<br>4.3　while語句　59<br>4.3.1　while語句解決不確定迴圈次數的問題　59<br>4.3.2　while語句解決確定迴圈次數的問題　61<br>4.3.3　while語句用於無限迴圈　62<br>4.3.4　while語句應用舉例　63<br>4.4　for語句　66<br>4.4.1　for語句用於序列類型　66<br>4.4.2　for語句用於計數迴圈　68<br>4.5　break語句　71<br>4.6　continue語句　73<br>本章小結　74<br>習題　75</p>
<p>第5章　字串　76<br>5.1　字串問題　76<br>5.2　字串基礎知識　76<br>5.2.1　字串格式化　77<br>5.2.2　字串的截取　78<br>5.2.3　字串的方法　79<br>5.2.4　與字串相關的重要內置方法　80<br>5.3　字串基礎知識的應用　81<br>本章小結　82<br>習題　82</p>
<p>第6章　函數的設計和使用　83<br>6.1　問題的引入　83<br>6.2　黑箱模型　84<br>6.3　函數基礎知識　84<br>6.3.1　函數的概念及定義　84<br>6.3.2　形參和實參　85<br>6.3.3　return語句　87<br>6.4　變數的作用域　87<br>6.4.1　區域變數　87<br>6.4.2　全域變數　88<br>6.4.3　命名空間　89<br>6.5　參數的類型　89<br>6.5.1　默認參數　89<br>6.5.2　關鍵參數　90<br>6.5.3　可變長度參數　91<br>6.5.4　序列作實參　92<br>6.6　函數基礎知識的應用　92<br>本章小結　94<br>習題　94</p>
<p>第7章　檔的使用　95<br>7.1　與文件有關的問題　95<br>7.2　檔基礎知識　97<br>7.2.1　文件的打開或創建　98<br>7.2.2　字元編碼　99<br>7.2.3　文字檔的寫入　100<br>7.2.4　文字檔的讀取　102<br>7.2.5　文件指標的移動　103<br>7.2.6　二進位檔案的寫入　103<br>7.2.7　二進位檔案的讀取　105<br>7.3　文件基礎知識的應用　107<br>7.4　檔操作　113<br>7.4.1　常用檔操作函數　113<br>7.4.2　檔的複製　115<br>7.4.3　檔的刪除　115<br>7.4.4　檔的重命名　115<br>7.4.5　文件的比較　118<br>7.5　目錄操作　119<br>7.5.1　目錄的創建　119<br>7.5.2　目錄的刪除　119<br>7.5.3　目錄的遍歷　119<br>本章小結　123<br>習題　124</p>
<p>第8章　物件導向程式設計　125<br>8.1　物件導向程式設計問題　125<br>8.2　物件導向程式設計基礎知識　126<br>8.2.1　類和對象　126<br>8.2.2　實例屬性和類屬性　127<br>8.2.3　類的方法　128<br>8.2.4　構造函數　129<br>8.2.5　析構函數　129<br>8.2.6　運算子的重載　130<br>8.2.7　繼承　131<br>本章小結　133<br>習題　133</p>
<p>第9章　圖形化使用者介面程式設計　134<br>9.1　圖形化使用者介面的選擇和安裝　134<br>9.1.1　常用GUI工具介紹　134<br>9.1.2　wxPython下載安裝　135<br>9.2　圖形化使用者介面程式設計基本問題　135<br>9.3　框架的創建和使用　136<br>9.3.1　wx.Frame的格式　136<br>9.3.2　wxPython的ID參數　138<br>9.3.3　wx.Point和wx.Size　138<br>9.3.4　設置wx.Frame的樣式　139<br>9.4　添加表單控制項　140<br>9.4.1　命令按鈕　141<br>9.4.2　文本控制項　142<br>9.4.3　功能表列、工具列和狀態列　146<br>9.4.4　對話方塊　148<br>9.4.5　核取方塊　150<br>9.4.6　選項按鈕　151<br>9.4.7　清單方塊　151<br>9.4.8　下拉式列示方塊　153<br>9.4.9　樹型控制項　153<br>9.5　使用Boa-constructor開發圖形化使用者介面程式　155<br>9.5.1　Boa-constructor的安裝　155<br>9.5.2　使用Boa-constructor開發圖形化使用者介面程式　156<br>9.6　圖形介面程式設計基礎知識的應用　160<br>本章小結　161<br>習題　162</p>
<p>第10章　網路程式設計　164<br>10.1　問題的引入　164<br>10.2　一個簡單郵寄過程　165<br>10.3　TCP/IP協議簇簡介　165<br>10.4　TCP和UDP　168<br>10.5　UDP網路程式設計　168<br>10.6　UDP代碼解釋　169<br>10.7　UDP函數介紹　170<br>10.7.1　socket　170<br>10.7.2　sendto　171<br>10.7.3　recvfrom　171<br>10.8　TCP網路程式設計　171<br>10.9　TCP代碼詳解　173<br>10.10　TCP函數介紹　174<br>10.10.1　connect　174<br>10.10.2　send　174<br>10.10.3　recv　174<br>10.10.4　bind　174<br>10.10.5　listen　174<br>10.10.6　accept　174<br>10.11　局域網聊天室　175<br>10.11.1　需求分析　175<br>10.11.2　概要設計　175<br>10.11.3　詳細設計　176<br>10.11.4　編碼和測試　177<br>本章小結　182<br>習題　183</p>
<p>第11章　異常處理　184<br>11.1　什麼是異常　184<br>11.2　Python中的異常類　184<br>11.3　捕獲和處理異常　185<br>11.3.1　try...except...語句　185<br>11.3.2　try...except...else...語句　186<br>11.3.3　帶有多個except的try語句　187<br>11.3.4　捕獲所有異常　188<br>11.3.5　finally子句　188<br>11.4　兩種處理異常的特殊方法　189<br>11.4.1　斷言語句(assert語句)　189<br>11.4.2　上下文管理(with語句)　189<br>11.5　引發異常(raise語句)　190<br>11.6　採用sys模組回溯最後的異常　192<br>本章小結　192<br>習題　192</p>
<p>第12章　資料庫應用程式開發　193<br>12.1　資料庫應用程式的問題描述　193<br>12.2　Python資料庫應用程式開發概述　194<br>12.3　SQLite簡介　195<br>12.4　SQLite基本功能　196<br>12.5　SQLite的視覺化工具　200<br>12.6　資料庫應用程式開發　205<br>本章小結　209<br>習題　209</p>
<p>第13章　遊戲開發　210<br>13.1　圖形化的問候問題　210<br>13.2　Pygame基礎知識　212<br>13.2.1　Pygame的安裝　212<br>13.2.2　Pygame的模組　213<br>13.2.3　Pygame的使用　215<br>13.3　遊戲開發　218<br>本章小結　228<br>習題　229</p>
<p>第14章　語音辨識軟體發展　230<br>14.1　speech.py語音模組的簡介　230<br>14.2　語音辨識開發環境的建立　230<br>14.3　語音辨識的配置　231<br>14.4　語音模組的運用　232<br>本章小結　239<br>習題　239</p>
<p>第15章　螢幕廣播程式開發　240<br>15.1　螢幕廣播程式原理　240<br>15.2　教師端　241<br>15.3　學生端　243<br>15.4　程式運行　246<br>本章小結　247<br>習題　247</p>
<p>第16章　web2py程式設計　248<br>16.1　網頁與HTML　248<br>16.1.1　HTML語言簡介　248<br>16.1.2　HTML標籤簡介　249<br>16.2　web2py與MVC　249<br>16.2.1　安裝web2py　249<br>16.2.2　web2py的應用　251<br>本章小結　257<br>習題　257</p>
<p>附錄A　一些重要的內建函數　258<br>附錄B　列表方法　261<br>附錄C　字典方法　262<br>附錄D　字串物件的方法　263<br>附錄E　線上資源　265<br>附錄F　使用py2exe創建可執行程式　266<br>附錄G　使用WinRAR處理發佈的檔清單　269</p>
<p>參考文獻　272</p><h3>影片教材</h3>
<p>the machine that changed the world (released 1992):</p>
<p><a href="https://www.youtube.com/watch?v=kYFRdV1r4nU&amp;list=PLcEaxFOVJTbGjG-wcuHWSrWBB9BIzQZaJ">https://www.youtube.com/watch?v=kYFRdV1r4nU&amp;list=PLcEaxFOVJTbGjG-wcuHWSrWBB9BIzQZaJ</a></p>
<p>1. "Giant Brains" <a href="https://www.youtube.com/watch?v=kYFRdV1r4nU">https://www.youtube.com/watch?v=kYFRdV1r4nU</a><br>2. "Inventing the Future" <a href="https://www.youtube.com/watch?v=krlZf5H7Hp4">https://www.youtube.com/watch?v=krlZf5H7Hp4</a><br>3. "The Paperback Computer" <a href="https://www.youtube.com/watch?v=iwEpKy_7mYM">https://www.youtube.com/watch?v=iwEpKy_7mYM</a><br>4. "The Thinking Machine" <a href="https://www.youtube.com/watch?v=tXMaFhO6dIY">https://www.youtube.com/watch?v=tXMaFhO6dIY</a><br>5. "The World at Your Fingertips"  <a href="https://www.youtube.com/watch?v=6Z8OmqY3zJI">https://www.youtube.com/watch?v=6Z8OmqY3zJI</a></p>
<p><a href="download/?filepath=/var/lib/openshift/5364a49c5973ca5ea9000882/app-root/data//downloads/computer_video_mp3.7z">computer video mp3.7z</a></p>
<p>How computers work:</p>
<p>1. How Computers Work: Information <a href="https://www.youtube.com/watch?v=AtqjxyV9t1I">https://www.youtube.com/watch?v=AtqjxyV9t1I</a></p>
<p>2. How Computers Work: Computation <a href="https://www.youtube.com/watch?v=9a7XQmEBK5Q">https://www.youtube.com/watch?v=9a7XQmEBK5Q</a></p>
<p>3. How Computers Work: Programming <a href="https://www.youtube.com/watch?v=E5SED8le34o">https://www.youtube.com/watch?v=E5SED8le34o</a></p><h3>一山還比一山高</h3>
<p>假如您覺得 <a href="copy.com">copy.com</a> 免費 15 GB 已經夠好, 試試看  <a href="https://mega.co.nz">https://mega.co.nz</a> , 一個電子郵箱可以換免費 50 GB 雲端空間.</p>
<p>人家說紐西蘭是電子商務天堂, 看在這免費 50 GB 空間的份上, 好像真的是這樣.</p>
<p>或許再過不久, 台灣科技部所推動的雲端慘業, 可以帶出一個免費給用戶 500 GB 甚至 500 TB 免費雲端空間的公司, 紅雞你要加油!</p><h3>準備丟掉其他程式開發工具</h3>
<p>電腦軟硬體科技一日千里, 想要掌控它的人, 也就被迫要一日千里</p>
<p><a href="http://www.slideshare.net/cfsghost/nodejs-19410474">http://www.slideshare.net/cfsghost/nodejs-19410474</a></p>
<p><a href="http://developer.51cto.com/art/201312/424370.htm">http://developer.51cto.com/art/201312/424370.htm</a></p><h3>網站要如何動人</h3>
<p>參考: <a href="http://chrisdone.com/posts/haskell-lang">http://chrisdone.com/posts/haskell-lang</a></p>
<p>A theme<br>Logo<br>Menu<br>Download<br>Community<br>Documentation<br>News<br>Visual things<br>Opening paragraph<br>Code sample<br>Thumbnails of videos<br>Pictures of community stuff; human beings<br>Screenshots<br>Selling points<br>News<br>Twitter/feeds<br>Supporters / sponsoring companies<br>Other links<br>Application areas / success stories<br>Language options (locale; Japanese, German, etc.)</p><h3>Brython graphics lib</h3>
<p><a href="http://agentultra.com/2014/05/24/python-and-canvas2d-with-brython/">http://agentultra.com/2014/05/24/python-and-canvas2d-with-brython/</a></p>
<p>Python in the browser intro: <a href="http://www.youtube.com/watch?v=BcDV9QUium4">http://www.youtube.com/watch?v=BcDV9QUium4</a></p><h3>Calendar module</h3>
<p>程式練習, 在日曆列印中加入農曆對照.</p>
<p>Source: <a href="http://www.gerd-tentler.de/tools/pycalendar/">http://www.gerd-tentler.de/tools/pycalendar/</a></p>
<p>Usage: <a href="http://www.gerd-tentler.de/tools/pycalendar/?page=usage">http://www.gerd-tentler.de/tools/pycalendar/?page=usage</a></p>
<p>Other example: <a href="http://www.gerd-tentler.de/tools/pygraphs">http://www.gerd-tentler.de/tools/pygraphs</a></p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">"""
 +-------------------------------------------------------------------+
 |                  H T M L - C A L E N D A R   (v2.16 fixed for Python 3)              |
 |                                                                   |
 | Copyright Gerd Tentler               www.gerd-tentler.de/tools    |
 | Created: May 27, 2003                Last modified: Feb. 12, 2012 |
 | Fixed for Python 3 on 2014/07/06
 +-------------------------------------------------------------------+
 | This program may be used and hosted free of charge by anyone for  |
 | personal purpose as long as this copyright notice remains intact. |
 |                                                                   |
 | Obtain permission before selling the code for this program or     |
 | hosting this software on a commercial website or redistributing   |
 | this software over the Internet or in any other medium. In all    |
 | cases copyright must remain intact.                               |
 +-------------------------------------------------------------------+

 EXAMPLE #1:  myCal = calendar.MonthlyCalendar()
              print(myCal.create())

 EXAMPLE #2:  myCal = calendar.MonthlyCalendar(2004, 12)
              print(myCal.create())

 EXAMPLE #3:  myCal = calendar.MonthlyCalendar()
              myCal.year = 2004
              myCal.month = 12
              print(myCal.create())
 Example #4:

import htmlCalendar as calendar
myCal = calendar.MonthlyCalendar()
myCal.year = 2004
myCal.month = 12
print(myCal.create())

 Returns HTML code
=========================================================================================================
"""

import time
import math

cal_ID = 0

class MonthlyCalendar:
	"""creates a monthly calendar"""
	def __init__(self, year = None, month = None, week = None):
#========================================================================================================
# Configuration
#========================================================================================================
		self.tFontFace = 'Arial, Helvetica' # title: font family (CSS-spec, e.g. "Arial, Helvetica")
		self.tFontSize = 14                 # title: font size (pixels)
		self.tFontColor = '#FFFFFF'         # title: font color
		self.tBGColor = '#304B90'           # title: background color

		self.hFontFace = 'Arial, Helvetica' # heading: font family (CSS-spec, e.g. "Arial, Helvetica")
		self.hFontSize = 12                 # heading: font size (pixels)
		self.hFontColor = '#FFFFFF'         # heading: font color
		self.hBGColor = '#304B90'           # heading: background color

		self.dFontFace = 'Arial, Helvetica' # days: font family (CSS-spec, e.g. "Arial, Helvetica")
		self.dFontSize = 14                 # days: font size (pixels)
		self.dFontColor = '#000000'         # days: font color
		self.dBGColor = '#FFFFFF'           # days: background color

		self.wFontFace = 'Arial, Helvetica' # weeks: font family (CSS-spec, e.g. "Arial, Helvetica")
		self.wFontSize = 12                 # weeks: font size (pixels)
		self.wFontColor = '#FFFFFF'         # weeks: font color
		self.wBGColor = '#304B90'           # weeks: background color

		self.saFontColor = '#0000D0'        # Saturdays: font color
		self.saBGColor = '#F6F6FF'          # Saturdays: background color

		self.suFontColor = '#D00000'        # Sundays: font color
		self.suBGColor = '#FFF0F0'          # Sundays: background color

		self.tdBorderColor = '#FF0000'      # today: border color

		self.borderColor = '#304B90'        # border color
		self.hilightColor = '#FFFF00'       # hilight color (works only in combination with link)

		self.link = ''                      # page to link to when day is clicked
		self.linkTarget = ''				# link target frame or window, e.g. parent.myFrame
		self.offset = 1                     # week start: 0 - 6 (0 = Saturday, 1 = Sunday, 2 = Monday ...)
		self.weekNumbers = 1                # view week numbers: 1 = yes, 0 = no

#--------------------------------------------------------------------------------------------------------
# You should change these variables only if you want to translate them into your language:
#--------------------------------------------------------------------------------------------------------
		# weekdays: must start with Saturday because January 1st of year 1 was a Saturday
		self.weekdays = ('Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr')

		# months: must start with January
		self.months = ('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December')

		# error messages
		self.error = ('Year must be 1 - 3999!', 'Month must be 1 - 12!')
#========================================================================================================

		if year is None and month is None:
			year = time.localtime().tm_year
			month = time.localtime().tm_mon
		elif year is None and month is not None: year = time.localtime().tm_year
		elif month is None: month = 1
		if week is None: week = 0;
		self.year = int(year)
		self.month = int(month)
		self.week = int(week)
		self.specDays = {}
		self.specDays2 = {}
		if self.linkTarget == '': self.linkTarget = 'document'

	__size = 0
	__mDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

	def set_styles(self):
		"""set calendar styles"""
		globals()['cal_ID'] += 1
		html = '&lt;style&gt; .cssTitle' + str(globals()['cal_ID']) + ' { '
		if self.tFontFace: html += 'font-family: ' + self.tFontFace + '; '
		if self.tFontSize: html += 'font-size: ' + str(self.tFontSize) + 'px; '
		if self.tFontColor: html += 'color: ' + self.tFontColor + '; '
		if self.tBGColor: html += 'background-color: ' + self.tBGColor + '; '
		html += '} .cssHeading' + str(globals()['cal_ID']) + ' { '
		if self.hFontFace: html += 'font-family: ' + self.hFontFace + '; '
		if self.hFontSize: html += 'font-size: ' + str(self.hFontSize) + 'px; '
		if self.hFontColor: html += 'color: ' + self.hFontColor + '; '
		if self.hBGColor: html += 'background-color: ' + self.hBGColor + '; '
		html += '} .cssDays' + str(globals()['cal_ID']) + ' { '
		if self.dFontFace: html += 'font-family: ' + self.dFontFace + '; '
		if self.dFontSize: html += 'font-size: ' + str(self.dFontSize) + 'px; '
		if self.dFontColor: html += 'color: ' + self.dFontColor + '; '
		if self.dBGColor: html += 'background-color: ' + self.dBGColor + '; '
		html += '} .cssWeeks' + str(globals()['cal_ID']) + ' { '
		if self.wFontFace: html += 'font-family: ' + self.wFontFace + '; '
		if self.wFontSize: html += 'font-size: ' + str(self.wFontSize) + 'px; '
		if self.wFontColor: html += 'color: ' + self.wFontColor + '; '
		if self.wBGColor: html += 'background-color: ' + self.wBGColor + '; '
		html += '} .cssSaturdays' + str(globals()['cal_ID']) + ' { '
		if self.dFontFace: html += 'font-family: ' + self.dFontFace + '; '
		if self.dFontSize: html += 'font-size: ' + str(self.dFontSize) + 'px; '
		if self.saFontColor: html += 'color: ' + self.saFontColor + '; '
		if self.saBGColor: html += 'background-color: ' + self.saBGColor + '; '
		html += '} .cssSundays' + str(globals()['cal_ID']) + ' { '
		if self.dFontFace: html += 'font-family: ' + self.dFontFace + '; '
		if self.dFontSize: html += 'font-size: ' + str(self.dFontSize) + 'px; '
		if self.suFontColor: html += 'color: ' + self.suFontColor + '; '
		if self.suBGColor: html += 'background-color: ' + self.suBGColor + '; '
		html += '} .cssHilight' + str(globals()['cal_ID']) + ' { '
		if self.dFontFace: html += 'font-family: ' + self.dFontFace + '; '
		if self.dFontSize: html += 'font-size: ' + str(self.dFontSize) + 'px; '
		if self.dFontColor: html += 'color: ' + self.dFontColor + '; '
		if self.hilightColor: html += 'background-color: ' + self.hilightColor + '; '
		html += 'cursor: default; '
		html += '} &lt;/style&gt;'
		return html

	def leap_year(self, year):
		"""check if year is a leap year"""
		return not (year % 4) and (year &lt; 1582 or year % 100 or not (year % 400))

	def get_weekday(self, year, days):
		"""return weekday (0 - 6) of nth day in year"""
		a = days
		if year: a += (year - 1) * 365
		for i in range(1, year):
			if self.leap_year(i): a += 1
		if year &gt; 1582 or (year == 1582 and days &gt; 277): a -= 10
		if a: a = (a - self.offset) % 7
		elif self.offset: a += 7 - self.offset
		return a

	def get_week(self, year, days):
		"""return week number of nth day in year"""
		firstWDay = self.get_weekday(year, 0)
		if year == 1582 and days &gt; 277: days -= 10

		return int(math.floor((days + firstWDay) / 7) + (firstWDay &lt;= 3))

	def table_cell(self, content, cls, date = '', style = ''):
		"""return formatted table cell with content"""
		size = int(round(self.__size * 1.5))
		html = '&lt;td align=center width=' + str(size) + ' class="' + cls + '"'

		if content != '&amp;nbsp;' and cls.lower().find('day') != -1:
			link = self.link
			bgColor = ''
			events = []

			#if self.specDays.has_key(content):
			# has_key is deprecated in Python 3
			if content in self.specDays:
				for v in self.specDays[content]:
					if v[0]: bgColor = v[0]
					if v[1]: events.append(v[1])
					if v[2]: link = v[2]
				html += ' title="' + ' &amp;middot; '.join(events) + '"'
				if bgColor: style += 'background-color:' + bgColor

			if link:
				link += (link.find('?') != -1) and '&amp;date=' + date or '?date=' + date
				html += ' onMouseOver="this.className=\'cssHilight' + str(globals()['cal_ID']) + '\'"'
				html += ' onMouseOut="this.className=\'' + cls + '\'"'
				html += ' onClick="' + self.linkTarget + '.location.href=\'' + link + '\'"'
		if style: html += ' style="' + style + '"'
		html += '&gt;' + content + '&lt;/td&gt;'
		return html

	def table_head(self, content):
		"""return formatted table head with content"""
		cols = self.weekNumbers and '8' or '7'
		html = '&lt;tr&gt;&lt;td colspan=' + cols + ' class="cssTitle' + str(globals()['cal_ID']) + '" align=center&gt;&lt;b&gt;' + \
			content + '&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;'
		for i in range(len(self.weekdays)):
			ind = (i + self.offset) % 7
			wDay = self.weekdays[ind]
			html += self.table_cell(wDay, 'cssHeading' + str(globals()['cal_ID']))
		if self.weekNumbers: html += self.table_cell('&amp;nbsp;', 'cssHeading' + str(globals()['cal_ID']))
		html += '&lt;/tr&gt;'
		return html

	def viewEvent(self, start, end, color, title, link = ''):
		"""add event to calendar"""
		if start &gt; end: return
		if start &lt; 1 or start &gt; 31: return
		if end &lt; 1 or end &gt; 31: return
		while start &lt;= end:
			if not self.specDays.has_key(str(start)): self.specDays[str(start)] = []
			self.specDays[str(start)].append((color, title, link))
			start += 1

	def viewEventEach(self, weekday, color, title, link = ''):
		"""add event to calendar"""
		if weekday &lt; 0 or weekday &gt; 6: return
		if not self.specDays2.has_key(str(weekday)): self.specDays2[str(weekday)] = []
		self.specDays2[str(weekday)].append((color, title, link))

	def create(self):
		"""create monthly calendar"""
		self.__size = (self.hFontSize &gt; self.dFontSize) and self.hFontSize or self.dFontSize
		if self.wFontSize &gt; self.__size: self.__size = self.wFontSize

		date = time.strftime('%Y-%m-%d', time.localtime())
		(curYear, curMonth, curDay) = [int(v) for v in date.split('-')]

		if self.year &lt; 1 or self.year &gt; 3999: html = '&lt;b&gt;' + self.error[0] + '&lt;/b&gt;'
		elif self.month &lt; 1 or self.month &gt; 12: html = '&lt;b&gt;' + self.error[1] + '&lt;/b&gt;'
		else:
			self.__mDays[1] = self.leap_year(self.year) and 29 or 28
			days = 0
			for i in range(self.month - 1): days += self.__mDays[i]

			start = self.get_weekday(self.year, days)
			stop = self.__mDays[self.month-1]

			html = self.set_styles()
			html += '&lt;table border=0 cellspacing=0 cellpadding=0&gt;&lt;tr&gt;'
			html += '&lt;td' + (self.borderColor and ' bgcolor=' + self.borderColor) + '&gt;'
			html += '&lt;table border=0 cellspacing=1 cellpadding=3&gt;'
			title = self.months[self.month-1] + ' ' + str(self.year)
			html += self.table_head(title)
			daycount = 1

			if self.year == curYear and self.month == curMonth: inThisMonth = 1
			else: inThisMonth = 0

			if self.weekNumbers or self.week: weekNr = self.get_week(self.year, days)

			for i in range(self.__mDays[self.month-1] + 1):
				for j, v in self.specDays2.items():
					if self.get_weekday(self.year, days + i) == int(j) - self.offset + 1:
						if not self.specDays.has_key(str(i)): self.specDays[str(i)] = []
						for v in self.specDays2[j]:
							self.specDays[str(i)].append(v)

			while daycount &lt;= stop:
				if self.week and self.week != weekNr:
					daycount += 7 - (daycount == 1 and start or 0)
					weekNr += 1
					continue
				html += '&lt;tr&gt;'
				wdays = 0

				for i in range(len(self.weekdays)):
					ind = (i + self.offset) % 7
					if ind == 0: cls = 'cssSaturdays'
					elif ind == 1: cls = 'cssSundays'
					else: cls = 'cssDays'

					style = ''
					date = "%4d-%02d-%02d" % (self.year, self.month, daycount)

					if (daycount == 1 and i &lt; start) or daycount &gt; stop: content = '&amp;nbsp;'
					else:
						content = str(daycount)
						if inThisMonth and daycount == curDay:
							style = 'padding:0px;border:3px solid ' + self.tdBorderColor + ';'
						elif self.year == 1582 and self.month == 10 and daycount == 4: daycount = 14
						daycount += 1
						wdays += 1

					html += self.table_cell(content, cls + str(globals()['cal_ID']), date, style)

				if self.weekNumbers:
					if not weekNr:
						if self.year == 1: content = '&amp;nbsp;'
						elif self.year == 1583: content = '51'
						else: content = str(self.get_week(self.year - 1, 365))
					elif self.month == 12 and weekNr &gt;= 52 and wdays &lt; 4: content = '1'
					else: content = str(weekNr)

					html += self.table_cell(content, 'cssWeeks' + str(globals()['cal_ID']))
					weekNr += 1

				html += '&lt;/tr&gt;'
			html += '&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'
		return html

if __name__ == '__main__':
	print (__doc__)
</pre>
<p> </p><h3>農曆程式</h3>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">#!/usr/bin/env python
#coding=utf-8
#
# 適用農曆 1901 到 2099 轉換
#
# 存儲1901-2099年每年每月的天數，第1位到第13位存儲每月（包括閏月共13月）的天數，為1表示該月為30天，
# 為0表示該月為29天。第12－15位表示該年閏月的月份，如果為0x0F表示該年沒有閏月。
g_lunar_month_days = [
    0xF0EA4, 0xF1D4A, 0x52C94, 0xF0C96, 0xF1536, 0x42AAC, 0xF0AD4, 0xF16B2, 0x22EA4, 0xF0EA4,  # 1901-1910
    0x6364A, 0xF164A, 0xF1496, 0x52956, 0xF055A, 0xF0AD6, 0x216D2, 0xF1B52, 0x73B24, 0xF1D24,  # 1911-1920
    0xF1A4A, 0x5349A, 0xF14AC, 0xF056C, 0x42B6A, 0xF0DA8, 0xF1D52, 0x23D24, 0xF1D24, 0x61A4C,  # 1921-1930
    0xF0A56, 0xF14AE, 0x5256C, 0xF16B4, 0xF0DA8, 0x31D92, 0xF0E92, 0x72D26, 0xF1526, 0xF0A56,  # 1931-1940
    0x614B6, 0xF155A, 0xF0AD4, 0x436AA, 0xF1748, 0xF1692, 0x23526, 0xF152A, 0x72A5A, 0xF0A6C,  # 1941-1950
    0xF155A, 0x52B54, 0xF0B64, 0xF1B4A, 0x33A94, 0xF1A94, 0x8152A, 0xF152E, 0xF0AAC, 0x6156A,  # 1951-1960
    0xF15AA, 0xF0DA4, 0x41D4A, 0xF1D4A, 0xF0C94, 0x3192E, 0xF1536, 0x72AB4, 0xF0AD4, 0xF16D2,  # 1961-1970
    0x52EA4, 0xF16A4, 0xF164A, 0x42C96, 0xF1496, 0x82956, 0xF055A, 0xF0ADA, 0x616D2, 0xF1B52,  # 1971-1980
    0xF1B24, 0x43A4A, 0xF1A4A, 0xA349A, 0xF14AC, 0xF056C, 0x60B6A, 0xF0DAA, 0xF1D92, 0x53D24,  # 1981-1990
    0xF1D24, 0xF1A4C, 0x314AC, 0xF14AE, 0x829AC, 0xF06B4, 0xF0DAA, 0x52D92, 0xF0E92, 0xF0D26,  # 1991-2000
    0x42A56, 0xF0A56, 0xF14B6, 0x22AB4, 0xF0AD4, 0x736AA, 0xF1748, 0xF1692, 0x53526, 0xF152A,  # 2001-2010
    0xF0A5A, 0x4155A, 0xF156A, 0x92B54, 0xF0BA4, 0xF1B4A, 0x63A94, 0xF1A94, 0xF192A, 0x42A5C,  # 2011-2020
    0xF0AAC, 0xF156A, 0x22B64, 0xF0DA4, 0x61D52, 0xF0E4A, 0xF0C96, 0x5192E, 0xF1956, 0xF0AB4,  # 2021-2030
    0x315AC, 0xF16D2, 0xB2EA4, 0xF16A4, 0xF164A, 0x63496, 0xF1496, 0xF0956, 0x50AB6, 0xF0B5A,  # 2031-2040
    0xF16D4, 0x236A4, 0xF1B24, 0x73A4A, 0xF1A4A, 0xF14AA, 0x5295A, 0xF096C, 0xF0B6A, 0x31B54,  # 2041-2050
    0xF1D92, 0x83D24, 0xF1D24, 0xF1A4C, 0x614AC, 0xF14AE, 0xF09AC, 0x40DAA, 0xF0EAA, 0xF0E92,  # 2051-2060
    0x31D26, 0xF0D26, 0x72A56, 0xF0A56, 0xF14B6, 0x52AB4, 0xF0AD4, 0xF16CA, 0x42E94, 0xF1694,  # 2061-2070
    0x8352A, 0xF152A, 0xF0A5A, 0x6155A, 0xF156A, 0xF0B54, 0x4174A, 0xF1B4A, 0xF1A94, 0x3392A,  # 2071-2080
    0xF192C, 0x7329C, 0xF0AAC, 0xF156A, 0x52B64, 0xF0DA4, 0xF1D4A, 0x41C94, 0xF0C96, 0x8192E,  # 2081-2090
    0xF0956, 0xF0AB6, 0x615AC, 0xF16D4, 0xF0EA4, 0x42E4A, 0xF164A, 0xF1516, 0x22936,           # 2090-2099
]

g_tiangan = '甲乙丙丁戊己庚辛壬癸'
g_dizhi = '子丑寅卯辰巳午未申酉戌亥'
g_months = ('正月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '臘月')
g_days = ('初一', '初二', '初三', '初四', '初五', '初六', '初七', '初八', '初九', '初十', '十一', '十二', '十三', '十四', '十五', '十六', '十七', '十八', '十九', '二十', '廿一', '廿二', '廿三', '廿四', '廿五', '廿六', '廿七', '廿八', '廿九', '三十')

import sys
import datetime
from datetime import timedelta

START_YEAR, END_YEAR = 1901, 1900 + len(g_lunar_month_days)
LUNAR_START_DATE, SOLAR_START_DATE = (1901, 1, 1), datetime.date(1901,2,19) # 1901年正月初一的公曆日期為1901/2/19
LUNAR_END_DATE, SOLAR_END_DATE = (2099, 12, 30), datetime.date(2100,2,18) # 2099年12月30的公曆日期是2100/2/8

def date_diff(tm):
    return (tm - SOLAR_START_DATE).days

def get_leap_month(lunar_year):
    return (g_lunar_month_days[lunar_year-START_YEAR] &gt;&gt; 16) &amp; 0x0F

def lunar_month_days(lunar_year, lunar_month):
    return 29 + ((g_lunar_month_days[lunar_year-START_YEAR] &gt;&gt; lunar_month) &amp; 0x01)

def lunar_year_days(year):
    days = 0
    months_day = g_lunar_month_days[year - START_YEAR] 
    for i in range(1, 13 if get_leap_month(year) == 0x0F else 14):
       day = 29 + ((months_day&gt;&gt;i)&amp;0x01)
       days += day
    return days

# 根據公曆計算農曆日期，返回(year,month,day,isLeap)
def get_lunar_date(tm):
    if (tm &lt; SOLAR_START_DATE or tm &gt; SOLAR_END_DATE):
        raise Exception('out of range')

    span_days = date_diff(tm)

    year, month, day = START_YEAR, 1, 1
    tmp = lunar_year_days(year)
    while span_days &gt;= tmp:
        span_days -= tmp
        year += 1
        tmp = lunar_year_days(year)

    leap = False
    tmp = lunar_month_days(year, month)
    while span_days &gt;= tmp:
        span_days -= tmp
        month += 1
        tmp = lunar_month_days(year, month)
    leap_month = get_leap_month(year)
    if  month &gt; leap_month:
        month -= 1
        if month == leap_month:
            leap = True

    day += span_days
    return (year, month, day, leap)

# 根據農曆計算公曆日期，返回一個數組[datetime1, datetime2]，如果為閏月，則可能包含兩個日期，否則只有一個
def get_solar_date(year, month, day):
    if not(START_YEAR&lt;=year&lt;=END_YEAR and 1&lt;=month&lt;=12 and 1&lt;=day&lt;=30):
        raise Exception('out of range')
    span_days = 0;
    for y in range(START_YEAR, year):
        span_days += lunar_year_days(y)
    leap_month = get_leap_month(year)
    for m in range(1, month + (month &gt; leap_month)):
        span_days += lunar_month_days(year, m)
    span_days += day - 1
    
    if leap_month == month:
        return [SOLAR_START_DATE + timedelta(span_days), SOLAR_START_DATE + timedelta(span_days + lunar_month_days(year, leap_month))]
    else:
        return [SOLAR_START_DATE + timedelta(span_days)]

# 加入閏月標示
def name_of_month(month, leap):
    if leap:
        return '閏%s' % g_months[month-1]
    return g_months[month-1]

def name_of_day(day):
    # 轉為國字日字串
    return g_days[day-1]

def name_of_year(year):
    if (year &lt; 1204 or year &gt; 2099):
        raise Exception('out of range')
    return '%s%s' % (g_tiangan[(year - 4) % 10], g_dizhi[(year - 4) % 12])

def get_lunar_date_name(lunar_date):
    year, month, day, leap = lunar_date
    return name_of_year(year), name_of_month(month, leap), name_of_day(day)

if __name__ == '__main__':
    # 以下用於驗算 1902-2099 轉換(適用農曆 1901 到 2099 轉換)
    for i in range(1902, 2101):
        月 = 1
        日 =  20
        print("國曆", i, "年", 月, "月", 日, "日為", get_lunar_date(datetime.date(i,月,日)))
        print(get_lunar_date_name(get_lunar_date(datetime.date(i,月,日))))
        (農曆年, 農曆月, 農曆日, 是否閏年) = get_lunar_date(datetime.date(i,月,日))
        print(get_solar_date(農曆年,農曆月,農曆日))
        print("-"*20)</pre>
<p> </p><h3>程式範例</h3>
<p><a href="http://www.blackglory.me/30-cases-of-the-python-algorithm/">http://www.blackglory.me/30-cases-of-the-python-algorithm/</a></p>
<p><a href="http://www.iteedu.com//plang/python/pythonc100/index.php">http://www.iteedu.com//plang/python/pythonc100/index.php</a></p>
<p><span>題目 1：有1、2、3、4個數字，能組成多少個互不相同且無重複數字的三位數？都是多少？</span></p>
<p><span>利用 C:</span></p>
<pre class="brush: cpp; fontsize: 100; first-line: 1; toolbar: false; ">main() { 
int i,j,k; 
printf("\n"); 
for(i=1;i&lt;5;i++) /*以下為三重循環*/
for(j=1;j&lt;5;j++) 
for (k=1;k&lt;5;k++) { 
if (i!=k&amp;&amp;i!=j&amp;&amp;j!=k) /*確保i、j、k三位互不相同*/
printf("%d,%d,%d\n",i,j,k); }} </pre>
<p>利用 Python:</p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">a=(1,2,3,4)
for b1 in a:
  for b2 in a:
    for b3 in a:
        if b1!=b2 and b2!=b3 and b1!=b3:
          print("%d%d%d" % (b1,b2,b3))</pre>
<p><span>題目 2：企業發放的獎金根據利潤提成。利潤(I)低於或等於10萬元時，獎金可提10%；利潤高</span><br><span>於10萬元，低於20萬元時，低於10萬元的部分按10%提成，高於10萬元的部分，可可提</span><br><span>成7.5%；20萬到40萬之間時，高於20萬元的部分，可提成5%；40萬到60萬之間時高於</span><br><span>40萬元的部分，可提成3%；60萬到100萬之間時，高於60萬元的部分，可提成1.5%，高於</span><br><span>100萬元時，超過100萬元的部分按1%提成，從鍵盤輸入當月利潤I，求應發放獎金總數？</span></p>
<p><span>利用 C:</span></p>
<pre class="brush: cpp; fontsize: 100; first-line: 1; toolbar: false; ">main() { 
long int i; 
int bonus1,bonus2,bonus4,bonus6,bonus10,bonus; 
scanf("%ld",&amp;i); 
bonus1=100000*0.1;bonus2=bonus1+100000*0.75; 
bonus4=bonus2+200000*0.5; 
bonus6=bonus4+200000*0.3; 
bonus10=bonus6+400000*0.15; 
if(i&lt;=100000) 
bonus=i*0.1; 
else if(i&lt;=200000) 
bonus=bonus1+(i-100000)*0.075; 
else if(i&lt;=400000) 
bonus=bonus2+(i-200000)*0.05; 
else if(i&lt;=600000) 
bonus=bonus4+(i-400000)*0.03; 
else if(i&lt;=1000000) 
bonus=bonus6+(i-600000)*0.015; 
else
bonus=bonus10+(i-1000000)*0.01; 
printf("bonus=%d",bonus); } </pre>
<p> </p>
<p><span>利用 Python:</span></p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">bonus1=100000*0.1
bonus2=bonus1+100000*0.75
bonus4=bonus2+200000*0.5
bonus6=bonus4+200000*0.3
bonus10=bonus6+400000*0.15
i=int(input())
if i&lt;=100000:
  bonus=i*0.1
elif i&lt;=200000:
  bonus=bonus1+(i-100000)*0.075
elif i&lt;=400000:
  bonus=bonus2+(i-200000)*0.05
elif i&lt;=600000:
  bonus=bonus4+(i-400000)*0.03
elif i&lt;=1000000:
  bonus=bonus6+(i-600000)*0.015
else:
  bonus=bonus10+(i-1000000)*0.01
print("bonus=%d" % bonus)</pre>
<p><span>題目 3：一個整數，它加上100後是一個完全平方數，再加上168又是一個完全平方數，請問該數是多少？</span></p>
<p><span>利用 C:</span></p>
<pre class="brush: cpp; fontsize: 100; first-line: 1; toolbar: false; ">#include "math.h" 
main() { 
long int i,x,y,z; 
for (i=1;i&lt;100000;i++) 
{ x=sqrt(i+100); /*x為加上100後開方後的結果*/
y=sqrt(i+268); /*y為再加上168後開方後的結果*/
if(x*x==i+100&amp;&amp;y*y==i+268)/*如果一個數的平方根的平方等於該數，這說明此數是完全平方數*/
printf("\n%ld\n",i); } } </pre>
<p> </p>
<p><span>利用 Python:</span></p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">from math import sqrt
i=1
while 1:
  a,b=i+100,i+268
  x,y=int(sqrt(a)),int(sqrt(b))
  if x**2==a and y**2==i+268:
    print("%ld" % i)
  i+=1</pre>
<p> </p>
<p><span>題目 4：輸入某年某月某日，判斷這一天是這一年的第幾天？</span></p>
<p><span>利用 C:</span></p>
<pre class="brush: cpp; fontsize: 100; first-line: 1; toolbar: false; ">main() { 
int day,month,year,sum,leap; 
printf("\nplease input year,month,day\n"); 
scanf("%d,%d,%d",&amp;year,&amp;month,&amp;day); 
switch(month)/*先計算某月以前月份的總天數*/
{ case 1:sum=0;break; 
case 2:sum=31;break; 
case 3:sum=59;break; 
case 4:sum=90;break; 
case 5:sum=120;break; 
case 6:sum=151;break; 
case 7:sum=181;break; 
case 8:sum=212;break; 
case 9:sum=243;break; 
case 10:sum=273;break; 
case 11:sum=304;break; 
case 12:sum=334;break; 
default:printf("data error");break; } 
sum=sum+day; /*再加上某天的天數*/
if(year%400==0||(year%4==0&amp;&amp;year%100!=0))/*判斷是不是閏年*/
leap=1; 
else
leap=0; 
if(leap==1&amp;&amp;month&gt;2)/*如果是閏年且月份大於2,總天數應該加一天*/
sum++; 
printf("It is the %dth day.",sum);} </pre>
<p>利用 Python, 使用 datetime 模組:</p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">import datetime
t=datetime.date(input("Year:"),input("Month:"),input("Day:"))
n=datetime.date(datetime.date.today().year,1,1)
print((t-n).days+1)</pre>
<p>利用 Python, 不使用模組:</p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">year,month,day=input("Year:"),input("Month:"),input("Day:")
d={1:0,2:31,3:59,4:90,5:120,6:151,7:181,8:212,9:243,10:273,11:304,12:334}
if not d.has_key(month):
  print("data error")
  exit()
sum=d[month]
sum+=day
if year%400==0 or (year%4==0 and year%100!=0):
  leap=1
else:
  leap=0
if leap==1 and month&gt;2:
  sum+=1
print("It is the %dth day." % sum)</pre>
<p> </p>
<p><span>題目 5：輸入三個整數x,y,z，請把這三個數由小到大輸出。</span></p>
<p><span>C 程式:</span></p>
<pre class="brush: cpp; fontsize: 100; first-line: 1; toolbar: false; ">main() { 
int x,y,z,t; 
scanf("%d%d%d",&amp;x,&amp;y,&amp;z); 
if (x&gt;y) 
{t=x;x=y;y=t;} /*交換x,y的值*/
if(x&gt;z) 
{t=z;z=x;x=t;}/*交換x,z的值*/
if(y&gt;z) 
{t=y;y=z;z=t;}/*交換z,y的值*/
printf("small to big: %d %d %d\n",x,y,z); } </pre>
<p>Python 程式:</p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">a=[input(),input(),input()]
a.sort()
print(a)</pre>
<p>第二種:</p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">x,y,z=input(),input(),input()
t=0
if x&gt;y:t=x;x=y;y=t
if x&gt;z:t=z;z=x;x=t
if y&gt;z:t=y;y=z;z=t
print("small to big: %d %d %d" % (x,y,z))</pre>
<p> </p>
<p><span>題目 6: 用*號輸出字母C的圖案。</span></p>
<p><span>C 程式:</span></p>
<pre class="brush: cpp; fontsize: 100; first-line: 1; toolbar: false; ">#include "stdio.h" 
main() { 
printf("Hello C-world!\n"); 
printf(" ****\n"); 
printf(" *\n"); 
printf(" * \n"); 
printf(" ****\n"); } </pre>
<p>Python 程式:</p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">print("*"*4)
print("*")
print("*")
print("*"*4)</pre>
<p> </p>
<p><span> </span></p><h2>Binary STL to ASCII STL</h2>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">import struct
normals = []
points = []
triangles = []
triangle_number = 0
def load_binary_stl(fp):
    '''
    二位元 STL 檔案格式如下:
    檔案標頭共有 80 個字元(bytes), 內容通常省略, 但是內容不可使用 solid, 以免與文字檔案 STL 混淆
    UINT8[80] – Header
    UINT32 – Number of triangles (I:佔 4 bytes 的 unsigned integer)
  
    foreach triangle
    REAL32[3] – Normal vector (f:每一座標分量為一佔 4 bytes 的 float, 共佔 12 bytes)
    REAL32[3] – Vertex 1
    REAL32[3] – Vertex 2
    REAL32[3] – Vertex 3
    UINT16 – Attribute byte count (H:兩個 bytes 的 unsigned short, 表示 attribute byte count)
    end
  
    '''
    # 已經在外部開檔
    #fp=open(filename,'rb')
    header=fp.read(80)
    triangle_number = struct.unpack('I',fp.read(4))[0]
    #print(triangle_number)
    count=0
    while True:
        try:
            p=fp.read(12)
            if len(p)==12:
                n=[struct.unpack('f',p[0:4])[0],struct.unpack('f',p[4:8])[0],struct.unpack('f',p[8:12])[0]]
                normals.append(n)
                l = len(points)
                #print(n)
            p=fp.read(12)
            if len(p)==12:
                p1=[struct.unpack('f',p[0:4])[0],struct.unpack('f',p[4:8])[0],struct.unpack('f',p[8:12])[0]]
                points.append(p1)
                #print(p1)
            p=fp.read(12)
            if len(p)==12:
                p2=[struct.unpack('f',p[0:4])[0],struct.unpack('f',p[4:8])[0],struct.unpack('f',p[8:12])[0]]
                points.append(p2)
            p=fp.read(12)
            if len(p)==12:
                p3=[struct.unpack('f',p[0:4])[0],struct.unpack('f',p[4:8])[0],struct.unpack('f',p[8:12])[0]]
                points.append(p3)
                triangles.append((l, l+1, l+2))
            # 使用 count 來計算三角形平面個數
            # triangle_number 為 STL 檔案中的三角形個數
            count += 1
            #print(count)
            # 在前面 12*4 個 bytes 的 normal 與三個點資料後, 為
            # 一個 2 bytes 長的 unsigned short, 其值為零, 為 attribute
            fp.read(2)
            # 讀完所有三角平面後, 即跳出 while
            if count &gt; triangle_number:
                break
        except EOFError:
            break
    #fp.close()
def read_length(f):
    length = struct.unpack("@i", f.read(4))
    return length[0]
def read_header(f):
    f.seek(f.tell()+80)
def write_as_ascii(outfilename):
    f = open(outfilename, "w")
    f.write ("solid "+outfilename+"\n")
    for n  in range(len(triangles)):
        f.write ("facet normal {} {} {}\n".format(normals[n][0],normals[n][1],normals[n][2]))
        f.write ("outer loop\n")
        f.write ("vertex {} {} {}\n".format(points[triangles[n][0]][0],points[triangles[n][0]][1],points[triangles[n][0]][2]))
        f.write ("vertex {} {} {}\n".format(points[triangles[n][1]][0],points[triangles[n][1]][1],points[triangles[n][1]][2]))
        f.write ("vertex {} {} {}\n".format(points[triangles[n][2]][0],points[triangles[n][2]][1],points[triangles[n][2]][2]))
        f.write ("endloop\n")
        f.write ("endfacet\n")
    f.write ("endsolid "+outfilename+"\n")
    f.close()
def main():
    infilename = "ss1.stl"
    outfilename = "ss2.stl"
    try:
        f = open(infilename, "rb")
        #read_header(f)
        #l = read_length(f)
        try:
            load_binary_stl(f)
            l = len(normals)
        except Exception as e:
            print("Exception",e)
        print(len(normals), len(points), len(triangles), l)
        write_as_ascii(outfilename)
        print("done")
    except Exception as e:
        print(e)
if __name__ == '__main__':
    main()</pre>
<p> </p><h2>寄信程式</h2>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">import smtplib
from email.mime.text import MIMEText  
from email.header import Header

# 利用 gmail smtp 功能寄信
server = smtplib.SMTP('smtp.gmail.com:587')
 
server.ehlo()
server.starttls()
server.login('your_email_address', 'your_gmail_password')

# read lines from file
lines = open("your_bulk_user_data.txt", "r", encoding="utf-8").read().splitlines()

mail_content = '''這是信件內文
'''
for i in range(len(lines)):
    # lines[i] 為學號
    receiver_email = lines[i]+"@your_email_domain"
    #receiver_email = lines[i]
    print(receiver_email)
    message= MIMEText(mail_content,'plain','UTF-8')
    #message= MIMEText('信件內文&lt;br /&gt;&lt;a href="http://www.google.com"&gt;google&lt;/a&gt;','html','UTF-8')
    message['Subject'] = Header("信件標題", 'UTF-8') 
    server.sendmail("寄件電子郵箱", receiver_email, message.as_string())
server.quit()
# 若設定　server.set_debuglevel(10), 則可以利用 prin(server.quit()) 印出詳細的協定溝通過程.
</pre>
<p> </p><h2>Function Annotations</h2>
<p><a href="http://legacy.python.org/dev/peps/pep-3107/">http://legacy.python.org/dev/peps/pep-3107/</a></p>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">def py_op(left: int, right: int, f) -&gt; int:
    return f(left, right)

def greet(name: str, age: int) -&gt; str:
    print('Hello {0}, you are {1} years old'.format(name, age))

print(py_op(4, 5.2, lambda x, y: x+y))
greet("Bighead", 3)</pre>
<p> </p><h2>數列與 Json</h2>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; "># 將數列寫入檔案:

writefile = open(data_dir+"/filelist.txt", "w", encoding="utf-8")
writefile.write(json.dumps(mylist))
 
# 從檔案取出數列:

with open(data_dir+"/filelist.txt", encoding="utf-8") as json_file:
    mylist = json.load(json_file)</pre>
<p> </p><h2>如何像電腦科學家一樣思考</h2>
<p><a href="download/?filepath=/var/lib/openshift/5364a49c5973ca5ea9000882/app-root/data//downloads/thinkcs_cn_ed1.pdf">第一版簡體中文  pdf</a></p>
<p><a href="download/?filepath=/var/lib/openshift/5364a49c5973ca5ea9000882/app-root/data//downloads/thinkpython_en_3.2.pdf">python 3.2 英文版 pdf</a></p>
<p><a href="download/?filepath=/var/lib/openshift/5364a49c5973ca5ea9000882/app-root/data//downloads/dive_into_python3_cn.pdf">深入 Python3 簡體中文版 pdf</a></p>
<p>參考資料</p>
<p><a href="https://github.com/JustinSDK/PyConTW2013Tutorial">https://github.com/JustinSDK/PyConTW2013Tutorial</a></p>
<p>大家的電腦程式語言: <a href="https://www.python.org/doc/essays/cp4e/">https://www.python.org/doc/essays/cp4e/</a></p>
<p><a href="download/?filepath=/var/lib/openshift/5364a49c5973ca5ea9000882/app-root/data//downloads/webbased_IDE.pdf">Web-based IDE pdf</a></p><h3>前言</h3>
<p>作者是 自由軟體鑄造場 張凱慶/翻譯 徐孟逵/校訂</p>
<p><br><a href="http://www.openbookproject.net/thinkcs/python/english2e/">§原文位址§</a> (python 2) 第一版應該在 2000 年初前後推出</p>
<p><a href="http://openbookproject.net/thinkcs/python/english3e/">Thinkcs_Python3</a></p>
<p>◎ 前言</p>
<p>David Beazley 著</p>
<p>作為教育家、研究者及書籍作者，我很高興看到這本書的完成。Python 是個有趣並且非常易用的程式語言，在過去幾年裡，Python 逐漸地受到歡迎。Guido van Rossum 在十多年前開發了 Python，其簡單的語法與整體感覺則是得自於 ABC，這個 1980 年代發展的教學語言。然而，Python 也被設計成可以解決真實的問題，並且也從其他程式語言如 C++、Java、Modula-3 和 Scheme 等，借用了各式各樣的特徵。正因如此，Python 最顯而易見的特色之一就是它廣泛吸引了專業軟體開發者、科學工作者、研究者、藝術家及教育家。 雖然 Python 吸引了不同社群的人士，你可能還是會懷疑：為何選用 Python？或者為甚麼教導用 Python 撰寫程式？ 回答這些問題可不簡單－特別是當大眾的意見都站在，如 C++ 和 Java 這些自討苦吃的選擇這一邊的時候。然而，我想最直接的答案就是用 Python 寫程式可以單純地得到許多樂趣，並且更有生產力。</p>
<p>當我教授電腦科學課程時，我希望教學題材涵蓋重要概念，又能對學生來說有趣且迷人。可惜的是，程式設計入門課程目前傾向投注過多焦點在數學抽象概念上，且讓學生因惱人問題而沮喪，如語法、編譯以及看起來晦澀難解的規則等低階細節。儘管這些抽象及形式，對專業軟體工程師和計畫繼續學習電腦科學的學生來說非常重要，但在一個入門性的課程採取這種方式，大部分只會使電腦科學更無趣。教課的時候，我可不想面對一整間無精打采的學生。我寧願看到他們透過探索不同的想法，採取有創意的方式，打破成規並從錯誤中學習，以嘗試解決有趣的問題。這麼做的原因是，我不想浪費半個學期試著釐清含糊的語法問題、難以理解的編譯器錯誤訊息，或是一個程式可能造成一般性保護錯誤的數百種方式。</p>
<p>我喜歡 Python 的原因之一，就是它在實做與概念上取得了很好的平衡。既然 Python 是直譯的，初學者幾乎可以立刻學會這個語言，並做些美妙的事，而不會迷失在編譯與連結的問題中。更有甚者，Python 隨附大型的模組庫，能夠應用在各種工作上，包括網路程式設計到圖形處理等。具有如此實用的重點是吸引學生注意力的絕佳方式，並且能讓他們完成重要的專案。然而，Python 也可以作為介紹重要電腦科學概念的優良基礎。由於 Python 完整支援程序和類別，便可逐步引導學生認識程序抽象化、資料結構，以及物件導向程式設計等課題，這些全都可以應用在往後 Java 或 C++ 的課程上。Python 還向函數型程式語言借了許多功能，可以用來介紹這些以往是在 Scheme 及 Lisp 的課堂上詳細介紹的概念。</p>
<p>讀了 Jeffrey 的序文，我被他的評論所感動，Python 使他看見更高層次的成就以及較低層次的挫折，而他可以工作得更快且獲得較佳結果。儘管這些評論是指他的入門課程，我有時會以同樣的理由，將 Python 應用在芝加哥大學的進階研究所電腦科學課程。在這些課程裡，我不斷地面對將大量困難的課程資料，包含在極短的九星期學季中這種讓人氣餒的工作。雖然我必定可以承受使用像 C++ 這種語言所帶來的大量痛苦及折磨，我常常發現這種方式有著不良的後果，特別是這些課程的主題不只是關於程式設計時。我發現使用 Python 讓我能夠較為集中在實際的主題上，同時也使學生能夠完成重要的課程作業。</p>
<p>雖然 Python 仍是年輕、發展中的語言，我相信它在教育上會有耀眼的未來。這本書在這方向上是重要的一步。</p>
<p>(David Beazley，芝加哥大學，Python Essential Reference 作者)</p>
<p><br>◎ 序言</p>
<p>Jeffrey Elkner 著</p>
<p>本書的存在歸功於網路及自由軟體運動所實現的合作方式。它的三位作者－一位大學教授、一位高中老師，以及一位專業程式設計師－尚未見過面，但是我們已經能夠緊密合作，並且受到許多願意付出時間與心力的傑出人士幫助，使得這本書更臻完善。</p>
<p>我們認為本書證明了此種合作方式的優點以及未來的可能性，而這樣的合作架構已經由 Richard Stallman 和自由軟體基金會運作多年。</p>
<p>◎ 我如何及為甚麼使用 Python</p>
<p>1999 年，大學委員會的「先修大學電腦科學課程」（Advanced Placement Computer Science）考試，第一次用 C++。和全國各地的許多高中一樣，維吉尼亞州阿靈頓郡約克敦高中的電腦科學課程也直接受到變更語言的決定影響，我就在此所高中任教。在此之前，Pascal 是我們一年級及先修課程的教學語言。為了和過去讓學生有兩年的時間接觸相同語言的作法一樣，我們決定在 1997 到1998 學年的一年級課程改用 C++ 教學，如此我們便能銜接大學委員會對下年度先修電腦科學課程的改變。</p>
<p>兩年後，我確信使用 C++ 為學生介紹電腦科學，不是個適當的選擇。雖然它的確是個非常強大的程式語言，但它也是個極度難以學習與教導的語言。我發現我自己不斷地對抗 C++ 困難的語法以及處理相同事務的多重方式，結果讓我無謂地失去了許多學生。我確信一定會有更適合一年級課程的語言，於是開始尋找一個可以替代 C++ 的選擇。</p>
<p>我需要一個能夠運作在我們 GNU/Linux 實驗室語言，但同時也要能夠運作在大部分學生家裡的 Windows 及 Macintosh 平台。我希望它是個自由軟體，好讓學生不管收入多少，都能夠在家使用。我想要一個專業程式設計師使用的語言，並且有個活躍的開發社群。它必須同時支援程序式及物件導向程式設計。最重要的是，它必須容易學習和教授。當我以這些條件研究過許多選擇後，Python 脫穎而出成為此項工作的最佳候選人。</p>
<p>我請一位聰明的約克敦高中學生，Matt Ahrens，嘗試使用 Python。他不但在兩個月內學會這個語言，而且寫了一個叫做 pyTicket 的應用程式，讓我們的人員可以透過網路回報技術問題。我知道 Matt 無法在這麼短的時間用 C++ 完成如此規模的應用程式，這項成就和 Matt 對 Python 的正面評價，顯示 Python 是我所尋找的解決方案。</p>
<p>◎ 尋找教科書</p>
<p>我決定在下年度的兩個電腦科學概論課程都使用 Python 後 ，最迫切的問題是缺少一本可用的教科書。</p>
<p>自由文件解決了這個問題。Richard Stallman 在今年稍早向我介紹了 Allen Downey 這個人。我們兩個都寫信向 Richard 表達發展自由教育資料的興趣。Allen 已經寫了本一年級電腦科學的教科書, 如何像電腦科學家一樣思考。當我讀了這本書，我立即知道我想將它應用在我的課程中。它是我見過最清楚且最有幫助的電腦科學教科書。它突顯出在寫程式時的思考過程，而非特定語言的功能。閱讀它使我馬上變成了更好的老師。</p>
<p>如何像電腦科學家一樣思考不只是一本出色的書，並且它是以 GNU 公眾授權發佈，這就是說它可以自由使用，並可依使用者需要修改。一旦我決定使用 Python 後，我想到我可以轉換 Allen 這本書的原始 Java 版本到新的語言。也許我本來無法自己撰寫一本教科書，但從 Allen 的書改寫使我可以達成這個工作，這同時也證明了在軟體上運作良好的協力發展模式，也可以使用在教學資料上。</p>
<p>過去兩年來編寫這本書對學生及我都受益匪淺，而我的學生在此過程中扮演了一個重要的角色。既然我夠在有人發現拼寫錯誤或是閱讀困難的章節時立即修正，因此我在課文因他們的建議而修正時，為他們加分，以鼓勵他們尋找本書的錯誤。這麼做有著雙重的好處，一是鼓勵他們更加小心地閱讀課文，另一個好處則是讓課文由它最重要的評論者－使用它學習電腦科學的學生－徹底審查。</p>
<p>針對本書後半部關於物件導向程式設計的部分，我知道我需要一個比我更有實際程設經驗的人來使它更為正確。本書在大部分時間處於未完成的狀態，直到開放源碼社群再次提供完成它所需要的工具。</p>
<p>我收到一封 Chris Meyers 寄來的電子郵件，表達他對本書的興趣。Chris 是一位專業程式設計師，他去年在奧勒崗州尤金市的 Lane 社區大學開始使用 Python 教授程式設計課程。教授這門課程讓 Chris 找到這本書，而且他立即開始幫忙本書的編撰。在學年結束前，他在我們的網站 http://openbookproject.net 設置了一個指南手冊計畫 ，叫做 Python for Fun (http://www.openbookproject.net/py4fun/)，他並擔任指導教師，與我最頂尖的學生一起合作，帶領他們進入超出我能力之外的領域。</p>
<p>◎ 用 Python 介紹程式設計</p>
<p>過去的兩年裡，轉換及使用如何像電腦科學家一樣思考的過程已經證實 Python 適於教導初學的學生。Python 極其簡化程式設計範例，並且讓重要的程式設計觀念較容易教授。</p>
<p>課文中的第一個範例說明了這一點。傳統的 Hello, world 程式，在本書的 C++ 版本看來如下：</p>
<p><br>#include</p>
<p>void main()<br>{<br>cout &lt;&lt; "Hello, world." &lt;&lt; endl;<br>}</p>
<p>在 Python 版本中，它變成了：</p>
<p><br>print "Hello, World!"</p>
<p>雖然這是個平凡的例子，Python 的優點脫穎而出。約克敦高中的「電腦科學第一級」沒有先修課程，所以許多看到此例的學生是第一次看到一個程式。他們之中有些人聽說電腦程式設計難以學習後，無疑地有一點緊張。本書的 C++ 版本總是強迫我在兩個令人不滿意的選項中選擇：不是冒著一開始就使某些學生感到困惑或恐懼的風險，解釋 #include、void main()、{ 和 } 陳述，就是頂著相同的風險告訴他們現在不必擔心這些東西，我們稍後會再講到這些陳述。課程此時的教學目標是介紹學生程式設計陳述的概念，並讓他們撰寫第一個程式，從而介紹程式設計環境。Python 程式正好擁有進行這些事所需的所有條件，既不多也不少。</p>
<p>比較本書不同版本對此程式的解釋文字，更進一步說明了這對初學的學生有什麼樣的意義。C++ 版本對於 Hello, world! 有著十三段的解釋文字；在 Python 版本中只有兩段。最重要的是，缺少的那十一段文字並非講述電腦程式設計中的重要觀念，而是述說 C++ 語法的瑣碎細節。我發現整本書都發生同樣的事情。Python 更清楚的語法使整個段落顯得不必要，而直接消失在 Python 版本的課文中。</p>
<p>使用像 Python 這種非常高階的語言，讓教師得以延後談論關於機器的低階細節，直到學生擁有所需的背景知識，以進一步理解這些細節。它因此使教學能夠先解決重要的事。關於這點的絕佳範例之一便是 Python 處理變數的方式。在 C++ 中，變數是一個用來容納東西的位置的名稱。變數至少有部份必須宣告型態，因為必須先決定它們所指涉之位置的大小。如此一來，變數的概念就與機器硬體緊密結合在一起。變數強大且基礎的概念對初學的學生來說，已經十分困難（同時就電腦科學及代數兩個層面來看）。位元組及位址對問題沒有幫助。在 Python 中，變數是指涉某個東西的名字。這對初學的學生來說，是個更為直覺的概念，並且也更為接近他們在數學課中學到的變數定義。今年我教導變數比過去少了很多困難，而且我花費較少的時間指導使用它們有問題的學生。</p>
<p>Python 有助於教導和學習程式設計的另一個範例是它的函數語法。我的學生對理解函數總是有著極大的困難。主要問題集中在函數定義和函數呼叫間的差別，以及與其相關的參數和引數的區別上。Python 以十分美麗的語法解決了這個問題。函數定義由關鍵字 def 開始，所以我只要告訴我的學生：當你定義一個函數，由 def 開始，後面加上你所定義函數的名稱；當你呼叫函數時，只要呼叫（輸入）它的名稱即可。參數和定義一起使用；引數則與呼叫一起使用。沒有傳回型態、參數型態，或是參考及數值參數干擾，所以現在我可以用比之前少一半的時間教導函數，學生也理解得更好。</p>
<p>使用 Python 改善了我們的電腦科學課程對所有學生的成效。與我教授 C++ 的兩年相較，我發現平均成功標準提高了，同時也降低了挫敗的程度。我前進得更快，並且能得到更好的成果。有更多的學生結束這門課程時，能夠設計有意義的程式，並且對這門課所產生的程式設計經驗帶著正面的看法。</p>
<p>◎ 建立社群</p>
<p>我收到全球使用這本書學習或教導程式語言的人寄來的電子郵件。一個使用者社群已經開始興起，而且有許多人寄來可應用在附屬網站 http://openbookproject.net/pyBiblio 的資料，為這個計畫做出貢獻。</p>
<p>隨著 Python 的持續發展，我預期這個使用者社群會持續並加速成長。這個使用者社群的出現，及它對類似的教育者合作計畫所提出的可能性，對我來說是執行這個計畫最令人興奮的部份。藉由共同工作，我們能夠增進可用資料的品質，並節省寶貴的時間。我邀請你參加我們的社群並期待你的來信。來信請寄至 jeff@elkner.net 。</p>
<p>(Jeffrey Elkner 約克敦高中 阿靈頓郡，維吉尼亞州)</p>
<h3>程式之道</h3>
<div class="rt-articleinfo"><span class="rt-date-posted">建立日期 2008-05-12 08:15      最近更新在 2011-10-12 11:10</span><span class="rt-author">作者是 自由軟體鑄造場 張凱慶/翻譯 徐孟逵/校訂</span></div>
<p><strong><strong>§原文位址§ <a href="http://www.openbookproject.net/thinkcs/python/english2e/">http://www.openbookproject.net/thinkcs/python/english2e/</a></strong></strong></p>
<p>這本書的目標是要教你像電腦科學家一樣思考。這樣的思考方式結合數學、工程學及自然科學一些最優良的特色。電腦科學家像數學家，使用形式語言表達概念（特別是在計算方面）。他們也像工程師般設計東西，組合原件成系統，然後從中評估成本效益。他們還像自然科學家一樣，觀察複雜系統的變化，提出假說，並且測試所預期的結果。<br><br>電腦科學家最重要的一項能力就是<strong>解決問題</strong>。解決問題的意思是指能夠系統式地闡述問題，思考解決方法時別具創意，並且清楚正確地表達解決方法。結果證明，學習程式設計的過程是個練習問題解決技巧的絕佳機會。這也是為甚麼這一章叫做：程式之道。<br><br>從一方面來說，你將學會設計程式這個有用的技巧。對另一方面而言，你將利用程式設計作為工具，達成目標。隨著我們的教學，這目標會越來越清楚。</p>
<p><span><strong>1.1 Python 程式語言</strong></span><br><br>你將學習程式語言是 Python。Python 是<strong>高階語言</strong>的一種，你可能聽過的其他高階語言有 C++、PHP及Java。<br><br>你可以從高階語言這個名字猜測到，也有所謂的<strong>低階語言</strong>，有時也稱為機器語言或是組合語言。廣義來說，電腦只能執行用低階語言寫的程式。因此，用高階語言寫的程式在執行前必須先經過處理。這種額外的處理需要一些時間，這是高階語言的一個小缺點。<br><br>但其優點為數眾多。首先，用高階語言撰寫程式更容易。撰寫高階語言程式所需的時間更少，程式更短也更容易閱讀，而且正確性更高。其次，高階語言是可移植的，這表示它可以在經過些許修改後，運作在其他電腦架構上，有時甚至完全不需修改。低階語言程式只能運作在特定種類的電腦上，並且必須重寫，才能在其他的電腦上執行。<br><br>由於這些優點，幾乎所有的程式都是由高階語言來寫的。低階語言只用在一些專業應用程式上。<br><br>有兩種程式可以讓高階語言轉換成低階語言的，分別是<strong>直譯器</strong>和<strong>編譯器</strong>。直譯器讀取高階語言程式並執行它，這意味著直譯器直接執行程式的指示。它一次處理一點程序，交錯地讀取程式碼和執行計算。</p>
<p><img src="http://www.openfoundry.org/images/080512/interpret.png" alt="" width="264" height="62" border="0" hspace="5" vspace="5"><br><br>編譯器則在程式開始執行前讀取程式並將其完全翻譯。在這種情況下，高階語言程式稱為<strong>原始碼</strong>，編譯後的程式則叫做<strong>目標碼</strong>或是<strong>執行檔</strong>。一旦程式編譯完成，你可以重複地執行，而不需進一步翻譯。</p>
<p><img src="http://www.openfoundry.org/images/080512/compile.png" alt="" width="386" height="62" align="absBottom" border="0" hspace="5" vspace="5"><br><br>許多現代的語言同時使用兩種程序。它們先編譯到一種稱為<strong>位元碼</strong>的較低階語言，然後使用一個稱為<strong>虛擬機器</strong>的程式直譯。Python 同時使用兩種程序，但因其與程式設計師互動的方式，它通常被認為是一種直譯式許言。<br><br>有兩種方式使用 Python 直譯器：<em>shell 模式及腳本模式</em>。在 shell 模式下，你將 Python 陳述輸入<strong>Python shell</strong> 中，直譯器會立刻印出結果來：<br><br><br>$ python<br>Python 2.5.1 (r251:54863, May  2 2007, 16:56:35) <br>[GCC 4.1.2 (Ubuntu 4.1.2-0ubuntu4)] on linux2<br>Type "help", "copyright", "credits" or "license" for more information.<br>&gt;&gt;&gt; print 1 + 1<br>2<br><br>這個例子的第一行，是在 Unix 命令提示符下啟動 Python 直譯器的命令。下三行是直譯器提供的訊息。第四行以 &gt;&gt;&gt; 起始，這是<strong>Python 提示符</strong>。直譯器使用這個指示符表示它已準備好接受指示。我們輸入 print 1+1，直譯器回應結果為 2。<br><br>另外，你也可以將程式寫入一個檔案中，然後利用直譯器執行檔案內容。這樣的檔案就叫做<strong>腳本</strong>。例如，我們使用文字編輯器建立一個名為 firstprogram.py 檔案，並包含下列內容：<br><br><br>print 1 + 1<br><br>傳統上，包含 Python 程式的檔案有著以 .py 結尾的名稱。<br><br>要執行這個程式，我們必須要告訴直譯器腳本的名稱：<br><br><br>$ python firstprogram.py<br>2<br><br>這些例子說明 Python 運作在 Unix 命令列的情形。在其他程式開發環境中，程式執行的細節可能會不一樣。另外，大多數的程式比這個例子有趣許多。<br><br>本書範例同時使用 Python 直譯器和腳本。你將可以分辨該使用哪一種方式，因為 shell 模式範例永遠以 Python 提示符起始。<br><br>在 shell 模式中工作可以方便測試簡短的程式碼，因為你可以獲得立即回饋。請將它想成用來幫你找出問題答案的便條紙。任何長於數行的程式都應該放到腳本中。</p>
<p><br><span><strong>1.2 程式是什麼？</strong></span><br><br><strong>程式</strong>是一連串具體說明如何計算的指令。這種計算可能是數學的，像是找到方程組的解或是多項式的根，也可能是一種象徵性的計算，就像在文件中搜尋並取代文字，或（說來也奇怪）編譯一個程式。<br><br>不同程式語言的詳細情況看起來都不一樣，但有一些基本的指令，幾乎在每種程式語言中都可以發現：<br><br>輸入：<br>從鍵盤、檔案或是其他裝置取得資料；<br>輸出：<br>在螢幕上顯示資料，或著是將資料傳送到檔案或是其他裝置；<br>數學：<br>執行基本的數學運算，如加法和乘法；<br>條件執行：<br>檢查特定條件，並執行適當的陳述序列；<br>重複：<br>反覆執行某些動作，通常會有些變化。<br><br>不管你相信與否，就是這麼多了。你曾使用過的每個程式，不論有多複雜，都由或多或少類似的指令組成。因此，我們可以把程式設計當成是一種拆解的過程，將大型、複雜的任務，逐步分離成愈來愈小的子任務，直到這些子任務簡單到能使用這些基本指令執行為止。<br><br>這可能聽起來有點糊，當我們稍後討論到<strong>演算法</strong>時會再回到這個主題。</p>
<p><br><span><strong>1.3 除蟲是什麼？</strong></span><br><br>程式設計是一個複雜的過程，而且因為是由人類完成，所以常導致錯誤。為了一些奇怪的理由，程式設計的錯誤稱為<strong>蟲</strong>，而追蹤這些蟲，並修正的過程稱為<strong>除蟲</strong>。<br><br>程式裡有三類可能發生的錯誤：句型錯誤、執行錯誤以及語意錯誤。為了更快速地追蹤它們，清楚分辨這三種錯誤是很有用的。</p>
<p><br><span><strong>1.4 語法錯誤（Syntax errors）</strong></span><br><br>Python 只能夠執行語法正確的程式，否則程式就會執行失敗，並傳回錯誤訊息。<strong>語法</strong>就是指程式的結構，以及結構的規則。舉例來說，在英文中，句子一定是以大寫字母起始，並以句點為結束。下列例句就犯了英文的<strong>語法錯誤</strong>：「this sentence contains a syntax error.」。此句亦有語法錯誤，「So does this one」。<br><br>對大多數讀者來說，一些語法錯誤並不是個嚴重問題，這是為甚麼我們讀康明思（e. e. cummings）的詩卻不會吐出錯誤訊息。Python 則沒有這麼寬容。如果程式中任何地方有一個語法錯誤，Python 會印出錯誤訊息並結束程式。你將無法執行你的程式。在你程設生涯中最初的幾個星期，你大概會花很多時間追蹤語法錯誤。然而，當你的經驗增長，你將犯較少錯，並能更快地找到錯誤。</p>
<p><br><span><strong>1.5 執行錯誤（Runtime errors）</strong></span><br><br>第二種類型的錯誤叫做執行錯誤，會這麼命名是因為這種錯誤直到執行的時候才會出現。這種錯誤也稱為<strong>異常</strong>，因為它們通常表示某種異常（而且不好的）事情發生。<br><br>執行錯誤很少發生在頭幾章簡單的程式裡，所以你可能要等好一會才會遇到。</p>
<p><br><span><strong>1.6 語意錯誤（Semantic errors）</strong></span><br><br>第三種類型錯誤叫做<strong>語意錯誤</strong>。如果有語意錯誤在你的程式裡，程式仍會順利的執行，因此電腦不會產生任何的錯誤訊息，但是程式不會做正確的事情。程式還是會執行另一些事情，特別是你叫程式執行的事。<br><br>問題是你寫的程式並非是你想要寫的程式。程式的意義（它的語意）是錯的。判定語意錯誤可能是困難的，因為需要你檢視程式的輸出，並嘗試找出程式正在執行的事，以回溯你的工作。</p>
<p><br><span><strong>1.7 實驗性除蟲</strong></span><br><br>除蟲是你會獲得的重要技術之一。雖然除蟲工作可能令人沮喪，它卻是程式設計中最富機智、最具挑戰性以及最有趣的部份。<br><br>在某些方面，除蟲就像偵探工作一樣。你要依據得到的線索，推論出會導致所見結果的程序與情況。<br><br>除蟲也像是實驗科學。一旦你知道什麼出錯了，你修改你的程式並且再測試一次。如果你的假說是對的，你就可以預期修改的結果，並能更接近可以運作的程式。但如果你的假說是錯的，你就必須想出一個新的假說。就像夏洛克．福爾摩斯指出的：當你排除不可能的，剩下的即使不太可能，那也必定是真相。（柯南．道爾，<em>四個人的簽名</em>）<br><br>對有些人來說，程式設計與除蟲是同一件事。也就是說，程式設計就是逐步除蟲的過程，直到程式執行你想要的事。這個概念是說，你應該以一個可執行<em>某件事</em>的程式開始，然後在除蟲的過程中進行些微修改，好讓你永遠有個可運作的程式。<br><br>舉例來說，Linux 是個包含著數千行程式碼的作業系統，但是它最初只是個 Linus Torvalds 用來探索 Intel 80386 晶片的簡單程式。依據 Larry Greenfield 所說，Linus 早期的計畫是個將螢幕印出的 AAAA 變成 BBBB 的程式。這個程式稍後演變成為 Linux。（<em>The Linux Users' Guide Beta Version 1</em>）<br><br>往後的章節會提供更多除蟲及其他程設實務的建議。</p>
<p><br><span><strong>1.8 形式語言及自然語言</strong></span><br><br><strong>自然語言</strong>是人們所講的語言，如英語、西班牙語和法語。它們並非是由人所設計的（雖然人們嘗試將某種規則套用在它們上面），而是自然演變而成。<br><strong><br>形式語言</strong>是人們為特定應用所設計的語言。舉例來說，數學家所使用的標記法就是一種形式語言，這種語言特別適合表示數字與符號間的關係。化學家也使用一種形式語言表現分子的化學結構。最重要的是：<br><br><em>程式語言是設計來呈現計算的形式語言。</em><br><br>形式語言對於語法有嚴格的規則。例如，3+3=6 是一個語法正確的數學陳述，但 3=+6$ 不是。H2O 是語意正確的化學名稱，而 2Zz 則否。<br><br>語法規則分為兩種，分別屬於 <strong>標記</strong>與結構。標記是程式語言的基本元件，就像字詞、數字和化學元素等。3=+6$ 的問題之一是 $ 並非數學的正確標記（至少就我們所知道的來說）。同樣的，2Zz 也不正確，因為沒有一種元素的縮寫是Zz。<br><br>第二種語法規則屬於陳述的結構---也就是說，標記的排列方法。3=+6$ 這個陳述的結構不正確，因為等號不能馬上接加號。同樣的，分子式的下標必須在元素名稱的後方，而非前方。<br><br>當你閱讀英文句子或是形式語言的陳述，你必須去理解句子的結構是什麼（雖然在自然語言裡，你會下意識地理解）。這種過程稱為<strong>分析</strong>。<br><br>舉例來說，當你聽到 The other shoe fell 這個句子，你就能暸解 the other shoe 是主詞， 而 fell 是動詞。一旦你分析了一個句子，你可以理解它的意義是什麼，或說是這個句子的語意。假設你知道「shoe」是指什麼以及「fall」的意義，你就能瞭解這個句子大致上的含意。<br><br>雖然形式語言和自然語言有許多相同特徵標記、結構、語法和語意它們依然有許多相異之處：<br><br>歧義性：<br>自然語言充滿著歧義，人們總是利用上下文的線索和其他資訊來理解。形式語言設計成近乎完全或是完全消除歧義性，這就是說不管上下文的內容為何，每個陳述都正好只有一個意義。<br>冗贅性：<br>為了彌補歧義以及減少誤解，自然語言使用了大量贅詞。結果使得自然語言往往非常冗長。形式語言則有較少贅詞，並且更簡潔。<br>字面性：<br>自然語言充滿成語和隱喻。如果有人說，The other shoe fell，則可能沒有鞋子也沒有任何東西掉落。形式語言的字義則精確地相符。<br><br>在成長時使用自然語言的的人們---也就是說，每個人---常在適應形式語言時遭遇困難。在某些方面，形式語言和自然語言間的差別就像詩及散文，更進一步來說：<br><br>詩歌：<br>文字使用音義並重，整首詩合起來產生一種意義或著是情緒呼應 。歧義性不僅普遍，而且常是刻意營造。<br>散文：<br>字面意義較為重要，但是文章結構提供了更多含意。散文比詩歌更容易解析，但仍常有歧義。<br>程式：<br>電腦程式不會有歧義，可以照字面了解，並且能夠經由分析標記與結構而完全理解。<br><br>以下是閱讀程式（及其他形式語言）的建議。首先，記得形式語言的結構比自然語言更為緊密，因此需花較多時間閱讀。另外，結構是非常重要的，所以從頭讀到尾，從左讀到右不見得是個好方法。相反地，你要學著在心裡分析程式，也就是辨認標記並且轉譯結構。最後，細節是非常重要的。像是拼寫或標點錯誤這種小事，在你使用自然語言的時候能夠略過，但在形式語言中可能造成極大的不同。</p>
<p><br><span><strong>1.9 第一個程式</strong></span><br><br>傳統上，使用一個新語言所撰寫的第一個程式稱為 Hello, World!，因為這程式只會顯示 Hello, World! 文字在螢幕上。在 Python 中，這個程式看起來像這樣：<br><br><br>print "Hello, World!"<br><br>這是一個 print 陳述的例子，它並不會真的印什麼東西在紙上，而是在螢幕上印出一個數值。在這個例子中，結果就是下列文字：<br><br><br>Hello, World!<br><br>程式裡的兩個雙引號標示該數值的起迄點，它們不會出現在結果中。<br><br>有些人以 Hello, World! 程式的簡潔性，來判斷一種程式語言的品質。以這個標準來看，Python 幾乎做到了盡善盡美。</p>
<p><span><strong><br>1.10 術語</strong></span><br><br>演算法（algorithm）：<br>解決一種問題的大致步驟。<br>臭蟲（bug）：<br>程式裡的錯誤。<br>位元碼（byte code）：<br>介於原始碼與目標碼的中介語言。許多現代程式語言會先編譯原始碼到位元碼，然後使用一個稱為 <em>虛擬機器</em> 的程式直譯位元碼。<br>編譯（compile）：<br>把用高階程式語言寫的程式整批翻譯成低階語言，以利稍後執行。<br>除蟲（debugging）：<br>找到及移除三種程式設計錯誤的過程。<br>異常（exception）：<br>執行錯誤的另一個名稱。<br>執行檔（executable）：<br>可執行目標碼的另一個名稱。<br>形式語言（formal language）：<br>人們為了特定目標而設計的任何語言，如呈現數學想法或是電腦程式；所有的程式語言都是形式語言。<br>高階語言（high-level language）：<br>一種設計成讓人容易讀寫的程式語言，如 Python。<br>直譯（interpret）：<br>以一次翻譯一行程式碼的方式執行高階語言程式。<br>低階語言（low-level language）：<br>一種設計成讓電腦容易執行的程式語言，也稱為 機器語言 或 組合語言。<br>自然語言（natural language）：<br>人類所講的任何一種自然演變的語言。<br>目標碼（object code）：<br>編譯器翻譯程式後的輸出結果。<br>分析（parse）：<br>檢查程式並分析語法結構。<br>移植性（portability）：<br>一種能運作在多種電腦的程式特性。<br>print 陳述（print statement）：<br>一個使 Python 直譯器在螢幕上顯示數值的指令。<br>解決問題（problem solving）：<br>闡述問題，找到解決方法，並表達解決方法的過程。<br>程式（program）：<br>一連串詳細說明電腦活動及執行計算的指令。<br>Python shell：<br>Python 直譯器的互動式使用者介面。Python shell 的使用者在提示符號（&gt;&gt;&gt;）後輸入命令，按下 return 鍵直接傳送這些命令到直譯器處理。<br>執行錯誤（runtime error）：<br>直到程式開始執行時才發生的錯誤，這種錯誤會阻止程式繼續執行。<br>腳本（script）：<br>儲存在一個檔案中的程式（通常是直譯式的程式）。<br>語意錯誤（semantic error）：<br>一種程式中的錯誤，使該程式執行程式撰寫者預期外的事情。<br>語意（semantics）：<br>程式的意義。<br>原始碼（source code）：<br>在編譯前的高階語言程式。<br>語法（syntax）：<br>程式的結構。<br>語法錯誤（syntax error）：<br>一種使程式不能分析的錯誤（也因而不能直譯）。<br>標記（token）：<br>程式語法結構中的基本元素，與自然語言中的字詞類似。</p>
<p><br><span><strong>1.11 練習</strong></span><br><br>1.<br>寫出一個語法錯誤，但語意可理解的英文句子。寫出另一個語法正確，但有語意錯誤的句子。<br>2.<br>啟動 Python shell。鍵入 1 + 2 按下 return 鍵。Python <em>計算</em>這個<em>表達式</em>，印出結果，接著印出另一個提示符號。* 是<em> 乘法運算子</em>, 而 ** 是 <em>乘冪運算子</em>。試著輸入不同的運算式，並且記錄 Python 直譯器印出什麼。如果你用 / 運算子會發生什麼事情？結果是你預期的嗎？解釋看看。<br>3.<br>輸入 1 2 並按下 return 鍵。Python 試著計算這個表達式，因為這個表達式語法不正確，因此無法計算。取而代之的，Python 會印出錯誤訊息：<br><br><br>File "", line 1<br>1 2<br>^<br>SyntaxError: invalid syntax<br><br>在許多情況下，Python 會指出語法錯誤發生的地方，但並非每次都是正確的，而且它並不會給你多少關於該錯誤的訊息。因此，大部分都要靠你學習語法規則解決。<br><br>在這個例子中，Python 抱怨的原因是兩個數字中間沒有運算符號。<br><br>寫下另外三個輸入 Python 後，會產生錯誤訊息的字串。解釋各個例子為何不是有效的 Python 語法。<br>4.<br>鍵入 print 'hello'。Python 執行這個陳述，結果是將字母 h、e、l、l、o 印出。請注意你用來包住字串的雙引號，並不是輸出結果的一部分。<br><br>現在，輸入 print '"hello"'，然後描述並解釋你的結果。<br>5.<br>輸入不包含雙引號的 print cheese。輸出結果會像是這樣：<br><br><br>Traceback (most recent call last):<br>File "", line 1, in ?NameError: name 'cheese' is not defined<br><br>這是一個執行錯誤，確切地說，這是個 NameError，說得再具體一點，錯誤的原因是 cheese 這個名稱沒有定義。如果你還不知道這是什麼意思，你很快地就會暸解原因。<br>6.<br>在 Python 提示符後輸入 'This is a test...' 並按下 enter。記下結果。現在用以下內容建立一個名為 test1.py 的 Python 腳本（請確定在你嘗試執行前已儲存檔案）：<br><br><br>'This is a test...'<br><br>當你執行這個腳本時發生了什麼事？現在改變腳本的內容如下：<br><br><br>print 'This is a test...'<br><br>再執行一次。這次發生了什麼？<br><br>無論何時在 Python 提示符後輸入 <em>表達式</em>，Python 都會 <em>計算</em> 該表達式，然後把結果印在下一行。'This is a test...' 是一個求取 'This is a test...' 數值的表達式（就像 42 是個求取 42 數值的表達式）。然而，在一個腳本中，表達式的計算不會傳送至輸出結果，所以必須將它清楚地印出。</p>
<p> </p>
<h3>函數</h3>
<p>3. 函數</p>
<p>3.1 函數定義及用法</p>
<p>在程式設計的範疇，函數是個有名稱的陳述序列，用來執行所需的運算。這個運算在函數定義中指定。在 Python 裡，函數定義的語法為：</p>
<p>def NAME( LIST OF PARAMETERS ):<br>    STATEMENTS<br>你可以為你建立的函數取任意名稱，但是你不能使用與 Python 關鍵字相同的名稱。其中，LIST OF PARAMETERS （參數列表）用來指定使用新的函數前，你是否必須提供任何資訊。</p>
<p>函數裡的陳述數量沒有限制，但是這些陳述必須在 def 關鍵字之後縮排。在這本書的範例之中，我們都將使用縮排四個空格的標準方式。函數定義是我們將會看到的複合陳述之一，它們全都有相同的形態：</p>
<p>一個標頭，以關鍵字作為起始，冒號作為結束。<br>一個主體，由一個或多個 Python 陳述組成，每一個陳述都須從標頭縮排四個空格 -- 這是 Python 的標準縮排。<br>在函數定義之中，標頭中的關鍵字是 def，接著是函數名稱以及在括弧內的參數列表。參數列表可以是空的，也可以包含任意數量的參數。不論何者，括弧都是必需的。</p>
<p>我們一開始撰寫的兩個函數並不包含參數，因此語法如下：</p>
<p>def new_line():<br>    print # 一個沒有引數的 print 陳述會印出一個空行</p>
<p><br>這個函數的名稱是 new_line。空的括弧表示不包含任何參數。它的主體只包含單一陳述，用來輸出一個新行符號。（這就是你使用一個不帶有引數的 print 命令時會發生的事。）</p>
<p>定義新的函數並不會執行它。我們必須使用函數呼叫的方式執行函數。函數呼叫包含執行函數的名稱，後頭接著一連串的值，稱為引數（arguments），引數會被指派給函數定義裡的參數。我們第一個例子並沒有參數，所以函數呼叫並沒有接收任何引數。然而，必須注意的是，函數名稱中必需有括弧：</p>
<p>print "First Line."<br>new_line()<br>print "Second Line."<br>這個程式的輸出結果如下：</p>
<p>First line.</p>
<p>Second line.<br>在兩行中的空白行就是 new_line 函數呼叫的執行結果。如果我們想要在兩行中間加入更多空白行呢？我們可以重覆呼叫相同的函數：</p>
<p>print "First Line."<br>new_line()<br>new_line()<br>new_line()<br>print "Second Line."<br>或著我們可以寫一個叫做 three_lines 的新函數，可以印出三個空白行：</p>
<p>def three_lines():<br>    new_line()<br>    new_line()<br>    new_line()</p>
<p>print "First Line."<br>three_lines()<br>print "Second Line."<br>這個函數包含三個陳述，全都縮排四個空格。因為下一個陳述沒有縮排，Python 知道它不屬於函數的一部份。</p>
<p>這個程式有幾點你應該要注意：</p>
<p>你能夠重複呼叫相同程序。事實上，這種作法是很普遍而且有用的。<br>你也可以用一個函數去呼叫其他的函數，在這個例子中，three_lines 呼叫 new_line。<br>到目前為止，你可能還不是很清楚為什麼要花工夫建立這些新函數，事實上，這有很多理由，不過這個例子中只說明了其中兩個：</p>
<p>建立新函數讓你有機會命名一組陳述。函數可以將複雜的計算隱藏在單一指令後，並且用英文單字來代替神秘的程式碼，以達到簡化程式的目的。<br>建立新函數能夠減少重複的程式碼，那程式更小。例如：印出連續九個空白行的捷徑就是呼叫三次 three_lines 函數。<br>將前面部份的程式片段 儲存在名為tryme1.py 的腳本中，整個程式看起來如下：</p>
<p>def new_line():<br> print</p>
<p>def three_lines():<br> new_line()<br> new_line()<br> new_line()</p>
<p>print "First Line."<br>three_lines()<br>print "Second Line."<br>這個程式包含兩個函數定義，new_line 及 three_lines。函數定義和其他陳述的執行方式一樣，但其效果是建立新的函數。在呼叫函數前，函數中的陳述不會被執行，而函數定義也不會產出任何輸出。</p>
<p>就如你所預期的，你必須執行函數前先建立函數。也就是說，函數定義必須在第一次呼叫前執行。</p>
<p>3.2 執行流程</p>
<p>為了確保函數在第一次使用前先定義，你就得要弄清楚陳述在其中執行的次序，這叫做執行流程。</p>
<p>程式的第一個陳述永遠最先執行。程式由上到下一次執行一個陳述。</p>
<p>函數定義並不會改變執行流程，函數內的陳述直到函數被呼叫後才會執行。雖然你可以在函數內定義另一個函數，但這並不普遍，在這種情況下，外層的函數被呼叫後才會執行內層的函數定義。</p>
<p>函數呼叫就像在執行流程內繞道而行。它並非接著執行下一個陳述，執行的流程跳到被呼叫函數的第一行，執行該處所有的陳述，然後再回原處繼續執行。</p>
<p>直到你想起函數可以呼叫另一個函數之前，這聽起來夠簡單了。在執行某個函數之間，程式也許必須執行其他函數裡的陳述，但是在執行這個新函數時，程式也許又必須執行另一個不同的函數！</p>
<p>幸好 Python 熟悉追蹤程式執行的足跡，所以每當一個函數執行完，程式就會回到原函數中它被呼叫的地方繼續執行。當執行到程式的結尾，程式就會終止。</p>
<p>這個悲慘故事後寓意是什麼？當你讀一個程式，不要從上讀到下。而是要順著執行流程。</p>
<p>3.3 參數、引數以及 import 陳述</p>
<p>大多的函數都需要引數，也就是用來控制函數如何進行工作的值。舉例來說，如果你想要找到某數的絕對值，你就必須指出某數是多少。Python 有個計算絕對值的內建函數：</p>
<p>&gt;&gt;&gt; abs(5)<br>5<br>&gt;&gt;&gt; abs(-5)<br>5<br>在這個例子中，abs 函數的引數分別是 5 及 -5。</p>
<p>有些函數可以接受一個以上的引數，例如內建函數 pow 就需要兩個引數，底數與指數。在這個函數內，被指派至變數的數值稱為參數。</p>
<p>&gt;&gt;&gt; pow(2, 3)<br>8<br>&gt;&gt;&gt; pow(7, 4)<br>2401<br>另一個接受一個以上引數的內建函數是 max。</p>
<p>&gt;&gt;&gt; max(7, 11)<br>11<br>&gt;&gt;&gt; max(4, 1, 17, 2, 12)<br>17<br>&gt;&gt;&gt; max(3*11, 5**3, 512-9, 1024**0)<br>503<br>內建函數 max 可以接受用逗號分開的任意數量引數，並且傳回所接收值中最大的值。引數可以是簡單的數值或是運算式，在最後的例子中，回傳的結果是 503，因為它大於 33、125 及 1。</p>
<p>這裡有個只擁有一個參數的自訂函數範例：</p>
<p>def print_twice(bruce):<br> print bruce, bruce<br>這個函數接受單一引數，並且指派給名為 bruce 的參數。參數的數值（在這裡我們無法得知該值為何）會印出兩次，並緊接著一個空白行。選擇 bruce 這個名稱是暗示你可以自行決定給予參數的名稱，但一般來說，你會想用一個比 bruce 更有意義的名稱。</p>
<p>互動式的 Python shell 提供一個簡便的方式測試我們的函數。我們可以使用 import 陳述將我們在腳本中定義的函數匯入直譯式程序中。如果要看這個功能如何運作，我們先假設 print_twice 函數被定義在一個名為 chap03.py 的腳本中。我們現在可以將它匯入到我們的 Python shell 程序中，以互動的方式測試。</p>
<p>&gt;&gt;&gt; from chap03 import *<br>&gt;&gt;&gt; print_twice('Spam')<br>Spam Spam<br>&gt;&gt;&gt; print_twice(5)<br>5 5<br>&gt;&gt;&gt; print_twice(3.14159)<br>3.14159 3.14159<br>在一個函數呼叫中，引數的數值會被指派到函數定義裡對應的參數。 從實際的功能來看，如果 bruce = 'Spam' 在 print_twice('Spam') 被呼叫時執行，在 print_twice(5) 中 bruce = 5，而在 print_twice(3.14159) 中 bruce = 3.14159。</p>
<p>任何可以被印出的引數形態都可以傳送至 print_twice 函數中，在第一個函數呼叫中，引數是字串。在第二個函數呼叫中是整數。而I第三個則是浮點數。</p>
<p>和內建函數一樣，我們可以在 print_twice 函數中使用表達式：</p>
<p>&gt;&gt;&gt; print_twice('Spam'*4)<br>SpamSpamSpamSpam SpamSpamSpamSpam<br>'Spam'*4 會先求出 'SpamSpamSpamSpam' 的值，接著傳送至 print_twice 作為引數。</p>
<p>3.4 組合</p>
<p>就像數學的函數一樣，Python 的函數可以組合，這意思是說你可以使用一個函數的結果作為另一個函數的輸入值。</p>
<p>&gt;&gt;&gt; print_twice(abs(-7))<br>7 7<br>&gt;&gt;&gt; print_twice(max(3, 1, abs(-11), 7))<br>11 11<br>在第一個例子中，abs(-7) 的結果是 7，然後變成 print_twice 的引數。第二個例子則存在兩層的組合關係，abs(-11) 先求出 11 的值，接著在 max(3, 1, 11, 7) 中得到的值為 11 ，最後 print_twice(11) 顯示結果。</p>
<p>我們也可以用變數作為引數：</p>
<p>&gt;&gt;&gt; michael = 'Eric, the half a bee.'<br>&gt;&gt;&gt; print_twice(michael)<br>Eric, the half a bee. Eric, the half a bee.<br>請注意這裡有一件非常重要的事。我們當成引數傳送的變數名稱（michael）和參數名稱（bruce）完全無關。無論該值原來（在函數呼叫中）稱為什麼都無關緊要，在 print_twice 裡，我們把每個值都稱為 bruce。</p>
<p>3.5 區域的概念：變數及參數</p>
<p>當你在函數裡建立一個區域變數，它就只存在這個函數裡頭，你不能用於這個函數以外的地方。例如：</p>
<p>def cat_twice(part1, part2):<br> cat = part1 + part2<br> print_twice(cat)<br>這個函數接受兩個引數並連接它們，然後印出結果兩次。我們能夠用兩個字串來呼叫這個函數：</p>
<p>&gt;&gt;&gt; chant1 = "Pie Jesu domine, "<br>&gt;&gt;&gt; chant2 = "Dona eis requiem."<br>&gt;&gt;&gt; cat_twice(chant1, chant2)<br>Pie Jesu domine, Dona eis requiem. Pie Jesu domine, Dona eis requiem.<br>當 cat_twice 終止後，變數 cat 也隨即消失。如果我們嘗試印出這個變數，我們會得到錯誤訊息：</p>
<p>&gt;&gt;&gt; print cat<br>NameError: name 'cat' is not defined<br>參數也具有區域性。舉例來說，在函數 print_twice 的範圍以外，並不存在bruce 這個名稱。如果你嘗試使用它，Python 就會抱怨。</p>
<p>3.6 堆疊圖</p>
<p>為了掌握變數可以用在何處，有時畫出堆疊圖非常有用。堆疊圖就像狀態圖一樣，標示出每個變數的數值，並同時顯示每個變數所屬的函數。</p>
<p>每個函數用一個框架表示。框架就是一個旁邊標示函數名稱的長方形，而其中標示出參數與變數。上述範例的堆疊圖如下：</p>
<p> </p>
<p>框架的次序表示執行流程。__main__ 是給予最頂層的函數的專有名稱，它先呼叫 cat_twice，然後 cat_twice 再呼叫 print_twice。當你建立一個不屬於任何函數的變數時，這個變數就屬於 __main__。</p>
<p>每一個參數與其對應引數指涉相同的數值。所以，part1 與 chant1 有相同的數值，part2 數值則與與 chant2 相同，而 bruce 與 cat 的數值亦相同。</p>
<p>如果函數呼叫時發生錯誤，Python 就會印出被呼叫函數的名稱、和呼叫它的函數名稱及再上一層的函數名稱，一直回溯到最頂層函數名稱為止。</p>
<p>如果想看實際執行狀況，建立一個名為tryme2.py 的 Python 腳本如下：</p>
<p>def print_twice(bruce):<br> print bruce, bruce<br> print cat</p>
<p>def cat_twice(part1, part2):<br> cat = part1 + part2<br> print_twice(cat)</p>
<p>chant1 = "Pie Jesu domine, "<br>chant2 = "Dona eis requim."<br>cat_twice(chant1, chant2)<br>我們將 print cat 陳述加入 print_twice 函數，但是變數 cat 在該處並未定義。執行這個腳本會產生以下錯誤訊息：</p>
<p>Traceback (innermost last):<br> File "tryme2.py", line 11, in &lt;module&gt;<br> cat_twice(chant1, chant2)<br> File "tryme2.py", line 7, in cat_twice<br> print_twice(cat)<br> File "tryme2.py", line 3, in print_twice<br> print cat<br>NameError: global name 'cat' is not defined<br>這種函數列表稱為異常追蹤（traceback）。它告訴你錯誤在哪一個程式檔案中發生，並指出錯誤發生時執行到哪一行及哪一個函數。它也會顯示造成錯誤的程式碼。</p>
<p>要注意到異常追蹤與堆疊圖之間的相似度。這並不是一個巧合。事實上，異常追蹤的另一個常用名稱就是 推疊追蹤（stack trace）。</p>
<p>3.7 術語</p>
<p>函數（function）：<br>一個有名稱的陳述序列，用來執行一些有用的運算。函數可以接受參數或產出結果，而反之亦然。<br>函數定義（function definition）：<br>一個建立新函數的陳述，具體地指定新建函數的名稱、參數以及執行何種陳述。<br>複合陳述（compound statement）：<br>由兩個部份組成的陳述：<br>標頭 - 以決定陳述種類的關鍵字起始，並且以冒號作為結束。<br>主體 - 包含一個或多個從標頭縮排相同距離的陳述組成。<br>複合陳述的語法如下：<br>keyword expression :<br> statement<br> statement ...<br>標頭（header）：<br>複合陳述的第一個部份。標頭由關鍵字起始，並以冒號（:）結束。<br>主體（body）：<br>複合陳述的第二個部份，主體由一系列從標頭起始處縮排相同距離的陳述組成。Python 社群所使用的標準縮排量是四個空格。<br>函數呼叫（function call）：<br>一個執行函數的陳述。它由函數名稱和其後包含於括弧中的引數列表所組成。<br>執行流程（flow of execution）：<br>在程式運行時，陳述執行的順序。<br>參數（parameter）：<br>一個函數中，用來代表引數數值的名稱。<br>匯入（import）：<br>一種陳述，可以將一個 Python 腳本中定義的函數和變數，帶入另一個腳本或運行中的 Python shell 環境中。</p>
<p>舉例來說，假設下列程式碼是一個名為 tryme.py 的腳本：</p>
<p>def print_thrice(thing):<br> print thing, thing, thing</p>
<p>n = 42<br>s = "And now for something completely different..."<br>現在從 tryme.py 所在的目錄下啟動 Python shell：</p>
<p>$ ls<br>tryme.py &lt;and other stuff...&gt;<br>$ python<br>&gt;&gt;&gt;<br>在 tryme.py 中定義了三個名稱，分別是： print_thrice、n 及 s。如果我們沒有先匯入這些名稱就嘗試使用它們，我們會得到錯誤訊息：</p>
<p>&gt;&gt;&gt; n<br>Traceback (most recent call last):<br> File "&lt;stdin&gt;", line 1, in &lt;module&gt;<br>NameError: name 'n' is not defined<br>&gt;&gt;&gt; print_thrice("ouch!")<br>Traceback (most recent call last):<br> File "&lt;stdin&gt;", line 1, in &lt;module&gt;<br>NameError: name 'print_thrice' is not defined<br>不過，如果我們匯入 tryme.py 中所有程式碼，我們就能夠使用所有定義於其中函數或變數。</p>
<p>&gt;&gt;&gt; from tryme import *<br>&gt;&gt;&gt; n<br>42<br>&gt;&gt;&gt; s<br>'And now for something completely different...'<br>&gt;&gt;&gt; print_thrice("Yipee!")<br>Yipee!Yipee!Yipee!&gt;&gt;&gt;<br>請注意你在 import 陳述中，不需要包含 .py 副檔名。</p>
<p>引數（argument）：<br>呼叫函數時提供給函數的值。這個值被指派到函數中的對應參數中。<br>函數組合（function composition:）：<br>使用一個函數呼叫的輸出作為另一個函數的輸入。<br>區域變數（local variable）：<br>一個函數中定義的變數，一個區域變數只能使用在所屬函數中。<br>堆疊圖（stack diagram）：<br>一種顯示許多函數、函數中的變數和變數值的圖像化表示法。<br>框架（frame）：<br>堆疊圖中用來表示函數呼叫的長方形圖示。它包含該函數的區域變數及參數。<br>異常追蹤（traceback）：<br>當執行錯誤發生時，所列出的執行中函數列表。. 異常追蹤亦常被稱為 堆疊追蹤（stack trace），因為它會依照函數在 執行堆疊（runtime stack）中的順序列出函數。<br>3.8 練習</p>
<p>使用文字編輯器建立一個名為 tryme3.py 的腳本。寫一個利用 three_lines 印出九個空白行的 nine_lines 函數。然後再建立一個名為 clear_screen 的函數，可以印出二十五個空白行。你的程式的最後一行應該呼叫 clear_screen 函數。<br>將 tryme3.py 的最後一行移動到程式最上方，使函數 clear_screen 的呼叫出現在函數定義之前。執行這個程式，然後記下你得到的錯誤訊息。你能夠說出一個規則，描述 函數定義與函數呼叫在一個程式中出現位置的相互關係嗎？<br>拿一個可運作的 tryme3.py，將其中 new_line 的定義移到 three_lines 的定義之後。然後記下執行這個程式時發生什麼事。現在再把 new_line 的定義移動 到three_lines() 的呼叫之後。解釋一下為什麼這是你在上一個練習中描述規則的範例。<br>將下面 cat_n_times 函數定義的主體完成，讓這個函數可以印出 s 字串 n 次：</p>
<p>def cat_n_times(s, n):<br> &lt;fill in your code here&gt;<br>將這個函數儲存在名為 import_test.py 的腳本中。現在在 unix 提示列下，確定你在 import_test.py 所存放的目錄下（ls 指令應該會顯示 import_test.py）。啟動 Python shell 然後嘗試下列指令：</p>
<p>&gt;&gt;&gt; from import_test import *<br>&gt;&gt;&gt; cat_n_times('Spam', 7)<br>SpamSpamSpamSpamSpamSpamSpam<br>如果一切順利，你執行的結果應該如上所示。嘗用用其他的值呼叫 cat_n_times 函數，到你熟悉它如何運作為止。</p>
<p>目錄 | Index</p><h2>學習 Python 3</h2>
<p><a href="http://www.python-course.eu/python3_course.php">http://www.python-course.eu/python3_course.php</a></p>
<h3>Brython Console</h3>
<p><iframe src="http://brython.info/console.html" width="800" height="400"></iframe></p><h3>Python 禪思</h3>
<p>The Zen of Python</p>
<p><span>Beautiful is better than ugly. <span>Explicit is better than implicit.</span></span></p>
<p class="line874">美麗優於醜陋，明講好過暗諭。</p>
<p class="line874"><span>Simple is better than complex. </span><span>Complex is better than complicated.</span></p>
<p class="line874"><span>簡潔者為上，複雜者次之，繁澀者為下。</span></p>
<p class="line874"><span><span>Flat is better than nested. </span><span>Sparse is better than dense. </span><span>Readability counts.</span></span></p>
<p class="line874">平舖善於層疊，勻散勝過稠密；以致輕鬆易讀。<span id="line-53" class="anchor"></span><span id="line-54" class="anchor"></span></p>
<p class="line874"><span>Special cases aren't special enough to break the rules. </span><span>Although practicality beats purity.</span></p>
<p class="line874">特例難免但不可打破原則，務求純淨卻不可不切實際。<span id="line-55" class="anchor"></span><span id="line-56" class="anchor"></span></p>
<p class="line874">Errors should never pass silently. Unless explicitly silenced.</p>
<p class="line874">斷勿使錯誤靜靜流逝，除非有意如此。<span id="line-57" class="anchor"></span><span id="line-58" class="anchor"></span></p>
<p class="line874"><span>In the face of ambiguity, refuse the temptation to guess.</span></p>
<p class="line874">在模擬兩可之間，拒絕猜測的誘惑。<span id="line-59" class="anchor"></span><span id="line-60" class="anchor"></span></p>
<p class="line874">There should be one-- and preferably only one --obvious way to do it.</p>
<p class="line874">總會有一種明確的寫法，最好也只有一種，<span id="line-61" class="anchor"></span><span id="line-62" class="anchor"></span></p>
<p class="line874"><span>Although that way may not be obvious at first unless you're Dutch.</span></p>
<p class="line874">但或須細想方可得。<span id="line-63" class="anchor"></span><span id="line-64" class="anchor"></span></p>
<p class="line874">Now is better than never. <span>Although never is often better than *right* now.</span></p>
<p class="line874">凡事雖應三思後行，但坐而言不如起而行。<span id="line-65" class="anchor"></span><span id="line-66" class="anchor"></span></p>
<p class="line874"><span>If the implementation is hard to explain, it's a bad idea.</span></p>
<p class="line874">難以解釋的實作方式，必定是壞方法。<span id="line-67" class="anchor"></span><span id="line-68" class="anchor"></span></p>
<p class="line874"><span>If the implementation is easy to explain, it may be a good idea.</span></p>
<p class="line874">容易解釋的實作方式，可能是好主意。<span id="line-69" class="anchor"></span><span id="line-70" class="anchor"></span></p>
<p class="line874"><span>Namespaces are one honking great idea -- let's do more of those!</span></p>
<p class="line874">命名空間讚，吾人多實用。</p><h3>History of Python</h3>
<p>Easy as ABC</p>
<p>Origin of the name Monty Python What do the alphabet and the programming language Python have in common? Right, both start with ABC. If we are talking about ABC in the Python context, it's clear that the programming language ABC is meant. ABC is a general-purpose programming language and programming environment, which had been developed in the Netherlands, Amsterdam, at the CWI (Centrum Wiskunde &amp; Informatica). The greatest achievement of ABC was to influence the design of Python.</p>
<p>Python was conceptualized in the late 1980s. Guido van Rossum worked that time in a project at the CWI, called Amoeba, a distributed operating system. In an interview with Bill Venners1, Guido van Rossum said: "In the early 1980s, I worked as an implementer on a team building a language called ABC at Centrum voor Wiskunde en Informatica (CWI). I don't know how well people know ABC's influence on Python. I try to mention ABC's influence because I'm indebted to everything I learned during that project and to the people who worked on it."</p>
<p>Later on in the same Interview, Guido van Rossum continued: "I remembered all my experience and some of my frustration with ABC. I decided to try to design a simple scripting language that possessed some of ABC's better properties, but without its problems. So I started typing. I created a simple virtual machine, a simple parser, and a simple runtime. I made my own version of the various ABC parts that I liked. I created a basic syntax, used indentation for statement grouping instead of curly braces or begin-end blocks, and developed a small number of powerful data types: a hash table (or dictionary, as we call it), a list, strings, and numbers."</p>
<p>Comedy, Snake or Programming Language</p>
<p>So, what about the name "Python": Most people think about snakes, and even the logo depicts two snakes, but the origin of the name has its root in British humour. Guido van Rossum, the creator of Python, wrote in 1996 about the origin of the name of his programming language1: "Over six years ago, in December 1989, I was looking for a 'hobby' programming project that would keep me occupied during the week around Christmas. My office ... would be closed, but I had a home computer, and not much else on my hands. I decided to write an interpreter for the new scripting language I had been thinking about lately: a descendant of ABC that would appeal to Unix/C hackers. I chose Python as a working title for the project, being in a slightly irreverent mood (and a big fan of Monty Python's Flying Circus)."</p>
<p>The Zen of Python</p>
<p>Beautiful is better than ugly.<br>Explicit is better than implicit.<br>Simple is better than complex.<br>Complex is better than complicated.<br>Flat is better than nested.<br>Sparse is better than dense.<br>Readability counts.<br>Special cases aren't special enough to break the rules.<br>Although practicality beats purity.<br>Errors should never pass silently.<br>Unless explicitly silenced.<br>In the face of ambiguity, refuse the temptation to guess.<br>There should be one -- and preferably only one -- obvious way to do it.<br>Although that way may not be obvious at first unless you're Dutch.<br>Now is better than never.<br>Although never is often better than *right* now.<br>If the implementation is hard to explain, it's a bad idea.<br>If the implementation is easy to explain, it may be a good idea.<br>Namespaces are one honking great idea -- let's do more of those!</p>
<p>Development Steps of Python</p>
<p>Guido Van Rossum published the first version of Python code (version 0.9.0) at alt.sources in February 1991. This release included already exception handling, functions, and the core datatypes of list, dict, str and others. It was also object oriented and had a module system.</p>
<p>Python version 1.0 was released in January 1994. The major new features included in this release were the functional programming tools lambda, map, filter and reduce, which Guido Van Rossum never liked.</p>
<p>Six and a half years later in October 2000, Python 2.0 was introduced. This release included list comprehensions, a full garbage collector and it was supporting unicode.</p>
<p>Python flourished for another 8 years in the versions 2.x before the next majaor release as Python 3.0 (also known as "Python 3000" and "Py3K") was released. Python 3 is not backwards compatible with Python 2.x. The emphasis in Python 3 had been on the removal of duplicate programming constructs and modules, thus fulfilling or coming close to fulfilling the 13th law of the Zen of Python: "There should be one -- and preferably only one -- obvious way to do it."</p>
<p>Some changes in Python 3.0:</p>
<p style="margin-left: 30px;"><br>Print is now a function<br>Views and iterators instead of lists<br>The rules for ordering comparisons have been simplified. E.g. a heterogeneous list cannot be sorted, because all the elements of a list must be comparable to each other.<br>There is only one integer type left, i.e. int. long is int as well.<br>The division of two integers returns a float instead of an integer. "//" can be used to hae the "old" behavious.<br>Text Vs. Data Instead Of Unicode Vs. 8-bit</p>
<p><br>1 January 13, 2003, http://www.artima.com/intv/pythonP.html 2 Foreword for "Programming Python" (1st ed.) by Mark Lutz, O'Reilly</p><h2>程式語言定位</h2>
<p>要教導高階程式語言 (General Purpose Language) 或者是特定領域語言 (Domain Specific Language)? </p>
<p>General Purpose Language: C/C++, Java, Python, Ruby 等.</p><h2>Reeborg 技術</h2>
<p>線上的程式編輯器採用: <a href="http://codemirror.net/">http://codemirror.net/</a></p>
<p>Python 3 轉為 JavaScript: <a href="http://www.brython.info/">http://www.brython.info/</a></p>
<p>同步協同: <a href="https://togetherjs.com/">https://togetherjs.com/</a></p>
<p>採用: <a href="http://jshint.com/about/">http://jshint.com/about/</a></p>
<p>從小朋友的計算機程式入門到如何建立 Reeborg 雲端環境</p>
<p>假如要在平板上使用, 則可以設法納入<a href="http://www.html5rocks.com/en/mobile/touch/">多點觸控的功能</a>.</p><h2>Reeborg 指令</h2>
<p>建立機器人 robot: robot = UsedRobot(3, 5, 'E', 0), 在 x = 3, y = 5 的位置建立一個面向東方且沒有代幣的 robot</p>
<p>UsedRobot((x, y, orientation, tokens) 其中 (x, y) 為機器人所在座標, orientation 可以是 "E", "W", "S", "N" 其中之一,  tokens 則是所攜帶的代幣個數.</p>
<p>假設利用 robot = UsedRobot(3, 5, 'E', 0) 建立機器人 robot, 則 robot 所在位置為 (robot.body.x, robot.body.y)</p>
<p>其他 robot 所具備的函式與屬性 (以 dir(robot) 取得):</p>
<p>['__bases__', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__mro__', '__name__', '__ne__', '__new__', '__or__', '__repr__', '__setattr__', '__str__', 'at_goal', 'at_goal_orientation', 'body', 'build_wall', 'front_is_clear', 'has_token', 'is_facing_north', 'move', 'object_here', 'put', 'right_is_clear', 'take', 'toString', 'token_here', 'turn_left']</p>
<p>機器人只能往前走</p>
<p style="margin-left: 30px;">move() 向前移動一步</p>
<p>機器人只能向左轉</p>
<p style="margin-left: 30px;">turn_left() 向左轉</p>
<p>UsedRobot() 建立 robot</p>
<p><span style="font-size: 10px;">機器人可以感測前方與右方是否有障礙物</span></p>
<p style="margin-left: 30px;">front_is_clear() 前方沒有障礙</p>
<p style="margin-left: 30px;">right_is_clear() 右方沒有障礙</p>
<p>機器人可以知道是否面向北</p>
<p style="margin-left: 30px;">is_facing_north() 面向北</p>
<p>done() 完成</p>
<p>put() 放下呼叫器</p>
<p>take() 拿起呼叫器</p>
<p>shape_here()</p>
<p>select_world() 選擇環境</p>
<p>token_here() 這裡有代幣</p>
<p>has_token() 有代幣</p>
<p>at_goal() 達陣</p>
<p>at_goal_orientation() 達陣時方位</p>
<p>build_wall() 築牆</p>
<p>think() 思考 0-10000 milliseconds</p>
<p>pause() 暫停</p>
<p>remove_robot() 除去 robot</p>
<p>repeat() 重複</p>
<p>side_view() 側視</p>
<p>top_view() 上視</p>
<p>write() 寫出</p>
<p>程式錯誤</p>
<p>詞彙錯誤 (Lexical errors) - 呼叫特定函式或關鍵字時拼字錯誤 (單字錯誤)</p>
<p style="margin-left: 30px;">例如: 使用機器人所無法理解的函式, i.e. 在尚未定義向右轉函式前, 就呼叫向右轉函式.</p>
<p>句法錯誤 (Syntactic errors) - 程式的語法使用錯誤 (文法錯誤)</p>
<p style="margin-left: 30px;">例如: 呼叫函式時, 輸入變數錯誤, 例如想要利用 take(token) 拿起代幣, 而非使用 take("token")</p>
<p>執行錯誤 (Execution errors) - 執行時因為特定函式無法如期完成所預設的工作</p>
<p style="margin-left: 30px;">例如: 機器人面對牆, 卻仍被下達前進的指令, 或者在沒有呼叫器的位置想要拿起呼叫器等.</p>
<p>邏輯錯誤 (Logic errors) - 整體程式的執行無法完成所被交付的任務</p>
<p>寫程式的原則</p>
<p style="margin-left: 30px;">程式內容一目了然</p>
<p style="margin-left: 30px;">程式內容可方便除錯</p>
<p style="margin-left: 30px;">程式架構具有彈性, 可以方便進行變化修改</p><h2>Reeborg help</h2>
<p>在大學課程中使用 Reeborg, 需要將英文翻成中文嗎? 若以學生的入學的程式而言, 需要, 若以學生畢業後的需求而言, 則不需要.</p>
<p>我們要順應學生入學的程度, 還是要求學生畢業後該有一定的英文閱讀與溝通能力?</p>
<p>Discussions, questions, comments about Reeborg take place here. Bug reports are welcome!</p>
<p>Basic commands<br>About Reeborg<br>Contribute<br>Basic commands</p>
<p>注意: 在 Javascript, true 與 false 以小寫表示, 但是在 Python, True 與 False 則以大寫表示. 為求一致, 以下都採小寫表示.</p>
<p>Reeborg 機器人除了理解 Javascript 與 Python 程式碼外, 還可以使用下列指令:</p>
<p>at_goal(): condition which is "true" if Reeborg has reached "home"</p>
<p>抵達目標(): 假如 Reeborg 抵達 "home", 則此函式傳回 true</p>
<p>at_goal_orientation(): condition which is "true" if Reeborg has the required orienation</p>
<p>抵達目標方位(): 若 Reeborg 轉向所需要的方位, 則此條件為真</p>
<p>build_wall(): adds a wall right in front of where Reeborg is</p>
<p>建牆(): 在 Reeborg 面前增加一道牆</p>
<p>done(): instructs the program to stop (end) at that point.</p>
<p>完成(): 讓程式在此停止</p>
<p>front_is_clear(): "true" if no wall blocking Reeborg's way</p>
<p>前方無障礙(): 若 Reeborg 前方沒有障礙物, 則傳回 true</p>
<p>has_token(): "true" if Reeborg carries at least one token</p>
<p>有token(): 若 Reeborg 帶了至少一個 token, 則傳回 true</p>
<p>is_facing_north(): "true" if Reeborg is facing North (towards the top of the screen)</p>
<p>面向北(): 若 Reeborg 面朝北, 則傳回 true (以螢幕上方為北)</p>
<p>move()</p>
<p>向前一步()</p>
<p>put() or put("object") where object is one of "token", "triangle", "square" or "star"</p>
<p>放下物品(): 物品包含 token, triangle, square 或 star</p>
<p>right_is_clear(): "true" if no wall is to the immediate right of Reeborg</p>
<p>右邊無障礙(): 若 Reeborg 正右邊沒有牆, 則傳回真</p>
<p>repeat(f, n): executes ``f()`` n times</p>
<p>重複函式幾次</p>
<p>object_here(): "false" if there is no object at Reeborg's location, otherwise it returns the name of the object, "triangle", "square" or "star", or the</p>
<p>有東西(): Reeborg 所在地沒有物品, 則傳回 false, 否則傳回該物件的名稱</p>
<p>number of tokens at that location.</p>
<p>有幾件東西</p>
<p>take() or take("object") where object is one of "token", "triangle", "square" or "star"</p>
<p>拿東西</p>
<p>token_here(): "true" if there is a token at Reeborg's location</p>
<p>turn_left()</p>
<p>To create additional robots, one can use UsedRobot() preceeded by new if using Javascript.</p>
<p>In addition, the following commands are available and are not tied to any robot in particular.</p>
<p>import_lib(): for Javascript, includes the code found in the Library tab</p>
<p>import my_lib: for Python, includes the code found in the Library tab</p>
<p>inspect(object): shows result in Reeborg's Diary</p>
<p>pause(); can be called with an argument in milliseconds which indicates the time after which it will automatically resume.</p>
<p>sound("true"): turns sound on. Can be turned off by calling with no argument or with "false". Off by default or if delay between actions is less than 250ms.</p>
<p>think(number): sets the amount of time in milliseconds between each robot action.</p>
<p>write(string): write a string in Reeborg's Diary</p>
<p>select_world(string): selects a given world.</p>
<p>print(string): only valid with Python. Somewhat equivalent to write.</p>
<p>To find out more, follow the lessons.</p>
<p>About Reeborg</p>
<p>有關 Reeborg</p>
<p>Inspired by Guido van Robot, itself inspired by the original Karel the Robot created by Richard Pattis, Reeborg first appeared in RUR-PLE, a program I created to learn Python, picking up programming as a hobby.</p>
<p>Reeborg is there to guide you in learning computer programming in either Python or Javascript. Why Python? Because its syntax is the simplest and encourages good writing habits by enforcing blocks of code to be indented.</p>
<p><span style="font-size: 10px;">Why Javascript? The main reason is because it is the native language for programming web browsers. Since Reeborg's program is written in Javascript, you will be able, after going through enough lessons, to change the way that Reeborg behaves, using the full power of Javascript and perhaps make Reeborg do things that I never thought could be possible. Possible changes with Python as a language of choice might be a bit more limited.</span></p>
<p>I hope you enjoy learning computer programming with Reeborg.</p>
<p>Feel free to contact me at Andre.Roberge@gmail.com</p>
<p>Reeborg is free and will remain free to use and to share under a Creative Commons License Contrat Creative Commons If you are using it to teach programming to students, you might want to make a copy of this site on a local server. Regardless, I would really appreciate if you would contact me as I would like to know where Reeborg's World is used (I do not track users).</p>
<p>If you find this site so useful and you want to do something to thank me, you have two choices:</p>
<p>You can give me $100,000; small denominations preferred.<br>You can pay it forward by doing something nice to someone else.<br>The choice is yours :-)</p>
<p>Contribute</p>
<p>I am just a self-taught programmer, with no training in web design, graphics, etc. I would gladly welcome any suggestions or contributions to</p>
<p>Improve the usability of this site.<br>Make a better looking robot; I drew Reeborg pixel-by-pixel using a rather primitive drawing program, suitable for my skills level. There are two sets of pictures available: one with Reeborg viewed from its side and one viewed from above. Note that by default Reeborg is viewed sideways whereas its world is (most often) viewed from above; a nicer-looking Reeborg, perhaps viewed from nearly above, might be most welcome.<br>New worlds, examples and challenges.<br>Corrections to the existing content, including fixing typos.<br>etc.<br>Bug reports are welcome!</p>
<p>My medium-term plans include:</p>
<p>Translating the tutorials into French<br>Adding various tutorials including some on making games using the html canvas<br>Longer term plans include:</p>
<p>Implementing Reeborg's world for other languages (Scheme, ...) as long as it can be done within a browser with no server-side code running.<br>Enlisting contributors to translate tutorials into languages other than English or French<br>Investigating something like Ruby-warrior in Javascript<br>Investigating the possibility of porting From nand to Tetris to the web using Javascript<br>Audio samples from freesound, all chosen (and modified) from Creative Commons license 0 submissions.</p><h3>Translation Guide</h3>
<p>參考: <a href="http://www.greenboard.org/wiki/zh/doku.php/tag:%E5%B0%8F%E5%AD%A6%E5%85%AD%E5%B9%B4%E7%BA%A7?do=showtag&amp;tag=%E5%B0%8F%E5%AD%A6%E5%85%AD%E5%B9%B4%E7%BA%A7">http://www.greenboard.org/wiki/zh/doku.php/tag:%E5%B0%8F%E5%AD%A6%E5%85%AD%E5%B9%B4%E7%BA%A7?do=showtag&amp;tag=%E5%B0%8F%E5%AD%A6%E5%85%AD%E5%B9%B4%E7%BA%A7</a></p>
<p>Introduction</p>
<p>Reeborg's world is designed to be adapted to various programming languages (Javascript, Python, CoffeeScript ... any programming language that can be tranlated to javascrip client-side) and various human languages, with English as the first version and a French translation provided by its creator.</p>
<p>This short guide indicates what needs to be done to provide a translation.</p>
<p>Details<br>There are three types of files that need to be translated:</p>
<p>world.html or its equivalent (e.g. monde.html in French). This is the main app in one page<br>A language specific file containing robot instructions (and various strings used in communicating with the user) are found in a javascript file. The name of that file uses a convention so that a code indicating the programming language used as well as a standard two-letter code indicating the human language are appended at the end of "reeborg". Thus, the English javascript file is src/lang/reeborg_en.js whereas the French version would be src/lang/reeborg_fr.js<br>In addition, lessons are translated as well. Lessons are written in reStructuredFormat and use sphinx to translate into html using a custom template.<br>In order to help keep translation in sync, filenames use the same name as the English version. Thus, the lesson that introduces the move() command is move.rst even though the French name (for example) for the command is avance(). However, these filenames are found in a directory that refers to the relevant languages (programming and human). For example, the English tutorial aimed at teachin Javascript to beginners are in directory docs/begin_js_en/</p>
<p>Note that some lessons will refer to methods with English names as we dig deeper in the code, especially when adding new capabilities to the robot. This is unavoidable and can be explained by mentioning that the makers of Reeborg's world use English for internal development, etc., etc. An example will be provided by the French tutorials.</p><h3>第一個程式</h3>
<p>這裡準備讓 Reeborg (李伯機器人) 跨出它的第一步了. 在編輯器中有一行指令:</p>
<p>move()</p>
<p>move() 是一個 Python 函式範例. 每個函式都有個名稱. 這裡函式的名稱是 move. 合法的函式名稱必須以字母或底線起頭, 隨後可以接字母, 數字或底線. 函式名稱之後緊接著 (). 這樣就是告訴李伯機器人要執行或呼叫這個函式 (執行與呼叫是相同意思). 這個函式的呼叫必須在單獨的一行裡.</p>
<p>試試看</p>
<p>加入第二個 move(), 李伯就會前進兩步, 而不只走一步.</p>
<p>面對錯誤</p>
<p>寫電腦程式時, 會經常碰到許多錯誤. 想看看李伯碰到程式錯誤時會有何反應, 接下來就故意在程式中放個錯誤.</p>
<p>試試看</p>
<p>將 move() 換成 Move() (使用大寫的 M 開頭), 然後再執行程式.</p>
<p>情況如何</p>
<p>李伯機器人所能理解的 Python 程式, 是區分英文字母大小寫的, 也就是說, 小寫字母與大寫字母是不相同的. 這下子您看到李伯碰到程式錯誤時會有何反應了. 按一下退回鍵, 修正錯誤然後再執行正確的程式.</p>
<p>規則一</p>
<p>前面所說的您實際操作沒有, 假如還沒, 趕緊退回去執行看看. 聽好, 學習程式一定得要遵守的最重要規則一就是:</p>
<p>學習電腦程式就與學習樂器一樣, 一定要親自練習, 而不只是看看而已.</p>
<p>每次建議您要親自操作, 都一定有原因. 有時候可能會一下子反應不過來, 但還是得親自操作. 不僅如此, 可能還要您自己試著不同的方法或流程, 才能學得更快.</p>
<p>邊試邊學習</p>
<h2>Reeborg 執行範例</h2>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22robots%22%3A%5B%7B%22x%22%3A1%2C%22y%22%3A1%2C%22tokens%22%3A%22infinite%22%2C%22orientation%22%3A0%2C%22_prev_x%22%3A1%2C%22_prev_y%22%3A1%2C%22_prev_orientation%22%3A0%7D%5D%2C%22goal%22%3A%7B%22position%22%3A%7B%22x%22%3A3%2C%22y%22%3A1%7D%2C%22tokens%22%3A%7B%223%2C2%22%3A1%7D%7D%2C%22tokens%22%3A%7B%222%2C2%22%3A1%7D%2C%22walls%22%3A%7B%222%2C1%22%3A%5B%22east%22%5D%2C%222%2C2%22%3A%5B%22east%22%5D%2C%222%2C3%22%3A%5B%22north%22%5D%2C%221%2C3%22%3A%5B%22east%22%5D%2C%223%2C3%22%3A%5B%22north%22%2C%22east%22%5D%7D%7D&amp;editor=sound(%22on%22)%0Aimport%20my_lib%0Amove()%0Aturn_left()%0Amove()%0Apick_beeper()%0Amove()%0Aturn_right()%0Amove()%0Aturn_right()%0Amove()%0Aput_beeper()%0Amove()&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">聲音, 前進, 取 beeper, 放 beeper</a></p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=from%20browser%20import%20html%2C%20doc%0A%23%20use%20plotarea%20as%20canvas%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0A%23%20%E6%BA%96%E5%82%99%E5%9C%A8%20canvas%20%E4%B8%AD%E7%B9%AA%E5%9C%96%0Adef%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20color%3D%22red%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0A%0Actx%20%3D%20canvas.getContext('2d')%0Asize%20%3D%2030%0Afor%20i%20in%20range(size%2B1)%3A%0A%20%20%20%20%23%20%E6%B0%B4%E5%B9%B3%E7%B7%9A%0A%20%20%20%20draw_line(100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20100%2Bi*10%2C%20%22black%22)%0A%20%20%20%20%23%20%E5%9E%82%E7%9B%B4%E7%B7%9A%0A%20%20%20%20draw_line(100%2Bi*10%2C%20100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20%22red%22)&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">畫格線</a></p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=from%20browser%20import%20html%2C%20doc%0A%23%20use%20plotarea%20as%20canvas%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0A%23%20%E6%BA%96%E5%82%99%E5%9C%A8%20canvas%20%E4%B8%AD%E7%B9%AA%E5%9C%96%0Adef%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20color%3D%22red%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0Adef%20fill_rectangle(x1%2C%20y1%2C%20x2%2C%20y2%2C%20color%3D%22red%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x1%2C%20y2)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.lineTo(x2%2C%20y1)%0A%20%20%20%20ctx.lineTo(x1%2C%20y1)%0A%20%20%20%20ctx.fillStyle%20%3D%20color%0A%20%20%20%20ctx.fill()%0A%0Actx%20%3D%20canvas.getContext('2d')%0Asize%20%3D%2030%0Afor%20i%20in%20range(size%2B1)%3A%0A%20%20%20%20%23%20%E6%B0%B4%E5%B9%B3%E7%B7%9A%0A%20%20%20%20draw_line(100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20100%2Bi*10%2C%20%22black%22)%0A%20%20%20%20%23%20%E5%9E%82%E7%9B%B4%E7%B7%9A%0A%20%20%20%20draw_line(100%2Bi*10%2C%20100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20%22red%22)%0Afill_rectangle(0%2C%200%2C%20100%2C%20100)&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">畫格線, 多邊形填色</a></p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=import%20math%0Afrom%20browser%20import%20html%2C%20doc%0A%23%20use%20plotarea%20as%20canvas%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0A%23%20%E6%BA%96%E5%82%99%E5%9C%A8%20canvas%20%E4%B8%AD%E7%B9%AA%E5%9C%96%0Adef%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20color%3D%22red%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0A%23%20x%2C%20y%20%E7%82%BA%E4%B8%AD%E5%BF%83%2C%20%20r%20%E7%82%BA%E5%8D%8A%E5%BE%91%2C%20angle%20%E6%97%8B%E8%BD%89%E8%A7%92%2C%20%20solid%20%E7%A9%BA%E5%BF%83%E6%88%96%E5%AF%A6%E5%BF%83%2C%20%20color%20%E9%A1%8F%E8%89%B2%0Adef%20star(x%2C%20y%2C%20r%2C%20angle%3D0%2C%20solid%3DFalse%2C%20color%3D%22%23f00%22)%3A%0A%20%20%20%20%23%20%E4%BB%A5%20x%2C%20y%20%E7%82%BA%E5%9C%93%E5%BF%83%2C%20%E8%A8%88%E7%AE%97%E4%BA%94%E5%80%8B%E5%A4%96%E9%BB%9E%0A%20%20%20%20deg%20%3D%20math.pi%2F180%0A%20%20%20%20%23%20%E5%9C%93%E5%BF%83%E5%88%B0%E6%B0%B4%E5%B9%B3%E7%B7%9A%E8%B7%9D%E9%9B%A2%0A%20%20%20%20a%20%3D%20r*math.cos(72*deg)%0A%20%20%20%20%23%20a%20%E9%A0%82%E9%BB%9E%E5%90%91%E5%8F%B3%E5%88%B0%E5%85%A7%E9%BB%9E%E8%B7%9D%E9%9B%A2%0A%20%20%20%20b%20%3D%20(r*math.cos(72*deg)%2Fmath.cos(36*deg))*math.sin(36*deg)%0A%20%20%20%20%23%20%E5%88%A9%E7%94%A8%E7%95%A2%E6%B0%8F%E5%AE%9A%E7%90%86%E6%B1%82%E5%85%A7%E9%BB%9E%E5%8D%8A%E5%BE%91%0A%20%20%20%20rin%20%3D%20math.sqrt(a**2%20%2B%20b**2)%0A%20%20%20%20%23%20%E6%9F%A5%E9%A9%97%20a%2C%20b%20%E8%88%87%20rin%0A%20%20%20%20%23print(a%2C%20b%2C%20rin)%0A%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20ctx.beginPath()%0A%20%20%20%20for%20i%20in%20range(5)%3A%0A%20%20%20%20%20%20%20%20xout%20%3D%20(x%20%2B%20r*math.sin((360%2F5)*deg*i%2Bangle*deg))%0A%20%20%20%20%20%20%20%20yout%20%3D%20(y%20%2B%20r*math.cos((360%2F5)*deg*i%2Bangle*deg))%0A%20%20%20%20%20%20%20%20%23%20%E5%A4%96%E9%BB%9E%E5%A2%9E%E9%87%8F%20%2B%201%0A%20%20%20%20%20%20%20%20xout2%20%3D%20x%20%2B%20r*math.sin((360%2F5)*deg*(i%2B1)%2Bangle*deg)%0A%20%20%20%20%20%20%20%20yout2%20%3D%20y%20%2B%20r*math.cos((360%2F5)*deg*(i%2B1)%2Bangle*deg)%0A%20%20%20%20%20%20%20%20xin%20%3D%20x%20%2B%20rin*math.sin((360%2F5)*deg*i%2B36*deg%2Bangle*deg)%0A%20%20%20%20%20%20%20%20yin%20%3D%20y%20%2B%20rin*math.cos((360%2F5)*deg*i%2B36*deg%2Bangle*deg)%0A%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E9%A9%97%E5%A4%96%E9%BB%9E%E8%88%87%E5%85%A7%E9%BB%9E%E5%BA%A7%E6%A8%99%0A%20%20%20%20%20%20%20%20%23print(xout%2C%20yout%2C%20xin%2C%20yin)%0A%20%20%20%20%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%A1%AB%E8%89%B2%0A%20%20%20%20%20%20%20%20%20%20%20%20if(i%3D%3D0)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.moveTo(xout%2C%20yout)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xin%2C%20yin)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xout2%2C%20yout2)%0A%20%20%20%20%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xin%2C%20yin)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xout2%2C%20yout2)%0A%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%A9%BA%E5%BF%83%0A%20%20%20%20%20%20%20%20%20%20%20%20draw_line(xout%2C%20yout%2C%20xin%2C%20yin%2C%20color)%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%95%AB%E7%A9%BA%E5%BF%83%E4%BA%94%E8%8A%92%E6%98%9F%2C%20%E7%84%A1%E9%97%9C%E7%95%AB%E7%B7%9A%E6%AC%A1%E5%BA%8F%2C%20%E8%8B%A5%E5%AF%A6%E5%BF%83%E5%89%87%E8%88%87%E7%95%AB%E7%B7%9A%E6%AC%A1%E5%BA%8F%E6%9C%89%E9%97%9C%0A%20%20%20%20%20%20%20%20%20%20%20%20draw_line(xout2%2C%20yout2%2C%20xin%2C%20yin%2C%20color)%0A%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20ctx.fillStyle%20%3D%20color%0A%20%20%20%20%20%20%20%20ctx.fill()%0A%0Actx%20%3D%20canvas.getContext('2d')%0A'''%0Asize%20%3D%2030%0Afor%20i%20in%20range(size%2B1)%3A%0A%20%20%20%20%23%20%E6%B0%B4%E5%B9%B3%E7%B7%9A%0A%20%20%20%20draw_line(100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20100%2Bi*10%2C%20%22black%22)%0A%20%20%20%20%23%20%E5%9E%82%E7%9B%B4%E7%B7%9A%0A%20%20%20%20draw_line(100%2Bi*10%2C%20100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20%22red%22)%0A'''%0Astar(100%2C%20100%2C%2030%2C%200%2C%20True%2C%20%22%23f00%22)%0A%23star(300%2C%20300%2C%2050%2C%200%2C%20False%2C%20%22%23000%22)%0Afor%20i%20in%20range(5)%3A%0A%20%20%20%20for%20j%20in%20range(5)%3A%0A%20%20%20%20%20%20%20%20star(200%2B65*i%2C%20200%2B65*j%2C%2030%2C%200%2C%20False%2C%20%22%23000%22)&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">五芒星繪圖</a></p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=%23coding%3A%20utf-8%0Afrom%20math%20import%20*%0Aimport%20time%0A%23import%20random%0A%23%20%E6%BA%96%E5%82%99%E7%B9%AA%E5%9C%96%E7%95%AB%E5%B8%83%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0Actx%20%3D%20canvas.getContext(%222d%22)%0A%23%20%E5%AE%9A%E7%BE%A9%E5%BA%A7%E6%A8%99%E8%BD%89%E6%8F%9B(0%2C%200)%20%E5%88%B0%20(75%2C%2020)%0Adef%20change_ref_system(x%2C%20y)%3A%0A%20%20%20%20return%20(20%20%2B%20x%20*%208%2C%20420%20-%20y%20*%2020)%0A%23%20%E5%AE%9A%E7%BE%A9%E7%95%AB%E7%B7%9A%E5%87%BD%E5%BC%8F%0Adef%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20linethick%20%3D%203%2C%20color%20%3D%20%22black%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.lineWidth%20%3D%20linethick%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0A%23%20%E5%AE%9A%E7%BE%A9%E4%B8%80%E5%80%8B%E9%BB%9E%E9%A1%9E%E5%88%A5%0Aclass%20Point%3A%0A%20%20%20%20def%20__init__(self%2C%20x%2C%20y)%3A%0A%20%20%20%20%20%20%20%20self.x%20%3D%20x%0A%20%20%20%20%20%20%20%20self.y%20%3D%20y%0A%20%20%20%20def%20distanceTo(self%2C%20obj)%3A%0A%20%20%20%20%20%20%20%20if%20isinstance(obj%2C%20Point)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20sqrt(pow(obj.x%20-%20self.x%2C%202)%20%2B%20pow(obj.y-%20self.y%2C%202))%0A%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20raise%20TypeError(%22Invalid%20type%20in%20Point.distanceTo()%22)%0A%23%20%E5%AE%9A%E7%BE%A9%E4%B8%80%E5%80%8B%E7%B7%9A%E9%A1%9E%E5%88%A5%0Aclass%20Line%3A%0A%20%20%20%20def%20__init__(self%2C%20p1%2C%20p2)%3A%0A%20%20%20%20%20%20%20%20self.p1%20%3D%20p1%0A%20%20%20%20%20%20%20%20self.p2%20%3D%20p2%0A%20%20%20%20%20%20%20%20%23%20%E5%AE%9A%E7%BE%A9%E4%B8%80%E5%80%8B%20Line%20%E7%9A%84%E5%B1%AC%E6%80%A7%20length%0A%20%20%20%20%20%20%20%20self.length%20%3D%20self.p1.distanceTo(self.p2)%0A%20%20%20%20%20%20%20%20self.deg%20%3D%20pi%2F180%0A%20%20%20%20def%20rotate(self%2C%20angle)%3A%0A%20%20%20%20%20%20%20%20%23%20%E4%BB%A5%20p1%20%20%E7%82%BA%E6%97%8B%E8%BD%89%E4%B8%AD%E5%BF%83%E9%BB%9E%0A%20%20%20%20%20%20%20%20%23%20angle%20%E7%82%BA%E5%8F%B3%E6%89%8B%E5%89%87%E6%97%8B%E8%BD%89%E8%A7%92%E5%BA%A6%0A%20%20%20%20%20%20%20%20%23%20%E9%80%99%E8%A3%A1%E4%BB%A5%E5%B7%A6%E4%B8%8A%E8%A7%92%E7%82%BA%E5%8E%9F%E9%BB%9E%2C%20x%20%E5%90%91%E5%8F%B3%E7%82%BA%E6%AD%A3%2C%20y%20%E5%90%91%E4%B8%8B%E7%82%BA%E6%AD%A3%0A%20%20%20%20%20%20%20%20self.p2.x%20%3D%20self.p1.x%20%2B%20self.length*cos(angle*self.deg)%0A%20%20%20%20%20%20%20%20self.p2.y%20%3D%20self.p1.y%20-%20self.length*sin(angle*self.deg)%0A%23%20%E5%AE%9A%E7%BE%A9%E4%B8%80%E5%80%8B%E5%9B%9E%E5%91%BC%E7%B9%AA%E5%9C%96%E5%87%BD%E5%BC%8F%0Adataset%20%3D%20%5B%5D%0Adef%20graph()%3A%0A%20%20%20%20p1%20%3D%20Point(0%2C%200)%0A%20%20%20%20p2%20%3D%20Point(10%2C%200)%0A%20%20%20%20data%20%3D%20random.random()%20*%2020%0A%20%20%20%20doc%5B%22dataarea%22%5D%20%3C%3D%20'%25s%2C%20'%20%25%20str(data)%5B0%3A5%5D%0A%20%20%20%20dataset.append(data)%0A%20%20%20%20if%20len(dataset)%20%3D%3D%201%3A%0A%20%20%20%20%20%20%20%20x%2C%20y%20%3D%20change_ref_system(len(dataset)%2C%20data)%0A%20%20%20%20%20%20%20%20draw_line(x%2C%20y%2C%20x%2C%20y%2C%20linethick%3D3%2C%20color%3D%22blue%22)%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20x1%2C%20y1%20%3D%20change_ref_system(len(dataset)-1%2C%20dataset%5B-2%5D)%0A%20%20%20%20%20%20%20%20x2%2C%20y2%20%3D%20change_ref_system(len(dataset)%2C%20data)%0A%20%20%20%20%20%20%20%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20linethick%3D3%2C%20color%3D%22blue%22)%0A%20%20%20%20if%20len(dataset)%20%3E%3D%20100%3A%0A%20%20%20%20%20%20%20%20print(len(dataset))%0A%20%20%20%20%20%20%20%20time.clear_interval(work)%0Ap1%20%3D%20Point(0%2C%200)%0Ap2%20%3D%20Point(10%2C%200)%0Ap3%20%3D%20Point(6.5%2C%207.8)%0Aprint(%22%E9%BB%9E%20p1%20%E5%88%B0%E9%BB%9E%20p2%20%E7%9A%84%E8%B7%9D%E9%9B%A2%3A%22%2C%20p1.distanceTo(p2))%0Aline1%20%3D%20Line(p1%2C%20p2)%0Aprint(%22%E7%B7%9A%20line1%20%E7%9A%84%E9%95%B7%E5%BA%A6%3A%22%2C%20line1.length)%0A%23%20%E4%BB%A5%20p3%20%E7%82%BA%E5%9C%93%E5%BF%83%2C%20%E6%97%8B%E8%BD%89%2090%20%E5%BA%A6%0Aline1.rotate(90)%0A%23work%20%3D%20time.set_interval(graph%2C%20100)%0Aprint(%22%E6%97%8B%E8%BD%89%E5%BE%8C%2C%20line1%20%E7%9A%84%E9%95%B7%E5%BA%A6%3A%22%2C%20line1.length)%0Aprint(%22%E6%97%8B%E8%BD%89%E5%BE%8C%2C%20p1%20%E7%9A%84%E5%BA%A7%E6%A8%99%3A%22%2C%20line1.p1.x%2C%20%22%2C%22%2C%20line1.p1.y)%0Aprint(%22%E6%97%8B%E8%BD%89%E5%BE%8C%2C%20p2%20%E7%9A%84%E5%BA%A7%E6%A8%99%3A%22%2C%20line1.p2.x%2C%20%22%2C%22%2C%20%20line1.p2.y)%0Ax1%2C%20y1%20%3D%20change_ref_system(0%2C%200)%0Afor%20%E7%B4%A2%E5%BC%95%20in%20range(0%2C%2070%2C%204)%3A%0A%20%20%20%20x2%2C%20y2%20%3D%20change_ref_system(%E7%B4%A2%E5%BC%95%2C%2020)%0A%20%20%20%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20linethick%3D3%2C%20color%3D%22blue%22)%0Ax1%2C%20y1%20%3D%20change_ref_system(70%2C%200)%0Afor%20%E7%B4%A2%E5%BC%95%20in%20range(0%2C%2070%2C%204)%3A%0A%20%20%20%20x2%2C%20y2%20%3D%20change_ref_system(%E7%B4%A2%E5%BC%95%2C%2020)%0A%20%20%20%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20linethick%3D3%2C%20color%3D%22red%22)&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">繪圖 + 李伯寫程式執行記錄 (日記)</a></p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=import%20math%0Afrom%20browser%20import%20doc%0Aimport%20browser.timer%0A%0Adef%20draw_circle(x%2C%20y%2C%20r%2C%20linethick%3D1%2C%20color%3D%22black%22)%3A%0A%20%20%20%20global%20ctx%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.lineWidth%20%3D%20linethick%0A%20%20%20%20ctx.arc(x%2C%20y%2C%20r%2C%200%2C%20math.pi*2%2C%20true)%0A%20%20%20%20ctx.closePath()%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0A%0Adef%20draw()%3A%0A%20%20%20%20global%20theta%2C%20ctx%2C%20canvas%2C%20x%2C%20y%2C%20r%2C%20dx%2C%20dy%0A%20%20%20%20%23%20clear%20canvas%20context%0A%20%20%20%20ctx.clearRect(0%2C%200%2C%20canvas.width%2C%20canvas.height)%0A%20%20%20%20%23%20draw%20circle%0A%20%20%20%20draw_circle(x%2C%20y%2C%2010)%0A%20%20%20%20%23%20calculate%20new%20x%2C%20y%20position%0A%20%20%20%20theta%20%3D%20theta%20%2B%20dx%0A%20%20%20%20x%20%3D%20200%20%2B%20r*math.cos(theta*math.pi%2F180)%0A%20%20%20%20y%20%3D%20200%20-%20r*math.sin(2*theta*math.pi%2F180)%0A%20%0A%20%0Ax%2C%20y%2C%20r%20%3D%20200%2C%20200%2C%2050%0A%23%20define%20canvas%20and%20context%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0Actx%20%3D%20canvas.getContext(%222d%22)%0A%23%20fourbar%20linkage%20inputs%0Atheta%20%3D%200%0Adegree%20%3D%20math.pi%2F180%0Adx%20%3D%202%0Ady%20%3D%204%0A%0Abrowser.timer.set_interval(draw%2C%2010)&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">動態模擬</a></p>
<p><a href="http://2014c2-mdenfu.rhcloud.com/static/reeborg/world.html?proglang=python-en&amp;world=%7B%22blank_canvas%22%3Atrue%7D&amp;editor=import%20math%0Afrom%20browser%20import%20html%2C%20doc%0A%23%20use%20plotarea%20as%20canvas%0Acanvas%20%3D%20doc%5B%22background_canvas%22%5D%0A%23%20%E6%BA%96%E5%82%99%E5%9C%A8%20canvas%20%E4%B8%AD%E7%B9%AA%E5%9C%96%0Adef%20draw_line(x1%2C%20y1%2C%20x2%2C%20y2%2C%20color%3D%22red%22)%3A%0A%20%20%20%20ctx.beginPath()%0A%20%20%20%20ctx.moveTo(x1%2C%20y1)%0A%20%20%20%20ctx.lineTo(x2%2C%20y2)%0A%20%20%20%20ctx.strokeStyle%20%3D%20color%0A%20%20%20%20ctx.stroke()%0A%23%20x%2C%20y%20%E7%82%BA%E4%B8%AD%E5%BF%83%2C%20%20r%20%E7%82%BA%E5%8D%8A%E5%BE%91%2C%20angle%20%E6%97%8B%E8%BD%89%E8%A7%92%2C%20%20solid%20%E7%A9%BA%E5%BF%83%E6%88%96%E5%AF%A6%E5%BF%83%2C%20%20color%20%E9%A1%8F%E8%89%B2%0Adef%20star(x%2C%20y%2C%20r%2C%20angle%3D0%2C%20solid%3DFalse%2C%20color%3D%22%23f00%22)%3A%0A%20%20%20%20%23%20%E4%BB%A5%20x%2C%20y%20%E7%82%BA%E5%9C%93%E5%BF%83%2C%20%E8%A8%88%E7%AE%97%E4%BA%94%E5%80%8B%E5%A4%96%E9%BB%9E%0A%20%20%20%20deg%20%3D%20math.pi%2F180%0A%20%20%20%20%23%20%E5%9C%93%E5%BF%83%E5%88%B0%E6%B0%B4%E5%B9%B3%E7%B7%9A%E8%B7%9D%E9%9B%A2%0A%20%20%20%20a%20%3D%20r*math.cos(72*deg)%0A%20%20%20%20%23%20a%20%E9%A0%82%E9%BB%9E%E5%90%91%E5%8F%B3%E5%88%B0%E5%85%A7%E9%BB%9E%E8%B7%9D%E9%9B%A2%0A%20%20%20%20b%20%3D%20(r*math.cos(72*deg)%2Fmath.cos(36*deg))*math.sin(36*deg)%0A%20%20%20%20%23%20%E5%88%A9%E7%94%A8%E7%95%A2%E6%B0%8F%E5%AE%9A%E7%90%86%E6%B1%82%E5%85%A7%E9%BB%9E%E5%8D%8A%E5%BE%91%0A%20%20%20%20rin%20%3D%20math.sqrt(a**2%20%2B%20b**2)%0A%20%20%20%20%23%20%E6%9F%A5%E9%A9%97%20a%2C%20b%20%E8%88%87%20rin%0A%20%20%20%20%23print(a%2C%20b%2C%20rin)%0A%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20ctx.beginPath()%0A%20%20%20%20for%20i%20in%20range(5)%3A%0A%20%20%20%20%20%20%20%20xout%20%3D%20(x%20%2B%20r*math.sin((360%2F5)*deg*i%2Bangle*deg))%0A%20%20%20%20%20%20%20%20yout%20%3D%20(y%20%2B%20r*math.cos((360%2F5)*deg*i%2Bangle*deg))%0A%20%20%20%20%20%20%20%20%23%20%E5%A4%96%E9%BB%9E%E5%A2%9E%E9%87%8F%20%2B%201%0A%20%20%20%20%20%20%20%20xout2%20%3D%20x%20%2B%20r*math.sin((360%2F5)*deg*(i%2B1)%2Bangle*deg)%0A%20%20%20%20%20%20%20%20yout2%20%3D%20y%20%2B%20r*math.cos((360%2F5)*deg*(i%2B1)%2Bangle*deg)%0A%20%20%20%20%20%20%20%20xin%20%3D%20x%20%2B%20rin*math.sin((360%2F5)*deg*i%2B36*deg%2Bangle*deg)%0A%20%20%20%20%20%20%20%20yin%20%3D%20y%20%2B%20rin*math.cos((360%2F5)*deg*i%2B36*deg%2Bangle*deg)%0A%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E9%A9%97%E5%A4%96%E9%BB%9E%E8%88%87%E5%85%A7%E9%BB%9E%E5%BA%A7%E6%A8%99%0A%20%20%20%20%20%20%20%20%23print(xout%2C%20yout%2C%20xin%2C%20yin)%0A%20%20%20%20%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%A1%AB%E8%89%B2%0A%20%20%20%20%20%20%20%20%20%20%20%20if(i%3D%3D0)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.moveTo(xout%2C%20yout)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xin%2C%20yin)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xout2%2C%20yout2)%0A%20%20%20%20%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xin%2C%20yin)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ctx.lineTo(xout2%2C%20yout2)%0A%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%A9%BA%E5%BF%83%0A%20%20%20%20%20%20%20%20%20%20%20%20draw_line(xout%2C%20yout%2C%20xin%2C%20yin%2C%20color)%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%95%AB%E7%A9%BA%E5%BF%83%E4%BA%94%E8%8A%92%E6%98%9F%2C%20%E7%84%A1%E9%97%9C%E7%95%AB%E7%B7%9A%E6%AC%A1%E5%BA%8F%2C%20%E8%8B%A5%E5%AF%A6%E5%BF%83%E5%89%87%E8%88%87%E7%95%AB%E7%B7%9A%E6%AC%A1%E5%BA%8F%E6%9C%89%E9%97%9C%0A%20%20%20%20%20%20%20%20%20%20%20%20draw_line(xout2%2C%20yout2%2C%20xin%2C%20yin%2C%20color)%0A%20%20%20%20if(solid)%3A%0A%20%20%20%20%20%20%20%20ctx.fillStyle%20%3D%20color%0A%20%20%20%20%20%20%20%20ctx.fill()%0A%0Actx%20%3D%20canvas.getContext('2d')%0A'''%0Asize%20%3D%2030%0Afor%20i%20in%20range(size%2B1)%3A%0A%20%20%20%20%23%20%E6%B0%B4%E5%B9%B3%E7%B7%9A%0A%20%20%20%20draw_line(100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20100%2Bi*10%2C%20%22black%22)%0A%20%20%20%20%23%20%E5%9E%82%E7%9B%B4%E7%B7%9A%0A%20%20%20%20draw_line(100%2Bi*10%2C%20100%2C%20100%2Bi*10%2C%20100%2Bsize*10%2C%20%22red%22)%0A'''%0Astar(100%2C%20100%2C%2030%2C%200%2C%20True%2C%20%22%23f00%22)%0A%23star(300%2C%20300%2C%2050%2C%200%2C%20False%2C%20%22%23000%22)%0Afor%20i%20in%20range(5)%3A%0A%20%20%20%20for%20j%20in%20range(5)%3A%0A%20%20%20%20%20%20%20%20star(200%2B65*i%2C%20200%2B65*j%2C%2030%2C%200%2C%20False%2C%20%22%23000%22)%0A%0AdataURL%20%3D%20canvas.toDataURL()%0Adoc%5B'canvas_image'%5D.src%20%3D%20dataURL%0A&amp;library=%23%20'import%20my_lib'%20in%20Python%20Code%20is%20required%20to%20use%0A%23%20the%20code%20in%20this%20library.%20%0Adef%20turn_right()%3A%0A%20%20%20%20repeat(turn_left%2C%203)">影像存檔</a></p>
<p> </p>
<p> </p><h1>魔術方塊</h1>
<p><iframe src="/cmsimply/rubik" frameborder="0" scrolling="no" width="800" height="800"></iframe></p><h2>Chrome cube lab</h2>
<p><a href="https://chrome.com/cubelab">https://chrome.com/cubelab</a></p><h1>CMSimply 配置</h1><h2>CherryPy 啟動設定</h2>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">application_conf = {
        '/static':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': _curdir+"/static"},
        '/images':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/images"},
        '/downloads':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/downloads"},
        '/brython_programs':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/brython_programs"},
        '/calc_programs':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/calc_programs"},
        '/':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': _curdir+"/static/openjscad"}
    }</pre>
<p> </p>
<h2>導入 CMSimply 模組</h2>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">import cmsimply

# 導入 CMSimply 內容管理模組
root.cmsimply = cmsimply.CMSimply()
root.cmsimply.download = cmsimply.Download()</pre>
<p> </p>
<p> </p><h2>Index 導向</h2>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">@cherrypy.expose
def index(self, input1=None, input2=None):
    raise cherrypy.HTTPRedirect("/cmsimply")
    return "設定與 Github 同步"+str(input1)</pre>
<h2>起始函式</h2>
<pre class="brush: python; fontsize: 100; first-line: 1; toolbar: false; ">def __init__(self):
    # hope to create downloads and images directories　
    if not os.path.isdir(download_root_dir+"downloads"):
        try:
            os.makedirs(download_root_dir+"downloads")
        except:
            print("mkdir error")
    if not os.path.isdir(download_root_dir+"images"):
        try:
            os.makedirs(download_root_dir+"images")
        except:
            print("mkdir error")
    if not os.path.isdir(download_root_dir+"tmp"):
        try:
            os.makedirs(download_root_dir+"tmp")
        except:
            print("mkdir error")
    if not os.path.isdir(data_dir+"brython_programs"):
        try:
            os.makedirs(data_dir+"brython_programs")
        except:
            print("mkdir error")
    if not os.path.isdir(data_dir+"calc_programs"):
        try:
            os.makedirs(data_dir+"calc_programs")
        except:
            print("mkdir error")
</pre>
<h2>程式碼與目錄</h2>
<p>從 Leo Editor 複製 CMSimply 程式碼</p>
<p>配合在 application 根目錄複製對應的其他程式碼</p>
